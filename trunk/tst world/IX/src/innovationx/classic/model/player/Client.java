package src.innovationx.classic.model.player;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

import src.innovationx.classic.Server;
import src.innovationx.classic.content.minigames.BossManager;
import src.innovationx.classic.content.minigames.FightPits;
import src.innovationx.classic.content.minigames.ZombieMinigame;
import src.innovationx.classic.model.AntiDupe;
import src.innovationx.classic.model.items.Item;
import src.innovationx.classic.model.npc.NPC;
import src.innovationx.classic.model.player.combat.Hit;
import src.innovationx.classic.model.player.combat.HitQueue;
import src.innovationx.classic.model.player.combat.PlayerCombat;
import src.innovationx.classic.model.player.content.EquipmentData;
import src.innovationx.classic.model.player.task.PlayerTask;
import src.innovationx.classic.net.Cryption;
import src.innovationx.classic.net.MacAddress;
import src.innovationx.classic.net.stream;
import src.innovationx.classic.net.forums.DatabaseFunctions;
import src.innovationx.classic.net.forums.SQL;
import src.innovationx.classic.util.Misc;
import src.innovationx.classic.util.event.Event;
import src.innovationx.classic.util.event.EventContainer;
import src.innovationx.classic.util.event.EventManager;
import src.innovationx.classic.util.newevent.GameLogicTask;

public class Client extends Player implements Runnable {

	public PlayerTasksManager taskManager = new PlayerTasksManager(this);
	public Queue<EquipmentData> wieldQueue = new LinkedList<EquipmentData>();
	public Random randomz = new Random();
	public HitQueue hitQueue = new HitQueue(this);
	public PlayerCombat combat = new PlayerCombat(this);
	public boolean solEffect = false;
	public int solDrainWait = 0;
	public int[] dragonClawDamage = new int[1];
	public int[] dragonClawDamageDelay = new int[1];
	public int xlogDelay;

	public double getXPMultiplier() {
		int ring = this.playerEquipment[this.playerRing];
		double bonus = 1;
		if (isMember == 1)
			bonus = 1.5;
		if (isExtremeMember == 1)
			bonus = 2;
		if ((ring == 2572) && expRing)
			bonus = bonus * 2;
		return bonus;
	}

	public String getPlayerStatus() {
		if (admin) {
			return "@red@Administrator";
		}
		if (jrAdmin) {
			return "@dre@JrAdmin";
		}
		if (developer) {
			return "@yel@Developer";
		}
		if (jrMod) {
			return "@cya@Global Mod";
		}
		if (founder) {
			return "@dbl@Founder";
		}
		if (isMember == 1) {
			return "@ora@Premium";
		}
		if (isExtremeMember == 1) {
			return "@or1@Extreme";
		}
		return "@whi@Player";
	}

	public void attemptWield() {
		if (wieldQueue.isEmpty())
			return;
		if (this.IsDead)
			wieldQueue.clear();
		for (EquipmentData d : wieldQueue) {
			wear(d.getId(), d.getSlot(), d.getUnknown());
		}
		wieldQueue.clear();
	}

	public void pushTask(PlayerTask task) {
		taskManager.getTasks().offer(task);
	}

	/*
	 * Handles a method for special bars
	 */
	public void setConfig5(int id, int state) {
		outStream.createFrame(87);
		outStream.writeWordBigEndian(id);
		outStream.writeDWord_v1(state);
	}

	public void specialBar(int id, int i) {
		outStream.createFrame(171);
		outStream.writeByte(i);
		outStream.writeWord(id);
		flushOutStream();
	}

	public void setClientConfig(int id, int state) {
		outStream.createFrame(36);
		outStream.writeWordBigEndian(id);
		outStream.writeByte(state);
	}

	public void writeSpecialBar(boolean flag) {
		Client p = this;
		if (p != null) {
			if (flag) {
				if (UsingSpecial) {
					setClientConfig(301, 1);
				} else {
					setClientConfig(301, 0);
				}

				setConfig5(300, specialAmount * 10);
				specialBar(7624, 0);
				specialBar(7649, 0);
				specialBar(7524, 0);
				specialBar(12323, 0);
				specialBar(7574, 0);
				specialBar(7599, 0);
				specialBar(7549, 0);
				specialBar(8493, 0);
				specialBar(7474, 0);
				specialBar(7499, 0);

			} else {
				specialBar(7624, 1);
				specialBar(7649, 1);
				specialBar(7524, 1);
				specialBar(7474, 1);
				specialBar(12323, 1);
				specialBar(7574, 1);
				specialBar(7599, 1);
				specialBar(7549, 1);
				specialBar(8493, 1);
				specialBar(7499, 1);
			}
		}
	}

	public boolean hasSpec() {
		boolean flag = false;
		int[] SPECWEP = { 9011, 9080, 9006, 9052, 9049, 1341, 1215, 5698, 83,
				15334, 4151, 4153, 15335, 15336, 3101, 861, 15156, 1297, 1434,
				11730, 14484, 8086, 7958, 8922, 8907, 8908, 1999, 8916 };
		for (int i = 0; i < SPECWEP.length; i++) {
			if (playerEquipment[playerWeapon] == SPECWEP[i]) {
				flag = true;
			}
		}
		return flag;
	}

	public void setSpec(boolean flag) {
		UsingSpecial = flag;
		writeSpecialBar(hasSpec());
	}

	public void setClaws(int hit) {
		dragonClawDamage[0] = hit;
		dragonClawDamage[1] = hit + 1;
		for (int i = 0; i < dragonClawDamage.length; i++) {
			dragonClawDamageDelay[i] = 4; // I changed tom im not using this im
											// using pali's system
		}
	}

	public void appendDelayedHit(int hit, int delay) {
		for (int i = 0; i < 5; i++) {
			if (delayedDmgSlot[i] == 0 || delayedDmgSlot[i] == -1) {
				delayedDmgSlot[i] = playerId;
				delayedDmgTarget[i] = 1;
				delayedDmgType[i] = 0;
				delayedDmgHit[i] = hit;
				delayedDmgTime[i] = delay;
				break;
			}
		}
	}

	public void appendDragonClawDamage() {
		for (int i = 0; i < dragonClawDamage.length; i++) {
			if (dragonClawDamage[i] != -1) {
				dragonClawDamageDelay[i]--;
				if (dragonClawDamageDelay[i] == 0) {
					dragonClawDamageDelay[i] = -1; // 1 second
					appendIntHit(dragonClawDamage[i]);
				}
			}
		}
	}

	public void appendIntHit(int damage) {
		Client victim = this;
		if (!victim.hitUpdateRequired) {
			victim.hitUpdateRequired = true;
			victim.hitDiff = damage;
		} else {
			victim.hitUpdateRequired2 = true;
			victim.hitDiff2 = damage;
		}
		victim.appendHit(damage);
		victim.updateRequired = true;
	}

	public void soulSplit() { // process tbh
		sendMessage("Worked out.");
		soulSplitWait = 60;
		if (attackingPlayerId != -1) {
			Client opp = Server.s.playerHandler.clients[attackingPlayerId];
			if (opp != null && !opp.IsDead && !(opp.currentHealth < 1)) {
				sendMessage("Worked in.");
				opp.playGraphic(293, 0, 15);
				int heal = (int) hitDiff / 4;
				updateHp((int) heal, true);
				updateRequired = true;
				hitUpdateRequired = true;
				opp.sendMessage("Your opponent grabbed part of your soul, you feel weakened!");
				if ((opp.playerLevel[2] - ((int) (opp.playerLevel[3] / 4))) < 1) {
					opp.playerLevel[2] = 1;
					return;
				}
				opp.playerLevel[2] -= ((int) (opp.playerLevel[3] / 4));
			}
		}
	}

	public int freeSlots() {
		int freeS = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] <= 0) {
				freeS++;
			}
		}
		return freeS;
	}

	// and 1 more thing get me to special atk's please

	/**
	 * For drag whip
	 */
	public boolean soulSplit = false;
	public int soulSplitWait = 0;

	public int zombieKills = 0;

	/**
	 * Simply teleports a player to a location tile.
	 */
	public void teleport(int x, int y) {
		teleportToX = x;
		teleportToY = y;
	}

	public int magicHitDelay(NPC p, Player opp) {
		int hitDelay = 0;
		int dist = Misc.getDistance(p.absX, p.absY, opp.absX, opp.absY);
		if (dist == 0) {
		} else if (dist == 1) {
			hitDelay = 3;
		} else if (dist == 2 || dist == 3) {
			hitDelay = 3;
		} else if (dist == 4 || dist == 5) {
			hitDelay = 4;
		} else if (dist == 6 || dist == 7) {
			hitDelay = 5;
		} else if (dist == 8 || dist == 9) {
			hitDelay = 6;
		} else if (dist == 10 || dist == 11) {
			hitDelay = 7;
		} else if (dist == 12 || dist == 13) {
			hitDelay = 8;
		} else if (dist == 14 || dist == 15) {
			hitDelay = 9;
		} else {
			hitDelay = 10;
		}
		return ((hitDelay * 500) /*- (dist * 4)*/);
	}

	public int waitingSkele = 0;
	public int healWait = 0;
	public int updateWait = 0;
	/**
	 * Pets by Canownueasy
	 */
	public boolean petSpell;
	public NPC pet;

	public boolean ownsPet(NPC pet) {
		if (this.pet != pet) {
			return false;
		}
		return true;
	}

	public int petHeight = 10;

	public void removePet(boolean quick) {
		if (pet == null) {
			return;
		}
		if (quick) {
			pet.heightLevel = 10;
			pet.updateRequired = true;
			return;
		}
		EventManager.getSingleton().addEvent(new Event() {
			public void execute(EventContainer event) {
				pet.heightLevel = 10;
				pet.updateRequired = true;
				event.stop();
			}
		}, 600);
	}

	@SuppressWarnings("null")
	public void spawnPet(NPC petz) {
		if (pet == null) {
			this.pet = petz;
			pet.RandomWalk = false;
			pet.owner = this;
			// pet.followPlayer(this);
			pet.StartKilling = playerId;
			pet.followPlayer();
		} else {
			this.pet = petz;
			pet.RandomWalk = false;
			pet.owner = this;
			pet.heightLevel = heightLevel;
			pet.forceChat("Hey " + playerName + "! Glad to see you again.");
			pet.updateRequired = true;
		}
		showDialogue("Your pet was spawned!");
	}

	public void spawnPet() {
		pet.heightLevel = heightLevel;
		pet.forceChat("Hey " + playerName + "! Glad to see you again.");
		showDialogue("Your pet was spawned!");
	}

	public void respawnPet(int id) {
		pet = null;
		NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler.newNPC(id,
				absX, absY, heightLevel, 0, 0, 0, 0, true, -1)];
		spawnPet(newPet);
	}

	/**
	 * Requests new force chat.
	 * 
	 * @param text
	 *            The text.
	 * @author Canownueasy
	 */
	public void forceChat(String text) {
		forcedPlayerText = text;
		forcedChatUpdateRequired = true;
	}

	/**
	 * Makes a player travel by magic carpet.
	 * 
	 * @param x
	 *            To this x.
	 * @param y
	 *            To this y.
	 * @author Canownueasy
	 */
	public void travelMagicCarpet(final int x, final int y) {
		teleBlockDelay = 1000;
		playAnimation(2262, 0);
		changeAllEmotes(2262);
		EventManager.getSingleton().addEvent(new Event() {
			public void execute(EventContainer event) {
				if (absX == x && absY == y) {
					defaultEmotes();
					carpetDropOff();
					event.stop();
					return;
				}
				changeAllEmotes(2261);
				walkToPoint(x, y, 2261);
			}
		}, 850);
	}

	public void defaultEmotes() {
		playerSE = GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon]));
		playerSER = GetRunEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon]));
		playerSEW = GetWalkEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon]));
		playerSW = GetWalkEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon]));
	}

	public void changeAllEmotes(int id) {
		playerSE = id;
		playerSER = id;
		playerSEW = id;
		playerSW = id;
	}

	public void carpetDropOff() {
		/*
		 * playerSE = 2263; playerSER = 2263; playerSEW = 2263; playerSW = 2263;
		 */
		playAnimation(2263, 0);
		teleBlockDelay = 0;
		/*
		 * EventManager.getSingleton().addEvent(new Event() { public void
		 * execute(EventContainer event) { playerSE =
		 * GetStandEmote(playerEquipment[playerWeapon],
		 * getItemName(playerEquipment[playerWeapon])); playerSER =
		 * GetRunEmote(playerEquipment[playerWeapon],
		 * getItemName(playerEquipment[playerWeapon])); playerSEW =
		 * GetWalkEmote(playerEquipment[playerWeapon],
		 * getItemName(playerEquipment[playerWeapon])); playerSW =
		 * GetWalkEmote(playerEquipment[playerWeapon],
		 * getItemName(playerEquipment[playerWeapon])); event.stop(); } },
		 * 1300);
		 */
	}

	/* Different 2H/GS/SS Attacks by Canownueasy */
	public int GSWeaponAttackStyle;

	/* Different C'Bow Attacks by Canownueasy */
	public int CrossAttackStyle;

	public int fletchXpInc = 20;
	public int herbXpInc = 20;
	public int fishXpInc = 24;
	public int cookXpInc = 24;
	public int runeCXpInc = 20;
	public int woodcutXpInc = 20;
	public int mineXpInc = 50;
	public int craftXpInc = 20;
	public int smithXpInc = 20;
	public int thiefXpInc = 20;
	public int slayerXpInc = 50;
	public int combatXpInc = 76;
	public int magicXpInc = 76;
	public int rangedXpInc = 76;
	public int prayerXpInc = 50;
	public int farmXpInc = 50;
	public int agilityXpInc = 50;
	public int firemakingXpInc = 192;
	public int firemakingTimer = 0;
	public int firemakingWait = 0;

	public static final int[] logs = { 1511, 1513, 1515, 1517, 1519, 1521,
			1523, 1525, 1527 };
	public byte[] readyBuffer = null;
	public String statName[] = { "attack", "defence", "strength", "hitpoints",
			"range", "prayer", "magic", "cooking", "woodcutting", "fletching",
			"fishing", "firemaking", "crafting", "Smithing", "mining",
			"herblore", "agility", "thieving", "slayer", "farming",
			"runecrafting" };

	public int getItemSlot(int itemId) {
		for (int slot = 0; slot < playerItems.length; slot++) {
			if (playerItems[slot] == (itemId + 1)) {
				return slot;
			}
		}
		return -1;
	}

	public int calcDistanceDamage(int x, int y) {
		if (WithinDistance(absX, absY, x, y, 1)) {
			return 2;
		} else if (WithinDistance(absX, absY, x, y, 2)) {
			return 3;
		} else if (WithinDistance(absX, absY, x, y, 3)) {
			return 3;
		} else if (WithinDistance(absX, absY, x, y, 4)) {
			return 4;
		} else if (WithinDistance(absX, absY, x, y, 5)) {
			return 4;
		} else if (WithinDistance(absX, absY, x, y, 6)) {
			return 4;
		} else if (WithinDistance(absX, absY, x, y, 7)) {
			return 4;
		} else if (WithinDistance(absX, absY, x, y, 8)) {
			return 4;
		}
		return 5;
	}

	public int calcDistanceSpeed(int x, int y) {
		if (WithinDistance(absX, absY, x, y, 1)) {
			return 60;
		} else if (WithinDistance(absX, absY, x, y, 2)) {
			return 70;
		} else if (WithinDistance(absX, absY, x, y, 3)) {
			return 80;
		} else if (WithinDistance(absX, absY, x, y, 4)) {
			return 90;
		} else if (WithinDistance(absX, absY, x, y, 5)) {
			return 90;
		} else if (WithinDistance(absX, absY, x, y, 6)) {
			return 95;
		} else if (WithinDistance(absX, absY, x, y, 7)) {
			return 100;
		} else if (WithinDistance(absX, absY, x, y, 8)) {
			return 110;
		}
		return 110;
	}

	public int packetSize = 0;
	public int packetType = -1;
	public int readPtr, writePtr = 0;
	public stream inStream = null, outStream = null;
	public Cryption inStreamDecryption = null, outStreamDecryption = null;
	public final int bufferSize = 1000/* 1000000 */;
	public java.io.InputStream in;
	public java.io.OutputStream out;
	public int returnCode = 2;
	public boolean castingDamage = false;
	public boolean spellSplashed = false;
	public int CurrentFrame = -1;
	public int soundEffect = 0;
	public boolean teleWindow = false;
	public int[] delayedDmgSlot = new int[5];
	public int[] delayedDmgTarget = new int[5];
	public int[] delayedDmgType = new int[5];
	public int[] delayedDmgHit = new int[5];
	public int[] delayedDmgTime = new int[5];
	public int[] delayedSpellId = new int[5];
	public int[] dSpotX = { 3356, 3362, 3372, 3377 };
	public int[] dSpotY = { 3277, 3275, 3275, 3269 };
	public int[] loginPackets = new int[10];
	private int privateByte = 0;
	public int coordError = 20;
	public boolean rangeSpec = false;
	public int duelStartDelay = 0;
	public int pageNumber = 0;
	public int telegrab = 0;
	public long clientSessionKey = 0, serverSessionKey = 0;
	public int lG = 0;
	public boolean needsUpdate = false;

	public void run() {
		try {
			long serverSessionKey = 0, clientSessionKey = 0;
			serverSessionKey = ((long) (Math.random() * 99999999D) << 32)
					+ (long) (Math.random() * 99999999D);
			fillInStream(2);
			int supportedType = inStream.readUnsignedByte();
			if (supportedType != 14) {
				disconnected = true;
				return;
			}
			//int nameOffset = inStream.readUnsignedByte();
			for (int i = 0; i < 9; i++) {
				outStream.writeByte(0);
			}
			outStream.writeQWord(serverSessionKey);
			directFlushOutStream();
			fillInStream(2);
			int connectionType = inStream.readUnsignedByte();
			if (connectionType != 16 && connectionType != 18) {
				disconnected = true;
				returnCode = 3;
			}
			int packetSize = inStream.readUnsignedByte();
			fillInStream(packetSize);
			int byte255 = inStream.readUnsignedByte();
			if (byte255 != 4) {
				System.out.println("[CLIENT]: Wrong 255 byte: " + byte255);
				returnCode = 22;
				disconnected = true;
			}
			int clientVersion = inStream.readUnsignedWord();
			if (clientVersion != 317) {
				System.out.println("[CLIENT]: Wrong client version: "
						+ clientVersion);
				disconnected = true;
				returnCode = 6;
			}
			int memoryType = inStream.readUnsignedByte();
			if (memoryType != 0 && memoryType != 1) {
				disconnected = true;
				returnCode = 6;
			}
			int[] crcs = new int[9];
			for (int i = 0; i < 9; i++) {
				crcs[i] = inStream.readDWord();
			}
			int int1 = inStream.readUnsignedByte();
			int int2 = inStream.readUnsignedByte();
			clientSessionKey = inStream.readQWord();
			serverSessionKey = inStream.readQWord();
			int uid = inStream.readDWord();
			String name = inStream.readString().toLowerCase().trim();

			if (name.length() == 0) {
				disconnected = true;
				returnCode = 3;
				// this.destruct();
			}
			for (int i = 0; i < name.length(); i++) {
				Character c = new Character(name.charAt(i));
				if (!Character.isLetterOrDigit(c) && !Character.isSpaceChar(c)) {
					disconnected = true;
					returnCode = 3;
				}
			}
			if (returnCode == 2 && Server.s.playerHandler.bannedHost(PlayerIp)) {
				returnCode = 4;
			}
			playerName = name;
			String properName = "";
			char first = playerName.charAt(0);
			properName = Character.toUpperCase(first)
					+ playerName.substring(1, playerName.length());
			playerName = properName;
			// AntiDupe.onlineNames.add(playerName);
			if (returnCode == 2
					&& Server.s.playerHandler.bannedPlayer(playerName)) {
				returnCode = 4;
			}
			/*
			 * if (AntiDupe.onlineNames.contains(playerName)) {
			 * System.out.println("PLAYER WAS ON: " + playerName); returnCode =
			 * 5; }
			 */
			playerPass = inStream.readString();
			if (playerPass == null) {
				disconnected = true;
				returnCode = 3;
			}
			for (int i = 0; i < playerPass.length(); i++) {
				Character c = new Character(playerPass.charAt(i));
				if (!Character.isLetterOrDigit(c) && !Character.isSpaceChar(c)) {
					disconnected = true;
					returnCode = 3;
				}
			}
			int lG = loadGame();
			if (lG == 2 || lG == 0 || lG == 3) {
				int[] returnCodes = Server.vb.checkUser(playerName, playerPass);
				int usergroupId = returnCodes[1];
				if (returnCodes[2] == 1) {
					isMember = 1;
					playerRights = 4;
				}
				if (returnCodes[2] == 2) {
					isMember = 1;
					isExtremeMember = 1;
					playerRights = 5;
				}
				// Purchasing items
				if (returnCodes[3] == 1)
					expRing = true;
				// below is an example of using usergroups
				switch (usergroupId) {
				case 15: // Founder
					playerRights = 2;
					founder = true;
					break;
				case 6: // Admin
					playerRights = 2;
					admin = true;
					break;
				case 9: // Developers
					playerRights = 2;
					developer = true;
					break;
				case 13: // Server Admin
					playerRights = 1;
					jrAdmin = true;
					break;
				case 16: // Server Mod
					playerRights = 1;
					jrMod = true;
					break;
				case 10: // Premium
					isMember = 1;
					playerRights = 4;
					break;
				case 11: // Extreme
					isMember = 1;
					isExtremeMember = 1;
					playerRights = 5;
					break;
				case 8: // Banned
					returnCode = 4;
					disconnected = true;
					break;
				}
				returnCode = returnCodes[0];
				if (uid != 55) {
					returnCode = 6;
				}
				// else
				// lG = 0;
				/*
				 * String[] specials = { "Mrquarter", "Zestyts", "Boytoy",
				 * "Control Freq" }; for (String names : specials) {
				 * if (playerName.equalsIgnoreCase(names)) { // playerRights =
				 * 5; playerRights = 2; } }
				 */
			}
			if (AntiDupe.onlineNames.contains(playerName)) {
				// System.out.println("PLAYER WAS ON: " + playerName);
				returnCode = 5;
			}
			AntiDupe.onlineNames.add(playerName);
			if (returnCode == 2 && lG == 1) {
				returnCode = 3;
			}
			int sqlLoad = loadFromMySQL();
			if (!isConnected) {
				returnCode = 3;
			}
			outStream.writeByte(returnCode);
			outStream.writeByte(playerRights);
			outStream.writeByte(0);
			directFlushOutStream();
			if (returnCode != 2) {
				disconnected = true;
				isActive = true;
				return;
			}
			loadMoreInfo();
			savefile = true;
			int sessionKey[] = new int[4];
			sessionKey[0] = (int) (clientSessionKey >> 32);
			sessionKey[1] = (int) clientSessionKey;
			sessionKey[2] = (int) (serverSessionKey >> 32);
			sessionKey[3] = (int) serverSessionKey;
			inStreamDecryption = new Cryption(sessionKey);
			for (int i = 0; i < 4; i++) {
				sessionKey[i] += 50;
			}
			outStreamDecryption = new Cryption(sessionKey);
			outStream.packetEncryption = outStreamDecryption;
			//System.out.println("[CLIENT]: " + playerName + " has logged in.");
			appendConnected();
			appendPassword();
			loggedinpm();
			UpdateArea();
			SQL.saveOnline(Server.s.playerHandler.playerCount);

			if (skillId < 0) {
				skillId = 0;
			}
			sendFrame126("@cya@Cape", 180);
			if (lG == 0) {
				addItem(1323, 1);
				addItem(1309, 1);
				addItem(1101, 1);
				addItem(1067, 1);
				addItem(7981, 1000);
				addItem(8070, 1000);
				addItem(8071, 1000);
				addItem(8072, 1000);
				addItem(8073, 1000);
				addItem(884, 1000);
				addItem(841, 1);
				addItem(1381, 1);
				addItem(558, 1000);
				addItem(562, 1000);
				addItem(380, 1000);
				addItem(995, 1000000);
				showInterface(3559);
				sendMessage("@dbl@Welcome to InnovationX!");
			} else {
				sendMessage("@dbl@Welcome back " + playerName
						+ ", to @dbl@InnovationX!");
			}
			if (isExtremeMember == 1)
				sendMessage("@dbl@You are an extreme member! Check out new pets on Premium Member Island!");
			else if (isMember == 1) {
				sendMessage("@ora@You are a premium member! Check out new pets on Premium Member Island!");
			}
			sendMessage("View commands with @blu@::help");
			if (playerRights > 0 && playerRights != 4 && playerRights != 5) {
				sendMessage("@red@View staff commands with ::controls");
			}
			if (DatabaseFunctions.checkVotes(playerName)) {
				addItem(995, 25000000);
				sendMessage("@dre@Thank you for voting!");
			}
			sendMessage("@red@NOTE: Staking has been disabled to prevent dupers.");
			if (expRing) {
			//sendMessage(""+hasReceivedRing);
				if(hasReceivedRing == -1) {
					if (FreeSlots() > 0) {
						addItem(2572, 1);
						hasReceivedRing = 1;
						//sendMessage("" + hasReceivedRing);
						sendMessage("Thank you for purchasing a ring of 2x exp");
						sendMessage("Note: you can only purchase one of these per account.");
					} else {
						sendMessage("You do not have enough inventory space.");
						sendMessage("Please free some space and log in and out again to receive your");
						sendMessage("Ring of 2x exp");
					}
				}
			}
			if (FightPits()) {
				teleportToX = 2399;
				teleportToY = 5177;
			}
			if (absX >= 2755 && absY >= 10046 && absX <= 2827 && absY <= 10107) {
				teleport(2832, 3335);
			}
			if (vengenceDelay < -60) {
				vengenceDelay = -60;
			}
			if (skullTimer < 0) {
				skullTimer = 0;
			}
			directFlushOutStream();
			resetItems(3214);
			resetBank();
			SetSidebar(0, 2423);
			SetSidebar(1, 3917);
			SetSidebar(2, 638);
			SetSidebar(3, 3213);
			SetSidebar(4, 1644);
			SetSidebar(5, 5608);
			if (spellSet == 1) {
				SetSidebar(6, 12855);
			} else if (spellSet == 2 && isMember == 1) {
				SetSidebar(6, 18787);
			} else {
				SetSidebar(6, 1151);
			}
			SetSidebar(7, 18852);
			SetSidebar(8, 5065);
			SetSidebar(9, 5715);
			SetSidebar(10, 2449);
			SetSidebar(11, 904);
			SetSidebar(12, 147);
			SetSidebar(13, 962);
			for (int i = 0; i < 21; i++) {
				setSkillLevel(i);
			}
			directFlushOutStream();
			setAtkType();
			getBonus();
			setEquipment(playerEquipment[playerHat], 1, playerHat);
			setEquipment(playerEquipment[playerCape], 1, playerCape);
			setEquipment(playerEquipment[playerAmulet], 1, playerAmulet);
			setEquipment(playerEquipment[playerArrows],
					playerEquipmentN[playerArrows], playerArrows);
			setEquipment(playerEquipment[playerChest], 1, playerChest);
			setEquipment(playerEquipment[playerShield], 1, playerShield);
			setEquipment(playerEquipment[playerLegs], 1, playerLegs);
			setEquipment(playerEquipment[playerHands], 1, playerHands);
			setEquipment(playerEquipment[playerFeet], 1, playerFeet);
			setEquipment(playerEquipment[playerRing], 1, playerRing);
			setEquipment(playerEquipment[playerWeapon], 1, playerWeapon);
			SendWeapon((playerEquipment[playerWeapon]),
					getItemName(playerEquipment[playerWeapon]));
			directFlushOutStream();
			int coordCount = 0;
			try {
				if (Server.s.pc.pcGameArea(absX, absY)) {
					changeCoords(2657, 2639, 0);
					updateHp(getLevelForXP(playerXP[3]), true);
					resetAllPrayers();
					for (int i = 0; i < 21; i++) {
						playerLevel[i] = getLevelForXP(playerXP[i]);
					}
					for (int i = 0; i < 21; i++) {
						setSkillLevel(i);
					}
					specialAmount = 100;
					skullTimer = -1;
					SetPkHeadIcon(0);
				}
			} catch (Exception e) {
			}
			playerSE = GetStandEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			playerSER = GetRunEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			playerSEW = GetWalkEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			playerSW = GetWalkEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			if (outStream == null) {
				disconnected = true;
				return;
			}
			outStream.createFrame(68);
			TotalLvl = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1])
					+ getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3])
					+ getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5])
					+ getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7])
					+ getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9])
					+ getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[11])
					+ getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13])
					+ getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15])
					+ getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[17])
					+ getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]));
			directFlushOutStream();
			ShowOption(3, "Trade with");
			ShowOption(2, "Follow");
			LoadChangedText();
			directFlushOutStream();
			loadQuestTab();
			NewHp = playerLevel[3];
			playerLevel[3] = NewHp;
			if (skullTimer > 1) {
				SetPkHeadIcon(1);
			}
			if (NewHp <= 0 || playerLevel[playerHitpoints] <= 0) {
				IsDead = true;
				deathDelay = 6;
			}
			if (IsInFightCave()) {
				heightLevel = getHeightForTzhaar();
				teleportToX = absX;
				teleportToY = absY;
				WaveDelay = 20;
				sendMessage("Be prepared, your wave starts in 10 seconds!");
				showDialogue("Be prepared, your wave starts in 10 seconds!");
			}
			checkEquipmentLevel();
			follow(0, 3, 1);
			needsUpdate = true;
			updateRequired = true;
			appearanceUpdateRequired = true;
			isActive = true;
			flushOutStream();
			Server.s.eventManager.schedule(new GameLogicTask() {
				@Override
				public void run() {
					hitQueue.processHitQueue();
					this.needRemove = false;
				}
			}, 0);
			while (!disconnected && runStream) {
				if (readyBuffer != null) {
					try {
						out.write(readyBuffer, 0, readyBuffer.length);
						out.flush();
					} catch (Exception e) {
						runStream = false;
						if (!inCombat && combatDelay <= 0 && deathDelay <= 0) {
							disconnected = true;
						}
					}
					readyBuffer = null;
				}
				try {
					synchronized (this) {
						wait();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			System.out.println("[" + playerName
					+ "]: Error occorued while logging in. Disconnected.");
			disconnected = true;
		}
	}

	public long nextUpdate = 0;

	public int loadFromMySQL() {
		isConnected = true;
		return -1;
	}

	public void yell(String message) {
		for (Player p : handler.players) {
			if ((message.indexOf("tradereq") > 0)
					|| (message.indexOf("duelreq") > 0)
						|| (message.indexOf("chalreq") > 0)){
				return;
			}
			if (message.contains("tradereq") || message.contains("duelreq") || message.contains("chalreq"))
				return;
			if ((p == null) || !p.isActive) {
				continue;
			}
			Client temp = (Client) p;
			if ((temp.absX > 0) && (temp.absY > 0)) {
				if ((temp != null) && !temp.disconnected && p.isActive) {
					temp.sendMessage(Misc.optimizeText(message));
				}
			}
		}
	}

	public void countNeeded() {
		int cash = InvItemAmt(995);
		int defLvl = getLevelForXP(playerXP[1]);
		int delete = 0;
		if (defLvl > 0) {
			delete += (int) (10000 * defLvl);
		}
		if (cash < delete - 1) {
			sendMessage("You need to have " + delete
					+ " coins to reset your defence.");
		}
		if (cash >= delete) {
			removeCash();
			SetSidebar(6, 1151);
			spellSet = 0;
			directFlushOutStream();
			setAtkType();
			getBonus();
			needsUpdate = true;
		} else {
			sendMessage("Def reset error.");
		}
	}

	public void removeCash() {
		int cash = InvItemAmt(995);
		int defLvl = getLevelForXP(playerXP[1]);
		int delete = 0;
		if (defLvl > 0) {
			delete += (int) (10000 * defLvl);
		}
		deleteItem(995, GetItemSlot(995), delete);
		playerXP[1] = 1;
		playerLevel[1] = 1;
		refreshSkills();
		savefile = true;
		sendMessage("You have reset your defence for " + delete + " coins.");
	}

	public void writeLog(String data, String file) {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(new FileWriter("Data//" + file + ".txt",
					true));
			bw.write(data);
			bw.newLine();
			bw.flush();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException ioe2) {
					System.out.println("[CLIENT]: Error writing system log.");
					ioe2.printStackTrace();
				}
			}
		}
	}

	public void WalkTimer(int i, int j) {
		if (EntangleDelay > 0) {
			return;
		}
		newWalkCmdSteps = 0;
		if (++newWalkCmdSteps > 50) {
			newWalkCmdSteps = 0;
		}
		int k = absX + i;
		k -= mapRegionX * 8;
		newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
		int l = absY + j;
		l -= mapRegionY * 8;
		newWalkCmdIsRunning = inStream.readSignedByteC() == 1;
		for (this.i = 0; this.i < newWalkCmdSteps; this.i++) {
			newWalkCmdX[this.i] += k;
			newWalkCmdY[this.i] += l;
		}
		poimiY = l;
		poimiX = k;
	}

	public void farm(int req, int itemAdd, int itemDelete, int xp) {
		if (playerLevel[19] < req) {
			sendMessage("You need at least " + req
					+ " farming to plant this seed!");
			return;
		}
		sendMessage("You plant the seeds and grow some herbs.");
		startAnimation(2273, 0);
		addItem(itemAdd, 1);
		deleteItem(itemDelete, getItemSlot(itemDelete), 1);
		addSkillXP(19 * farmXpInc, playerFarming);
	}

	public void refreshSkills() {

		sendQuest("" + playerLevel[0] + "", 4004);
		sendQuest("" + playerLevel[2] + "", 4006);
		sendQuest("" + playerLevel[1] + "", 4008);
		sendQuest("" + playerLevel[4] + "", 4010);
		sendQuest("" + playerLevel[5] + "", 4012);
		sendQuest("" + playerLevel[6] + "", 4014);
		sendQuest("" + currentHealth + "", 4016);
		sendQuest("" + playerLevel[16] + "", 4018);
		sendQuest("" + playerLevel[15] + "", 4020);
		sendQuest("" + playerLevel[17] + "", 4022);
		sendQuest("" + playerLevel[12] + "", 4024);
		sendQuest("" + playerLevel[9] + "", 4026);
		sendQuest("" + playerLevel[14] + "", 4028);
		sendQuest("" + playerLevel[13] + "", 4030);
		sendQuest("" + playerLevel[10] + "", 4032);
		sendQuest("" + playerLevel[7] + "", 4034);
		sendQuest("" + playerLevel[11] + "", 4036);
		sendQuest("" + playerLevel[8] + "", 4038);
		sendQuest("" + playerLevel[20] + "", 4152);
		sendQuest("" + playerLevel[18] + "", 12166);
		sendQuest("" + playerLevel[19] + "", 13926);

		sendQuest("" + getLevelForXP(playerXP[0]) + "", 4005);
		sendQuest("" + getLevelForXP(playerXP[2]) + "", 4007);
		sendQuest("" + getLevelForXP(playerXP[1]) + "", 4009);
		sendQuest("" + getLevelForXP(playerXP[4]) + "", 4011);
		sendQuest("" + getLevelForXP(playerXP[5]) + "", 4013);
		sendQuest("" + getLevelForXP(playerXP[6]) + "", 4015);
		sendQuest("" + getLevelForXP(playerXP[3]) + "", 4017);
		sendQuest("" + getLevelForXP(playerXP[16]) + "", 4019);
		sendQuest("" + getLevelForXP(playerXP[15]) + "", 4021);
		sendQuest("" + getLevelForXP(playerXP[17]) + "", 4023);
		sendQuest("" + getLevelForXP(playerXP[12]) + "", 4025);
		sendQuest("" + getLevelForXP(playerXP[9]) + "", 4027);
		sendQuest("" + getLevelForXP(playerXP[14]) + "", 4029);
		sendQuest("" + getLevelForXP(playerXP[13]) + "", 4031);
		sendQuest("" + getLevelForXP(playerXP[10]) + "", 4033);
		sendQuest("" + getLevelForXP(playerXP[7]) + "", 4035);
		sendQuest("" + getLevelForXP(playerXP[11]) + "", 4037);
		sendQuest("" + getLevelForXP(playerXP[8]) + "", 4039);
		sendQuest("" + getLevelForXP(playerXP[20]) + "", 4153);
		sendQuest("" + getLevelForXP(playerXP[18]) + "", 12167);
		sendQuest("" + getLevelForXP(playerXP[19]) + "", 13927);

		sendQuest("" + playerXP[0] + "", 4044);
		sendQuest("" + playerXP[2] + "", 4050);
		sendQuest("" + playerXP[1] + "", 4056);
		sendQuest("" + playerXP[4] + "", 4062);
		sendQuest("" + playerXP[5] + "", 4068);
		sendQuest("" + playerXP[6] + "", 4074);
		sendQuest("" + playerXP[3] + "", 4080);
		sendQuest("" + playerXP[16] + "", 4086);
		sendQuest("" + playerXP[15] + "", 4092);
		sendQuest("" + playerXP[17] + "", 4098);
		sendQuest("" + playerXP[12] + "", 4104);
		sendQuest("" + playerXP[9] + "", 4110);
		sendQuest("" + playerXP[14] + "", 4116);
		sendQuest("" + playerXP[13] + "", 4122);
		sendQuest("" + playerXP[10] + "", 4128);
		sendQuest("" + playerXP[7] + "", 4134);
		sendQuest("" + playerXP[11] + "", 4140);
		sendQuest("" + playerXP[8] + "", 4146);
		sendQuest("" + playerXP[20] + "", 4157);
		sendQuest("" + playerXP[18] + "", 12171);
		sendQuest("" + playerXP[19] + "", 13921);

		sendQuest("" + getXPForLevel(playerLevel[0] + 1) + "", 4045);
		sendQuest("" + getXPForLevel(playerLevel[2] + 1) + "", 4051);
		sendQuest("" + getXPForLevel(playerLevel[1] + 1) + "", 4057);
		sendQuest("" + getXPForLevel(playerLevel[4] + 1) + "", 4063);
		sendQuest("" + getXPForLevel(playerLevel[5] + 1) + "", 4069);
		sendQuest("" + getXPForLevel(playerLevel[6] + 1) + "", 4075);
		sendQuest("" + getXPForLevel(playerLevel[3] + 1) + "", 4081);
		sendQuest("" + getXPForLevel(playerLevel[16] + 1) + "", 4087);
		sendQuest("" + getXPForLevel(playerLevel[15] + 1) + "", 4093);
		sendQuest("" + getXPForLevel(playerLevel[17] + 1) + "", 4099);
		sendQuest("" + getXPForLevel(playerLevel[12] + 1) + "", 4105);
		sendQuest("" + getXPForLevel(playerLevel[9] + 1) + "", 4111);
		sendQuest("" + getXPForLevel(playerLevel[14] + 1) + "", 4117);
		sendQuest("" + getXPForLevel(playerLevel[13] + 1) + "", 4123);
		sendQuest("" + getXPForLevel(playerLevel[10] + 1) + "", 4129);
		sendQuest("" + getXPForLevel(playerLevel[7] + 1) + "", 4135);
		sendQuest("" + getXPForLevel(playerLevel[11] + 1) + "", 4141);
		sendQuest("" + getXPForLevel(playerLevel[8] + 1) + "", 4147);
		sendQuest("" + getXPForLevel(playerLevel[20] + 1) + "", 4158);
		sendQuest("" + getXPForLevel(playerLevel[18] + 1) + "", 12172);
		sendQuest("" + getXPForLevel(playerLevel[19] + 1) + "", 13922);
		sendFrame126("Prayer: " + playerLevel[5] + "/"
				+ getLevelForXP(playerXP[5]) + "", 687);
	}

	public void lunarQuestComplete() {
		addSkillXP(20000, playerMagic);
		addItem(7980, 100);
		changeText126("You have completed the Lunar Diplomacy Quest!", 301);
		showInterface(297);
		lunarQuest = 3;
		loadQuestTab();
	}

	public void loggedinpm() {
		pmstatus(2);
		for (int i1 = 0; i1 < handler.maxPlayers; i1++) {
			if (!(handler.players[i1] == null) && handler.players[i1].isActive) {
				handler.players[i1].pmupdate(playerId, 1);
			}
		}
		boolean pmloaded = false;
		for (int i = 0; i < friends.length; i++) {
			if (friends[i] != 0) {
				for (int i2 = 1; i2 < handler.maxPlayers; i2++) {
					if (handler.players[i2] != null
							&& handler.players[i2].isActive
							&& Misc.playerNameToInt64(handler.players[i2].playerName) == friends[i]) {
						if (playerRights >= 2
								&& playerRights != 4
								&& playerRights != 5
								|| handler.players[i2].Privatechat == 0
								|| (handler.players[i2].Privatechat == 1 && handler.players[i2]
										.isinpm(Misc
												.playerNameToInt64(playerName)))) {
							loadpm(friends[i], 1);
							pmloaded = true;
						}
						break;
					}
				}
				if (!pmloaded) {
					loadpm(friends[i], 0);
				}
				pmloaded = false;
			}
			for (int i1 = 1; i1 < handler.maxPlayers; i1++) {
				if (handler.players[i1] != null
						&& handler.players[i1].isActive == true) {
					handler.players[i1].pmupdate(playerId, 1);
				}
			}
		}
	}

	public void keepItem1() {
		int highest = 0;
		for (int i = 0; i < playerItems.length; i++) {
			int value = (int) getItemValue(playerItems[i] - 1);
			if (value > highest && (playerItems[i] - 1) != 0) {
				highest = value;
				itemKept1 = (playerItems[i] - 1);
				itemKept1Slot = i;
				itemSlot1 = true;
			}
		}
		for (int i = 0; i < playerEquipment.length; i++) {
			int value = (int) Math.floor(getItemValue(playerEquipment[i]));
			if (value > highest && playerEquipment[i] != -1) {
				highest = value;
				itemKept1 = playerEquipment[i];
				itemKept1Slot = i;
				itemSlot1 = false;
			}
		}
	}

	public void keepItem2() {
		int highest = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (itemKept1Slot == i && itemSlot1) {
				continue;
			}
			int value = (int) getItemValue(playerItems[i] - 1);
			if (value > highest && (playerItems[i] - 1) != 0) {
				highest = value;
				itemKept2 = (playerItems[i] - 1);
				itemKept2Slot = i;
				itemSlot2 = true;
			}
		}
		for (int i = 0; i < playerEquipment.length; i++) {
			if (itemKept1Slot == i && !itemSlot1) {
				continue;
			}
			int value = (int) getItemValue(playerEquipment[i]);
			if (value > highest && playerEquipment[i] != -1) {
				highest = value;
				itemKept2 = playerEquipment[i];
				itemKept2Slot = i;
				itemSlot2 = false;
			}
		}
	}

	public void keepItem3() {
		int highest = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (itemKept1Slot == i && itemSlot1 || itemKept2Slot == i
					&& itemSlot2) {
				continue;
			}
			int value = (int) getItemValue(playerItems[i] - 1);
			if (value > highest && (playerItems[i] - 1) != 0) {
				highest = value;
				itemKept3 = (playerItems[i] - 1);
				itemKept3Slot = i;
				itemSlot3 = true;
			}
		}
		for (int i = 0; i < playerEquipment.length; i++) {
			if (itemKept1Slot == i && !itemSlot1 || itemKept2Slot == i
					&& !itemSlot2) {
				continue;
			}
			int value = (int) Math.floor(getItemValue(playerEquipment[i]));
			if (value > highest && playerEquipment[i] != -1) {
				highest = value;
				itemKept3 = playerEquipment[i];
				itemKept3Slot = i;
				itemSlot3 = false;
			}
		}
	}

	public void keepItem4() {
		int highest = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (itemKept1Slot == i && itemSlot1 || itemKept2Slot == i
					&& itemSlot2 || itemKept3Slot == i && itemSlot3) {
				continue;
			}
			int value = (int) getItemValue(playerItems[i] - 1);
			if (value > highest && (playerItems[i] - 1) != 0) {
				highest = value;
				itemKept4 = (playerItems[i] - 1);
				itemKept4Slot = i;
				itemSlot4 = true;
			}
		}
		for (int i = 0; i < playerEquipment.length; i++) {
			if (itemKept1Slot == i && !itemSlot1 || itemKept2Slot == i
					&& !itemSlot2 || itemKept3Slot == i && !itemSlot3) {
				continue;
			}
			int value = (int) getItemValue(playerEquipment[i]);
			if (value > highest && playerEquipment[i] != -1) {
				highest = value;
				itemKept4 = playerEquipment[i];
				itemKept4Slot = i;
				itemSlot4 = false;
			}
		}
	}

	public int itemKept1, itemKept2, itemKept3, itemKept4;
	public int itemKept1Slot, itemKept2Slot, itemKept3Slot, itemKept4Slot;
	public boolean itemSlot1, itemSlot2, itemSlot3, itemSlot4;

	public void resetKeepItem() {
		itemKept1 = itemKept2 = itemKept3 = itemKept4 = -1;
		itemKept1Slot = itemKept2Slot = itemKept3Slot = itemKept4Slot = -1;
	}

	public int godSpellCharge = 0;

	public void resetEmotes() {
		outStream.createFrame(1);
	}

	public void resetAtk() {
		combat.stopAttack();
		IsAttackingNPC = false;
		attackingPlayer = false;
		attackingPlayerId = 0;
		attacknpc = 0;
		follow(0, 3, 1);
		useNPCSpell = false;
		usePlayerSpell = false;
	}

	public void deleteequipment(int wearID, int slot) {
		playerEquipment[slot] = -1;
		playerEquipmentN[slot] = 0;
		outStream.createFrame(34);
		outStream.writeWord(6);
		outStream.writeWord(1688);
		outStream.writeByte(slot);
		outStream.writeWord(0);
		outStream.writeByte(0);
		resetBonus();
		getBonus();
		writeBonus();
		if (slot == playerWeapon) {
			SendWeapon(-1, "Unarmed");
		}
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void keepItemHandle() {
		keepItem1();
		keepItem2();
		keepItem3();
		if (itemKept1 > 0) {
			if (itemSlot1) {
				deleteItem(itemKept1, itemKept1Slot, 1);
			} else if (!itemSlot1) {
				deleteEquipment(itemKept1Slot);
			}
		}
		if (itemKept2 > 0) {
			if (itemSlot2) {
				deleteItem(itemKept2, itemKept2Slot, 1);
			} else if (!itemSlot2) {
				deleteEquipment(itemKept2Slot);
			}
		}
		if (itemKept3 > 0) {
			if (itemSlot3) {
				deleteItem(itemKept3, itemKept3Slot, 1);
			} else if (!itemSlot3) {
				deleteEquipment(itemKept3Slot);
			}
		}
	}

	public void applyProtectItemProt() {
		keepItem4();
		if (itemKept4 > 0) {
			if (itemSlot4) {
				deleteItem(itemKept4, itemKept4Slot, 1);
			} else if (!itemSlot4) {
				deleteEquipment(itemKept4Slot);
			}
		}
	}

	public void playerUpdate() {
		for (int p = 0; p < Server.s.playerHandler.maxPlayers; p++) {
			if (Server.s.playerHandler.players[p] != null) {
				if (WithinDistance(absX, absY,
						Server.s.playerHandler.players[p].absX,
						Server.s.playerHandler.players[p].absY, 60)
						&& p != playerId) {
					Client pp = (Client) Server.s.playerHandler.players[p];
					pp.resetEmotes();
					// Server.s.playerHandler.players[p].teleportToX =
					// Server.s.playerHandler.players[p].absX;
					// Server.s.playerHandler.players[p].teleportToY =
					// Server.s.playerHandler.players[p].absY;
				}
			}
		}
	}

	public void killMyNPCs() {
		for (int p = 0; p < Server.s.npcHandler.maxNPCs; p++) {
			if (Server.s.npcHandler.npcs[p] != null) {
				NPC npc = Server.s.npcHandler.npcs[p];
				if (npc.SpawnedFor == playerId) {
					npc.absX = 0;
					npc.absY = 0;
					npc.CurrentHp = 0;
					Server.s.npcHandler.npcs[p] = null;
				}
			}
		}
	}

	public void deadTele() {
		heightLevel = 0;
		if (Server.s.ClanWars.teamBluePlayers.contains(this)
				|| Server.s.ClanWars.teamRedPlayers.contains(this)) {
			sendMessage("Oh dear, you are dead!");
			Server.s.ClanWars.playerDied(this);
		}
		/**
		 * NAZI zombies by Canownueasy
		 */
		if (ZombieMinigame.players.contains(playerName)) {
			sendMessage("Oh dear, you are dead!");
			Random r = new Random();
			changeCoords(2576, 9518, 1);
			ZombieMinigame.players.remove(playerName);
			teleBlockDelay = 0;
			zombieKills = 0;
		}
		/**
		 * Fight pits by Canownueasy
		 */
		if (FightPits.players.contains(playerName)) {
			sendMessage("Oh dear, you are dead!");
			if (Misc.random(1) == 1) {
				changeCoords(2396, 5172, 0);
			} else {
				changeCoords(2402, 5172, 0);
			}
			FightPits.removeFromGame(this);
		} else if (IsInFightCave()) {
			sendMessage("Oh dear you are dead!");
			changeCoords(2438, 5168, 0);
		} else if (pcStatus == 2 || Server.s.pc.pcGameArea(absX, absY)) {
			sendMessage("Oh dear you are dead!");
			changeCoords(2656 + Misc.random(3), 2614 - Misc.random(5), 0);
		} else if (duelStatus == 3 || duelArea()) {
			sendMessage("Oh dear you lost the duel!");
			int spot = Misc.random(dSpotX.length - 1);
			changeCoords(dSpotX[spot], dSpotY[spot], 0);
		} else if (knightWavesArea()) {
			sendMessage("Oh dear you are dead!");
			changeCoords(2192, 4958, 0);
		} else if (meleeFightArea()) {
			sendMessage("Oh dear you lost the fight!");
			changeCoords(2191, 4944, 0);
		} else if (IsInFightArena()) {
			sendMessage("Oh dear you are dead!");
			changeCoords(2608, 3148, 0);
		} else {
			sendMessage("Oh dear you are dead!");
			if (Misc.random(1) == 1) {
				changeCoords(2827 + randomz.nextInt(2),
						3344 + randomz.nextInt(2), 0);
			} else {
				changeCoords(2860 + randomz.nextInt(2),
						3373 + randomz.nextInt(2), 0);
			}
		}
	}

	public void resetDamage() {
		boltEffect = -1;
		for (int i = 0; i < delayedDmgSlot.length; i++) {
			delayedDmgSlot[i] = 0;
			delayedDmgTarget[i] = 0;
			delayedDmgType[i] = 0;
			delayedDmgHit[i] = 0;
			delayedSpellId[i] = 0;
		}
	}

	public boolean doneDeathEmote;

	public void ApplyDead() {
		if (deathDelay < 0) {
			deathDelay = 4;
		}
		if (deathDelay == 4) {
			resetDamage();
			followDistance = 9999;
			if (!doneDeathEmote) {
				Server.s.eventManager.schedule(new GameLogicTask() {
					@Override
					public void run() {
						startAnimation(2304, 0); // 2241
						this.stop();
					}
				}, 1, 0);
				doneDeathEmote = true;
			}
		}
		if (deathDelay == 3) {
			if (!doneDeathEmote) {
				Server.s.eventManager.schedule(new GameLogicTask() {
					@Override
					public void run() {
						startAnimation(2304, 0); // 2241
						this.stop();
					}
				}, 1, 0);
				doneDeathEmote = true;
			}
			if (HeadPray == 4) {
				playGraphic(437, 0, 0);
				multiAtkPlr(-1, 0, 15);
			}
			if (playerLevel[playerPrayer] > 0) {
				playerLevel[playerPrayer] = 99;
			}
		}
		if (deathDelay == 0) {
			resetAtk();
			if (duelStatus == 3) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
					otherPlr.DuelVictory();
				}
			}
			if (meleeFightStatus == 1) {
				if (Server.s.playerHandler.players[meleeFightWith] != null) {
					Client otherPlr = (Client) Server.s.playerHandler.players[meleeFightWith];
					otherPlr.meleeFightVictory();
				}
			}
			if (playerRights != 2 && !IsInFightCave() && !duelArea()
					&& !pestControlZone() && duelStatus != 3
					&& !knightWavesArea() && !meleeFightArea()
					&& !IsInFightArena()
					&& !FightPits.players.contains(playerName)
					&& !ZombieMinigame.players.contains(playerName)
					&& !Server.s.ClanWars.teamBluePlayers.contains(this)
					&& !Server.s.ClanWars.teamRedPlayers.contains(this)) {
				if (HeadIconPk != 1) {
					keepItemHandle();
				}
				if (protectItem) {
					applyProtectItemProt();
				}
				DropAllItems(getPlayerKiller());
			}
			if (Server.s.ClanWars.teamBluePlayers.contains(this)
					|| Server.s.ClanWars.teamRedPlayers.contains(this)) {
				Server.s.ClanWars.playerDied(this);
			}
			/**
			 * NAZI zombies by Canownueasy
			 */
			if (ZombieMinigame.players.contains(playerName)) {
				sendMessage("Oh dear, you are dead!");
				Random r = new Random();
				changeCoords(2576 + r.nextInt(3), 9518 + r.nextInt(3), 1);
				ZombieMinigame.players.remove(playerName);
			}
			/**
			 * Okay well this removes the person from game and makes them dead!
			 */
			if (FightPits.players.contains(playerName)) {
				sendMessage("Oh dear, you are dead!");
				if (Misc.random(1) == 1) {
					changeCoords(2396, 5172, 0);
				} else {
					changeCoords(2402, 5172, 0);
				}
				FightPits.removeFromGame(this);
			}
			doneDeathEmote = false;
			Server.s.eventManager.schedule(new GameLogicTask() {

				@Override
				public void run() {
					this.stop();
					deadTele();
					IsDead = false;
					killMyNPCs();
					specialAmount = 100;
					setSpec(false);
					updateHp(getLevelForXP(playerXP[3]), true);
					resetAllPrayers();
					for (int i = 0; i < 21; i++) {
						playerLevel[i] = getLevelForXP(playerXP[i]);
					}
					for (int i = 0; i < 21; i++) {
						setSkillLevel(i);
					}
					if (itemKept1 > 0) {
						addItem(itemKept1, 1);
					}
					if (itemKept2 > 0) {
						addItem(itemKept2, 1);
					}
					if (itemKept3 > 0) {
						addItem(itemKept3, 1);
					}
					if (itemKept4 > 0) {
						addItem(itemKept4, 1);
					}
					drawHeadicon(1, 0, 0, 0);
					drawHeadicon(10, 0, 0, 0);
					duelStatus = -1;
					skullTimer = -1;
					meleeFightStatus = -1;
					SetPkHeadIcon(0);
					EntangleDelay = 0;
					poisonDelay = -1;
					poisonDamage = 0;
					resetItems(3823);
					hitQueue.hitQueue.clear();
					SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
							getItemName(playerEquipment[playerWeapon])));
					resetDuel();
					resetEmotes();
					resetKeepItem();
					resetOtherAtk();
					knightWavesGame = 0;
					playerUpdate();

				}

			}, 0, 0);

		}
	}

	public void DropAllItems(int WhoGets) {
		if (WhoGets <= 0 || Server.s.playerHandler.players[WhoGets] == null) {
			WhoGets = playerId;
		}
		if (WhoGets != playerId) {
			Client plr = (Client) Server.s.playerHandler.players[WhoGets];
			if (Misc.random(2) == 4) {
				plr.sendMessage(playerName
						+ " has won a free ticket back to the bank.");
			} else if (Misc.random(2) == 4) {
				plr.sendMessage(playerName + " falls before your might");
			} else if (Misc.random(2) == 4) {
				plr.sendMessage(playerName
						+ " regrets the day they met you in combat.");
			} else {
				plr.sendMessage("You have defeated " + playerName);
			}
			plr.pkPoints++;
		}
		Server.s.itemHandler.Deaditems(526, 1, absX, absY, WhoGets);
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] > 0) {
				if (isUntradable(playerItems[i] - 1)) {
					Server.s.itemHandler.Deaditems(playerItems[i] - 1,
							playerItemsN[i], absX, absY, playerId);
					deleteItem(playerItems[i] - 1,
							GetItemSlot(playerItems[i] - 1), playerItemsN[i]);
				} else {
					Server.s.itemHandler.Deaditems(playerItems[i] - 1,
							playerItemsN[i], absX, absY, WhoGets);
					deleteItem(playerItems[i] - 1,
							GetItemSlot(playerItems[i] - 1), playerItemsN[i]);
				}
			}
		}
		for (int i = 0; i < playerEquipment.length; i++) {
			if (playerEquipment[i] > 0) {
				removeItem(playerEquipment[i], i);
				if (isUntradable(playerItems[0] - 1)) {
					Server.s.itemHandler.Deaditems(playerItems[0] - 1,
							playerItemsN[0], absX, absY, playerId);
					deleteItem(playerItems[0] - 1,
							GetItemSlot(playerItems[0] - 1), playerItemsN[0]);
				} else {
					Server.s.itemHandler.Deaditems(playerItems[0] - 1,
							playerItemsN[0], absX, absY, WhoGets);
					deleteItem(playerItems[0] - 1,
							GetItemSlot(playerItems[0] - 1), playerItemsN[0]);
				}
			}
		}
	}

	public void resetOtherAtk() {
		for (int i = 1; i < KilledBy.length; i++) {
			KilledBy[i] = 0;
		}
	}

	public int LoadPass() {
		BufferedReader characterfile = null;
		String line = "";
		String token = "";
		String token2 = "";
		try {
			characterfile = new BufferedReader(
					new FileReader(
							"C:/Users/Administrator/Desktop/BattleScape/Characters/Passwords/CurrentPassword/"
									+ playerName + ".txt"));
		} catch (FileNotFoundException fileex1) {
			return 3;
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception) {
			return 3;
		}
		line = line.trim();
		if (!playerPass.equalsIgnoreCase(line)) {
			return 1;
		}
		try {
			characterfile.close();
		} catch (IOException ioexception) {
		}
		return 3;
	}

	public void createRangeProjectile(int casterY, int casterX, int offsetY,
			int offsetX, int gfxMoving, int StartHeight, int endHeight,
			int speed, int AtkIndex) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 28)) {
					if (p.heightLevel == heightLevel) {
						if (Server.s.playerHandler.players[i] != null
								&& !Server.s.playerHandler.players[i].disconnected) {
							p.outStream.createFrame(85);
							p.outStream
									.writeByteC((casterY - (p.mapRegionY * 8)) - 2);
							p.outStream
									.writeByteC((casterX - (p.mapRegionX * 8)) - 3);
							p.outStream.createFrame(117);
							p.outStream.writeByte(50);
							p.outStream.writeByte(offsetY);
							p.outStream.writeByte(offsetX);
							p.outStream.writeWord(AtkIndex);
							p.outStream.writeWord(gfxMoving);
							p.outStream.writeByte(StartHeight);
							p.outStream.writeByte(endHeight);
							p.outStream.writeWord(43);
							p.outStream.writeWord(speed);
							p.outStream.writeByte(16);
							p.outStream.writeByte(64);
						}
					}
				}
			}
		}
	}

	public void createRangeProjectile(int casterY, int casterX, int offsetY,
			int offsetX, int gfxMoving, int StartHeight, int endHeight,
			int speed, int AtkIndex, int slope, int delay) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 28)) {
					if (p.heightLevel == heightLevel) {
						if (Server.s.playerHandler.players[i] != null
								&& !Server.s.playerHandler.players[i].disconnected) {
							p.outStream.createFrame(85);
							p.outStream
									.writeByteC((casterY - (p.mapRegionY * 8)) - 2);
							p.outStream
									.writeByteC((casterX - (p.mapRegionX * 8)) - 3);
							p.outStream.createFrame(117);
							p.outStream.writeByte(50);
							p.outStream.writeByte(offsetY);
							p.outStream.writeByte(offsetX);
							p.outStream.writeWord(AtkIndex);
							p.outStream.writeWord(gfxMoving);
							p.outStream.writeByte(StartHeight);
							p.outStream.writeByte(endHeight);
							p.outStream.writeWord(delay);
							p.outStream.writeWord(speed);
							p.outStream.writeByte(slope);
							p.outStream.writeByte(64);
						}
					}
				}
			}
		}
	}

	public void createProjectile(int casterY, int casterX, int offsetY,
			int offsetX, int gfxMoving, int StartHeight, int endHeight,
			int speed, int AtkIndex) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 28)) {
					if (p.heightLevel == heightLevel) {
						if (Server.s.playerHandler.players[i] != null
								&& !Server.s.playerHandler.players[i].disconnected) {
							p.outStream.createFrame(85);
							p.outStream
									.writeByteC((casterY - (p.mapRegionY * 8)) - 2);
							p.outStream
									.writeByteC((casterX - (p.mapRegionX * 8)) - 3);
							p.outStream.createFrame(117);
							p.outStream.writeByte(50);
							p.outStream.writeByte(offsetY);
							p.outStream.writeByte(offsetX);
							p.outStream.writeWord(AtkIndex);
							p.outStream.writeWord(gfxMoving);
							p.outStream.writeByte(StartHeight);
							p.outStream.writeByte(endHeight);
							p.outStream.writeWord(51);
							p.outStream.writeWord(speed);
							p.outStream.writeByte(16);
							p.outStream.writeByte(64);
						}
					}
				}
			}
		}
	}

	public void StillGfx(int Id, int X, int Y, int Delay, int Height) {
		// misc.debugMes("Still Graphic Created");
		for (int i = 0; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 60)) {
					if (p.heightLevel == heightLevel) {
						p.outStream.createFrame(85);
						p.outStream.writeByteC(Y - (mapRegionY * 8));
						p.outStream.writeByteC(X - (mapRegionX * 8));
						p.outStream.createFrame(4);
						p.outStream.writeByte(0);
						p.outStream.writeWord(Id);
						p.outStream.writeByte(Height);
						p.outStream.writeWord(Delay);
					}
				}
			}
		}
	}

	public void playGraphic(int Id, int Delay, int Height) {
		if (Id >= 0) {
			GfxId = Id;
			GfxDelay = Delay;
			GfxHeight = Height;
			updateRequired = true;
			GraphicsUpdateRequired = true;
		}
	}

	public void directFlushOutStream() {
		try {
			if (Server.s.playerHandler.players[playerId] == null
					|| disconnected || in == null || out == null) {
				if (combatDelay <= 0 && deathDelay < 0) {
					disconnected = true;
				}
				return;
			}
			if (outStream.currentOffset == 0) {
				return;
			}
			out.write(outStream.buffer, 0, outStream.currentOffset);
			outStream.currentOffset = 0;
		} catch (Exception e) {
		}
	}

	public void UpdateAll() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		handler.updatePlayer(this, outStream);
		handler.updateNPC(this, outStream);
		flushOutStream();
	}

	public void SetSidebar(int menuId, int form) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		try {
			outStream.createFrame(71);
			outStream.writeWord(form);
			outStream.writeByteA(menuId);
		} catch (Exception e) {
		}
	}

	public boolean hasarmour() {
		return (playerEquipment[playerRing] > 1
				|| playerEquipment[playerShield] > 1
				|| playerEquipment[playerHat] > 1
				|| playerEquipment[playerCape] > 1
				|| playerEquipment[playerArrows] > 1
				|| playerEquipment[playerChest] > 1
				|| playerEquipment[playerLegs] > 1
				|| playerEquipment[playerHands] > 1
				|| playerEquipment[playerFeet] > 1 || playerEquipment[playerWeapon] > 1);
	}

	public boolean HasItemAmount(int itemID, int itemAmount) {
		int playerItemAmountCount = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == itemID + 1) {
				playerItemAmountCount = playerItemsN[i];
			}
			if (playerItemAmountCount >= itemAmount) {
				return true;
			}
		}
		return false;
	}

	public boolean sellItem(int itemID, int fromSlot, int amount) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return false;
		}
		if (CurrentFrame == 3824) {
			if (amount > 0 && itemID == (playerItems[fromSlot] - 1)) {
				if (Server.s.shopHandler.ShopSModifier[MyShopID] > 1) {
					boolean IsIn = false;
					for (int i = 0; i <= Server.s.shopHandler.ShopItemsStandard[MyShopID]; i++) {
						if (itemID == (Server.s.shopHandler.ShopItems[MyShopID][i] - 1)) {
							IsIn = true;
							break;
						}
					}
					if (IsIn == false) {
						sendMessage("You cannot sell " + getItemName(itemID)
								+ " in this store.");
						return false;
					}
				}
				if (amount > playerItemsN[fromSlot]
						&& (Item.itemIsNote[(playerItems[fromSlot] - 1)] == true || Item.itemStackable[(playerItems[fromSlot] - 1)] == true)) {
					amount = playerItemsN[fromSlot];
				} else if (amount > InvItemAmt(itemID)
						&& Item.itemIsNote[(playerItems[fromSlot] - 1)] == false
						&& Item.itemStackable[(playerItems[fromSlot] - 1)] == false) {
					amount = InvItemAmt(itemID);
				}
				double ShopValue;
				double TotPrice;
				int TotPrice2;
				int Overstock;
				for (int i = amount; i > 0; i--) {
					TotPrice2 = (int) Math.floor(getItemValue(itemID));
					if (FreeSlots() > 0) {
						if (Item.itemIsNote[itemID] == false) {
							deleteItem(itemID, GetItemSlot(itemID), 1);
						} else {
							deleteItem(itemID, fromSlot, 1);
						}
						addItem(995, TotPrice2);
						addShopItem(itemID, 1);
					} else {
						sendMessage("Not enough space in your inventory.");
						break;
					}
				}
				resetItems(3823);
				resetShop(MyShopID);
				UpdatePlayerShop();
				return true;
			}
		} else {
			sendMessage("Error selling item, please reopen the shop.");
			return false;
		}
		return true;
	}

	public boolean buyItem(int itemID, int fromSlot, int amount) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return false;
		}
		if (CurrentFrame == 3824) {
			if (amount > 0
					&& itemID == (Server.s.shopHandler.ShopItems[MyShopID][fromSlot] - 1)) {
				if (amount > Server.s.shopHandler.ShopItemsN[MyShopID][fromSlot]) {
					amount = Server.s.shopHandler.ShopItemsN[MyShopID][fromSlot];
				}
				double ShopValue;
				double TotPrice;
				int TotPrice2;
				int Overstock;
				int Slot = GetItemSlot(995);
				int Slot2 = GetItemSlot(7774);
				for (int i = amount; i > 0; i--) {
					TotPrice2 = (int) Math.floor(getItemShopValue(itemID));
					if (TotPrice2 <= 1) {
						TotPrice2 = (int) Math.floor(getItemShopValue(itemID));
					}
					if (MyShopID != 6 && MyShopID != 7 && MyShopID != 11
							&& MyShopID != 52 && MyShopID != 59
							&& MyShopID != 60) {
						if (Slot != -1) {
							if (playerItemsN[Slot] < TotPrice2) {
								sendMessage("You don't have enough coins.");
								break;
							}
						} else {
							return false;
						}
					}
					if (MyShopID == 11) {
						if (pcPoints < 70 && itemID == 7992) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 65 && itemID == 7991) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 4 && itemID == 5574) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 6 && itemID == 5575) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 5 && itemID == 5576) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 180 && itemID == 8003) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 15 && itemID == 8002) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 60 && itemID == 8019) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 50 && itemID == 8020) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 30 && itemID == 8021) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 40 && itemID == 8022) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 40 && itemID == 8023) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 40 && itemID == 8024) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 1 && itemID == 7989) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 8 && itemID == 7454) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 12 && itemID == 7455) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 18 && itemID == 7456) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 24 && itemID == 7457) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 30 && itemID == 7458) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 36 && itemID == 7459) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 42 && itemID == 7460) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 48 && itemID == 7461) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 54 && itemID == 7462) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 60 && itemID == 8102) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
						if (pcPoints < 120 && itemID == 8103) {
							sendMessage("You don't have enough pest control points.");
							break;
						}
					}
					if (MyShopID == 52) {
						if (zombiePoints < 10000 && itemID == 1999) {
							sendMessage("You need 10000 Zombie Points for a Dragon whip.");
							break;
						}
						if (zombiePoints < 3000 && itemID == 8051) {
							sendMessage("You need 3000 Zombie Points for a Rune Whip.");
							break;
						}
						if (zombiePoints < 1000 && itemID == 8086) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
						if (zombiePoints < 500 && itemID == 7993) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
						if (zombiePoints < 350 && itemID == 8039) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
						if (zombiePoints < 150 && itemID == 7990) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
						if (zombiePoints < 100 && itemID == 7977) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
						if (zombiePoints < 75 && itemID == 7976) {
							sendMessage("You don't have enough Zombie Points.");
							break;
						}
					}
					if (MyShopID == 60) {
						if (pkPoints < 750 && itemID == 7777) {
							sendMessage("You need 750 PK Points for a Staff of light.");
							break;
						}
						if (pkPoints < 650 && itemID == 8922) {
							sendMessage("You need 650 PK Points for Dragon claws.");
							break;
						}
						if (pkPoints < 500 && itemID == 8916) {
							sendMessage("You need 500 PK Points for a Statius warhammer.");
							break;
						}
						if (pkPoints < 500 && itemID == 8907) {
							sendMessage("You need 500 PK Points for a Vesta longsword.");
							break;
						}
						if (pkPoints < 500 && itemID == 8908) {
							sendMessage("You need 500 PK Points for a Vesta spear.");
							break;
						}
					}
					if (MyShopID == 7) {
						if (mageArenaKills < 30 && itemID == 2412) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 30 && itemID == 2413) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 30 && itemID == 2414) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 70 && itemID == 2415) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 70 && itemID == 2416) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 70 && itemID == 2417) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 3 && itemID == 7980) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 15 && itemID == 8013) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 50 && itemID == 8014) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 40 && itemID == 8015) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 5 && itemID == 8016) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 5 && itemID == 8017) {
							sendMessage("You don't have enough kill points.");
							break;
						}
						if (mageArenaKills < 20 && itemID == 8018) {
							sendMessage("You don't have enough kill points.");
							break;
						}
					}
					if (MyShopID == 59) {
						if (FightArenaKills < 35 && itemID == 7960) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 20 && itemID == 7963) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 25 && itemID == 7974) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 20 && itemID == 7975) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 15 && itemID == 3105) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 25 && itemID == 8100) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 3 && itemID == 8058) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 5 && itemID == 8059) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 7 && itemID == 8060) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 9 && itemID == 8061) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 12 && itemID == 8062) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 13 && itemID == 8063) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 20 && itemID == 7959) {
							sendMessage("You don't have enough points.");
							break;
						}
						if (FightArenaKills < 150 && itemID == 8064) {
							sendMessage("You don't have enough points.");
							break;
						}
					}
					if (MyShopID == 6) {
						if (playerItemsN[Slot2] < 85 && itemID == 7973) {
							sendMessage("You don't have enough tokens.");
							break;
						}
						if (playerItemsN[Slot2] < 85 && itemID == 7975) {
							sendMessage("You don't have enough tokens.");
							break;
						}
						if (playerItemsN[Slot2] < 85 && itemID == 8100) {
							sendMessage("You don't have enough tokens.");
							break;
						}
						if (playerItemsN[Slot2] < 600 && itemID == 7960) {
							sendMessage("You don't have enough tokens.");
							break;
						}
						if (playerItemsN[Slot2] < 270 && itemID == 7974) {
							sendMessage("You don't have enough tokens.");
							break;
						}
						if (playerItemsN[Slot2] < 50 && itemID == 3105) {
							sendMessage("You don't have enough tokens.");
							break;
						}
					}
					if (FreeSlots() > 0 || InvItemAmt(itemID) > 0
							&& Item.itemStackable[itemID]) {
						if (MyShopID != 6 && MyShopID != 7 && MyShopID != 11
								&& MyShopID != 52 && MyShopID != 59
								&& MyShopID != 60) {
							deleteItem(995, GetItemSlot(995), TotPrice2);
						} else if (MyShopID == 6) {
							if (itemID == 7960) {
								deleteItem(7774, GetItemSlot(7774), 600);
							} else if (itemID == 7973) {
								deleteItem(7774, GetItemSlot(7774), 85);
							} else if (itemID == 7974) {
								deleteItem(7774, GetItemSlot(7774), 270);
							} else if (itemID == 7975) {
								deleteItem(7774, GetItemSlot(7774), 85);
							} else if (itemID == 8100) {
								deleteItem(7774, GetItemSlot(7774), 85);
							} else if (itemID == 3105) {
								deleteItem(7774, GetItemSlot(7774), 50);
							}
						} else if (MyShopID == 7) {
							if (itemID == 2412) {
								mageArenaKills -= 30;
							} else if (itemID == 2413) {
								mageArenaKills -= 30;
							} else if (itemID == 2414) {
								mageArenaKills -= 30;
							} else if (itemID == 2415) {
								mageArenaKills -= 70;
							} else if (itemID == 2416) {
								mageArenaKills -= 70;
							} else if (itemID == 2417) {
								mageArenaKills -= 70;
							} else if (itemID == 7980) {
								mageArenaKills -= 3;
							} else if (itemID == 8013) {
								mageArenaKills -= 15;
							} else if (itemID == 8014) {
								mageArenaKills -= 50;
							} else if (itemID == 8015) {
								mageArenaKills -= 40;
							} else if (itemID == 8016) {
								mageArenaKills -= 5;
							} else if (itemID == 8017) {
								mageArenaKills -= 5;
							} else if (itemID == 8018) {
								mageArenaKills -= 20;
							}
						} else if (MyShopID == 59) {
							if (itemID == 7960) {
								FightArenaKills -= 35;
							} else if (itemID == 7974) {
								FightArenaKills -= 25;
							} else if (itemID == 7975) {
								FightArenaKills -= 20;
							} else if (itemID == 3105) {
								FightArenaKills -= 15;
							} else if (itemID == 8100) {
								FightArenaKills -= 25;
							} else if (itemID == 8058) {
								FightArenaKills -= 3;
							} else if (itemID == 8059) {
								FightArenaKills -= 5;
							} else if (itemID == 8060) {
								FightArenaKills -= 7;
							} else if (itemID == 8061) {
								FightArenaKills -= 9;
							} else if (itemID == 8062) {
								FightArenaKills -= 12;
							} else if (itemID == 8063) {
								FightArenaKills -= 13;
							} else if (itemID == 7959) {
								FightArenaKills -= 20;
							} else if (itemID == 8064) {
								FightArenaKills -= 150;
							}
						} else if (MyShopID == 11) {
							if (itemID == 7992) {
								pcPoints -= 70;
							} else if (itemID == 7991) {
								pcPoints -= 65;
							} else if (itemID == 5574) {
								pcPoints -= 4;
							} else if (itemID == 5575) {
								pcPoints -= 6;
							} else if (itemID == 5576) {
								pcPoints -= 5;
							} else if (itemID == 8003) {
								pcPoints -= 180;
							} else if (itemID == 8002) {
								pcPoints -= 15;
							} else if (itemID == 8019) {
								pcPoints -= 60;
							} else if (itemID == 8020) {
								pcPoints -= 50;
							} else if (itemID == 8021) {
								pcPoints -= 30;
							} else if (itemID == 8022) {
								pcPoints -= 40;
							} else if (itemID == 8023) {
								pcPoints -= 40;
							} else if (itemID == 8024) {
								pcPoints -= 40;
							} else if (itemID == 7989) {
								pcPoints -= 1;
							} else if (itemID == 7454) {
								pcPoints -= 8;
							} else if (itemID == 7455) {
								pcPoints -= 12;
							} else if (itemID == 7456) {
								pcPoints -= 18;
							} else if (itemID == 7457) {
								pcPoints -= 24;
							} else if (itemID == 7458) {
								pcPoints -= 30;
							} else if (itemID == 7459) {
								pcPoints -= 30;
							} else if (itemID == 7460) {
								pcPoints -= 36;
							} else if (itemID == 7461) {
								pcPoints -= 42;
							} else if (itemID == 7462) {
								pcPoints -= 48;
							} else if (itemID == 7463) {
								pcPoints -= 54;
							} else if (itemID == 8102) {
								pcPoints -= 60;
							} else if (itemID == 8103) {
								pcPoints -= 120;
							}
						} else if (MyShopID == 52) {
							if (itemID == 1999) {
								zombiePoints -= 10000;
							} else if (itemID == 8051) {
								zombiePoints -= 3000;
							} else if (itemID == 8086) {
								zombiePoints -= 1000;
							} else if (itemID == 7993) {
								zombiePoints -= 500;
							} else if (itemID == 8039) {
								zombiePoints -= 350;
							} else if (itemID == 7990) {
								zombiePoints -= 150;
							} else if (itemID == 7977) {
								zombiePoints -= 100;
							} else if (itemID == 7976) {
								zombiePoints -= 75;
							}
						} else if (MyShopID == 60) {
							if (itemID == 7777) {
								pkPoints -= 750;
							} else if (itemID == 8922) {
								pkPoints -= 650;
							} else if (itemID == 8916) {
								pkPoints -= 500;
							} else if (itemID == 8907) {
								pkPoints -= 500;
							} else if (itemID == 8908) {
								pkPoints -= 500;
							}
						}
						addItem(itemID, 1);
						if (Server.s.shopHandler.ShopItemsN[MyShopID][fromSlot] != 99999) {
							Server.s.shopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
						}
						Server.s.shopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
						if ((fromSlot + 1) > Server.s.shopHandler.ShopItemsStandard[MyShopID]) {
							Server.s.shopHandler.ShopItems[MyShopID][fromSlot] = 0;
						}
					} else {
						sendMessage("Not enough space in your inventory.");
						break;
					}
				}
				resetItems(3823);
				resetShop(MyShopID);
				UpdatePlayerShop();
				return true;
			}
		} else {
			sendMessage("Error buying item. Please reopen the shop.");
			return false;
		}
		return false;
	}

	public void UpdatePlayerShop() {
		// misc.debugMes("Shop Updated");
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				if (Server.s.playerHandler.players[i].IsShopping == true
						&& Server.s.playerHandler.players[i].MyShopID == MyShopID
						&& i != playerId) {
					Server.s.playerHandler.players[i].UpdateShop = true;
				}
			}
		}
	}

	public boolean addShopItem(int itemID, int amount) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return false;
		}
		boolean Added = false;
		if (amount <= 0) {
			return false;
		}
		if (Item.itemIsNote[itemID] == true) {
			itemID = getUnnotedItem(itemID);
		}
		for (int i = 0; i < Server.s.shopHandler.ShopItems.length; i++) {
			if (Server.s.shopHandler.ShopItemsN[MyShopID][i] == 99999) {
				return true;
			}
			if ((Server.s.shopHandler.ShopItems[MyShopID][i] - 1) == itemID) {
				Server.s.shopHandler.ShopItemsN[MyShopID][i] += amount;
				Added = true;
			}
		}
		if (Added == false) {
			for (int i = 0; i < Server.s.shopHandler.ShopItems.length; i++) {
				if (Server.s.shopHandler.ShopItemsN[MyShopID][i] == 99999) {
					return true;
				}
				if (Server.s.shopHandler.ShopItems[MyShopID][i] == 0) {
					Server.s.shopHandler.ShopItems[MyShopID][i] = (itemID + 1);
					Server.s.shopHandler.ShopItemsN[MyShopID][i] = amount;
					Server.s.shopHandler.ShopItemsDelay[MyShopID][i] = 0;
					break;
				}
			}
		}
		return true;
	}

	public boolean lastArea = false;

	public void WalkingPacket() {
		if (!IsDead && EntangleDelay <= 0) {
			newWalkCmdSteps = packetSize - 5;
			newWalkCmdSteps /= 2;
			if (++newWalkCmdSteps > walkingQueueSize) {
				newWalkCmdSteps = 0;
				return;
			}
			int firstStepX = inStream.readSignedWordBigEndianA();
			int tmpFSX = firstStepX;
			firstStepX -= mapRegionX * 8;
			for (i = 1; i < newWalkCmdSteps; i++) {
				newWalkCmdX[i] = inStream.readSignedByte();
				newWalkCmdY[i] = inStream.readSignedByte();
				tmpNWCX[i] = newWalkCmdX[i];
				tmpNWCY[i] = newWalkCmdY[i];
			}
			newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
			int firstStepY = inStream.readSignedWordBigEndian();
			int tmpFSY = firstStepY;
			firstStepY -= mapRegionY * 8;
			newWalkCmdIsRunning = inStream.readSignedByteC() == 1;
			for (i = 0; i < newWalkCmdSteps; i++) {
				newWalkCmdX[i] += firstStepX;
				newWalkCmdY[i] += firstStepY;
			}
			poimiY = firstStepY;
			poimiX = firstStepX;
		} else {
			// This will stop coord bugs when dead walking.
			newWalkCmdSteps = packetSize - 5;
			newWalkCmdSteps /= 2;
			if (++newWalkCmdSteps > walkingQueueSize) {
			}
			inStream.readSignedWordBigEndianA();
			for (i = 1; i < newWalkCmdSteps; i++) {
				inStream.readSignedByte();
				inStream.readSignedByte();
			}
			inStream.readSignedWordBigEndian();
			inStream.readSignedByteC();
		}
		resetWithWalk();
	}

	public void resetWithWalk() {
		// Close all open windows.
		if (CurrentFrame != 5292) {
			RemoveAllWindows();
			CurrentFrame = -1;
		}
		// Reset any active skills.
		isFletching = false;
		isCrafting = false;
		essDelay = -1;
		dHideCraft = false;
		cookDelay = -1;
		if (isWC) {
			resetWC();
		}
		if (isMining) {
			resetMining();
		}
		if (fishCaughtTimer >= 0) {
			resetFishing();
		}
		resetAtk();
		// Finish up.
		NpcDialogue = -1;
		clickedNPC1 = false;
		itemOnNPC = false;
		clickedNPC2 = false;
		clickedObject1 = false;
		clickedObject2 = false;
		clanRequest = -1;
		clanRequestName = "";
		if (!pinCorrect()) {
			resetBankPinAttempts();
		}
		pageNumber = 0;
		pickupItem = false;
		usedItemOnObject = false;
		if (lastArea != WildArea()) {
			lastArea = WildArea();
			if (WildArea()) {
				ShowOption(1, "Attack");
			} else if (duelArea()) {
				ShowOption(1, "Challenge");
			} else {
				// ShowOption(1, "Do nothing with");
			}
		}
		if (HasSecondHit) {
			UsingSpecial = false;
			HasSecondHit = false;
			setSpec(false);
		}
		if (TurnTo != 65535) {
			TurnPlayerTo(65535);
		}
		if (TradingWith != 0) {
			declineTrade();
		}
		declineDuel();
		if (meleeFightStatus == 0) {
			if (Server.s.playerHandler.players[meleeFightWith] != null) {
				Client p = (Client) Server.s.playerHandler.players[meleeFightWith];
				p.sendMessage("Other player declined.");
				p.NpcDialogue = -1;
				p.RemoveAllWindows();
				p.meleeFightWith = 0;
				p.meleeFightStatus = -1;
			}
			meleeFightWith = 0;
			meleeFightStatus = -1;
		}
	}

	public void MainPacket() {
		/* Main Packet */
		Client p = Server.s.playerHandler.clients[followId];
		int x = 0, y = 0;
		if (p == null) {
			x = absX;
			y = absY;
		} else if (p != null) {
			x = p.absX;
			y = p.absY;
		}
		if ((!IsDead && EntangleDelay <= 0)/*
											 * && (followId > 0 &&
											 * !WithinDistance(absX, absY, x, y,
											 * followDistance) || followId == 0)
											 */) {
			newWalkCmdSteps = packetSize - 5;
			newWalkCmdSteps /= 2;
			if (++newWalkCmdSteps > walkingQueueSize) {
				newWalkCmdSteps = 0;
				return;
			}
			int firstStepX = inStream.readSignedWordBigEndianA();
			int tmpFSX = firstStepX;
			firstStepX -= mapRegionX * 8;
			for (i = 1; i < newWalkCmdSteps; i++) {
				newWalkCmdX[i] = inStream.readSignedByte();
				newWalkCmdY[i] = inStream.readSignedByte();
				tmpNWCX[i] = newWalkCmdX[i];
				tmpNWCY[i] = newWalkCmdY[i];
			}
			newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
			int firstStepY = inStream.readSignedWordBigEndian();
			int tmpFSY = firstStepY;
			firstStepY -= mapRegionY * 8;
			newWalkCmdIsRunning = inStream.readSignedByteC() == 1;
			for (i = 0; i < newWalkCmdSteps; i++) {
				newWalkCmdX[i] += firstStepX;
				newWalkCmdY[i] += firstStepY;
			}
			poimiY = firstStepY;
			poimiX = firstStepX;
		} else {
			// This will stop coord bugs when dead walking.
			newWalkCmdSteps = packetSize - 5;
			newWalkCmdSteps /= 2;
			if (++newWalkCmdSteps > walkingQueueSize) {
			}
			inStream.readSignedWordBigEndianA();
			for (i = 1; i < newWalkCmdSteps; i++) {
				inStream.readSignedByte();
				inStream.readSignedByte();
			}
			inStream.readSignedWordBigEndian();
			inStream.readSignedByteC();
		}
		// End active skills.
		isFletching = false;
		isCrafting = false;
		if (isWC) {
			resetWC();
		}
		if (isMining) {
			resetMining();
		}
		cookDelay = -1;
		if (fishCaughtTimer >= 0) {
			resetFishing();
		}
		// Finish up.
		NpcDialogue = -1;
		clickedNPC1 = false;
		itemOnNPC = false;
		clickedNPC2 = false;
		clickedObject1 = false;
		clickedObject2 = false;
		pickupItem = false;
		if (!pinCorrect()) {
			resetBankPinAttempts();
		}
		usedItemOnObject = false;
	}

	public int damageHit = 0;
	public boolean HasArrows = false;
	public boolean ArrowSlot = true;

	public void shotputThrow() {
		getBonus();
		double maxHit = 0;
		int strBonus = playerBonus[10];
		int strengthLvl = playerLevel[playerStrength];

		maxHit += strBonus * strengthLvl * 0.00055;
		maxHit += strengthLvl * 0.02;

		if (StrPray == 1) {
			maxHit += strengthLvl * 0.005;
		} else if (StrPray == 2) {
			maxHit += strengthLvl * 0.007;
		} else if (StrPray == 3) {
			maxHit += strengthLvl * 0.0085;
		}

		if (fullMeVoidEquipped()) {
			maxHit += maxHit * 0.1;
		}

		playerMaxHit = (int) Math.floor(maxHit);
	}

	public void calculateMelee() {
		getBonus();
		int strengthLvl = playerLevel[playerStrength];
		if (StrPray == 1) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.05;
		} else if (StrPray == 2) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.1;
		} else if (StrPray == 3) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.15;
		} else if (StrPray == 6) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.18;
		} else if (StrPray == 7) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.23;
		}
		if (fullMeVoidEquipped()) {
			strengthLvl += getLevelForXP(playerXP[playerStrength]) * 0.1;
		}
		double maxHit = 1.05 + (playerBonus[10] * strengthLvl) * 0.00175;
		maxHit += strengthLvl * 0.11;
		if (fullDharokEquipped()) {
			maxHit += (getLevelForXP(playerXP[playerHitpoints]) - playerLevel[playerHitpoints]) / 2.2;
		}
		if (UsingSpecial) {
			if (playerEquipment[playerWeapon] == 7993) {
				maxHit += maxHit * 0.28;
			} else if (playerEquipment[playerWeapon] == 8086) {
				maxHit += maxHit * 0.52;
			} else if (playerEquipment[playerWeapon] == 5698) {
				maxHit += maxHit * 0.16;
			} else if (playerEquipment[playerWeapon] == 8916) {
				maxHit += maxHit * 0.45;
			} else if (playerEquipment[playerWeapon] == 8922) {
				maxHit += maxHit * 0.35;
			} else if (playerEquipment[playerWeapon] == 8907) {
				maxHit += maxHit * 0.38;
			} else if (playerEquipment[playerWeapon] == 1434) {
				maxHit *= 1.39;
			} else if (playerEquipment[playerWeapon] == 1305) {
				maxHit *= 1.166;
			}
		}
		playerMaxHit = (int) maxHit;
	}

	public void calculateRange() {
		int rangeLvl = playerLevel[playerRanged];
		int wepId = playerEquipment[playerWeapon];
		int arrows = playerEquipment[playerArrows];
		if (AtkPray == 4) {
			rangeLvl += getLevelForXP(playerXP[playerRanged]) * 0.15;
		}
		if (fullRaVoidEquipped()) {
			rangeLvl += getLevelForXP(playerXP[playerRanged]) * 0.1;
		}
		double maxHit = 1.05 + (rangeLvl * 0.00125);
		maxHit += rangeLvl * 0.11;
		if (wepId == 800 || wepId == 806 || wepId == 825 || wepId == 864)// Bronze
																			// items
		{
			maxHit *= 0.7;
		} else if (wepId == 801 || wepId == 807 || wepId == 820 || wepId == 863)// Iron
																				// items
		{
			maxHit *= 0.72;
		} else if (wepId == 802 || wepId == 808 || wepId == 827 || wepId == 865)// Steel
																				// items
		{
			maxHit *= 0.79;
		} else if (wepId == 803 || wepId == 809 || wepId == 828 || wepId == 866)// Mith
																				// items
		{
			maxHit *= 0.84;
		} else if (wepId == 804 || wepId == 810 || wepId == 829 || wepId == 867)// Addy
																				// items
		{
			maxHit *= 0.99;
		} else if (wepId == 805 || wepId == 811 || wepId == 830 || wepId == 868)// Rune
																				// items
		{
			maxHit *= 1.24;
		} else if (wepId == 6522)// Obsidian Rings
		{
			maxHit *= 1.64;
		} else if (wepId == 4212 || wepId == 4214)// Crystal Bow
		{
			maxHit *= 2.25;
		} else if (arrows == 882 || arrows == 883)// Bronze arrow
		{
			maxHit *= 1.042;
		} else if (arrows == 884 || arrows == 885)// Iron arrow
		{
			maxHit *= 1.044;
		} else if (arrows == 886 || arrows == 887)// Steel arrow
		{
			maxHit *= 1.134;
		} else if (arrows == 888 || arrows == 889)// Mith arrow
		{
			maxHit *= 1.2;
		} else if (arrows == 890 || arrows == 891)// Addy arrow
		{
			maxHit *= 1.35;
		} else if (arrows == 892 || arrows == 893)// Rune arrow
		{
			maxHit *= 1.6;
		} else if (arrows == 4740)// x-Bow bolt
		{
			maxHit *= 1.95;
		} else if (arrows == 8065)// Adamant bolt
		{
			maxHit *= 1.5;
		} else if (arrows == 7988)// Rune bolt
		{
			maxHit *= 2.1;
		} else if (arrows == 7989)// Dragon bolt
		{
			maxHit *= 2.6;
		}
		if (UsingSpecial || rangeSpec) {
			if (wepId == 861) {
				maxHit *= 1.05;
			} else if (wepId == 7958) {
				maxHit *= 1.64;
			}
		}
		playerMaxHit = (int) maxHit;
	}

	public int meleeDef() {
		/*
		 * int defBonus = playerBonus[bestmeleeDef()]; int defLvl =
		 * playerLevel[playerDefence]; int maxDef =
		 * getLevelForXP(playerXP[playerDefence]); int myDef = 0;
		 * 
		 * if (DefPray == 1) defLvl += maxDef * 0.05; else if (DefPray == 2)
		 * defLvl += maxDef * 0.1; else if (DefPray == 3) defLvl += maxDef *
		 * 0.15; else if (DefPray == 6) defLvl += maxDef * 0.2; else if (DefPray
		 * == 7) defLvl += maxDef * 0.25;
		 * 
		 * myDef += (int)((defLvl + (defLvl * 0.15)) + (defBonus + (defBonus *
		 * 0.05)));
		 * 
		 * return myDef;
		 */

		int defenceLevel = playerLevel[playerDefence];
		if (DefPray == 1) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.05;
		} else if (DefPray == 2) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.1;
		} else if (DefPray == 3) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.15;
		} else if (DefPray == 6) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.2;
		} else if (DefPray == 7) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.25;
		}
		return (int) (defenceLevel + playerBonus[bestmeleeDef()] + (playerBonus[bestmeleeDef()] / 2));
	}

	public int rangeDef() {
		/*
		 * int defBonus = playerBonus[9]; int defLvl =
		 * playerLevel[playerDefence]; int maxDef =
		 * getLevelForXP(playerXP[playerDefence]); int myDef = 0;
		 * 
		 * if (DefPray == 1) defLvl += maxDef * 0.05; else if (DefPray == 2)
		 * defLvl += maxDef * 0.1; else if (DefPray == 3) defLvl += maxDef *
		 * 0.15; else if (DefPray == 6) defLvl += maxDef * 0.2; else if (DefPray
		 * == 7) defLvl += maxDef * 0.25;
		 * 
		 * myDef += (int)((defLvl + (defLvl * 0.15)) + (defBonus + (defBonus *
		 * 0.05)));
		 * 
		 * return myDef;
		 */
		int defenceLevel = playerLevel[playerDefence];
		if (DefPray == 1) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.05;
		} else if (DefPray == 2) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.1;
		} else if (DefPray == 3) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.15;
		} else if (DefPray == 6) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.2;
		} else if (DefPray == 7) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.25;
		}
		return (int) (defenceLevel + playerBonus[9] + (playerBonus[9] / 2));
	}

	public int mageDef() {
		/*
		 * int defBonus = playerBonus[8]; int defLvl =
		 * (playerLevel[playerDefence] / 2 + playerLevel[playerMagic] / 2); int
		 * maxDef = (getLevelForXP(playerXP[playerDefence]) / 2 +
		 * getLevelForXP(playerXP[playerMagic]) / 2); int myDef = 0;
		 * 
		 * if (DefPray == 1) defLvl += maxDef * 0.05; else if (DefPray == 2)
		 * defLvl += maxDef * 0.1; else if (DefPray == 3) defLvl += maxDef *
		 * 0.15; else if (DefPray == 6) defLvl += maxDef * 0.2; else if (DefPray
		 * == 7) defLvl += maxDef * 0.25;
		 * 
		 * myDef += (int)((defLvl + (defLvl * 0.15)) + (defBonus + (defBonus *
		 * 0.05)));
		 * 
		 * return myDef;
		 */
		int defenceLevel = (int) (playerLevel[playerDefence] / 2 + playerLevel[playerMagic] / 2);
		if (DefPray == 1) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.05;
		} else if (DefPray == 2) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.1;
		} else if (DefPray == 3) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.15;
		} else if (DefPray == 6) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.2;
		} else if (DefPray == 7) {
			defenceLevel += getLevelForXP(playerXP[playerDefence]) * 0.25;
		}
		return (int) (defenceLevel + playerBonus[8] + (playerBonus[8] / 2));
	}

	public int meleeAtk(boolean isSpec) {
		/*
		 * int atkBonus = playerBonus[bestmeleeAtk()]; int atkLvl =
		 * playerLevel[playerAttack]; int maxAtk =
		 * getLevelForXP(playerXP[playerAttack]); int myAtk = 0;
		 * 
		 * if (AtkPray == 1) atkLvl += maxAtk * 0.05; else if (AtkPray == 2)
		 * atkLvl += maxAtk * 0.1; else if (AtkPray == 3) atkLvl += maxAtk *
		 * 0.15; else if (AtkPray == 6) atkLvl += maxAtk * 0.15; else if
		 * (AtkPray == 7) atkLvl += maxAtk * 0.2;
		 * 
		 * if (fullMeVoidEquipped()) atkLvl += maxAtk * 0.1;
		 * 
		 * if (isSpec || UsingSpecial) { if (playerEquipment[playerWeapon] ==
		 * 5698) atkLvl += maxAtk * 0.05; else if (playerEquipment[playerWeapon]
		 * == 4151) atkLvl += maxAtk * 0.1; else if
		 * (playerEquipment[playerWeapon] == 4587) atkLvl += maxAtk * 0.08; else
		 * if (playerEquipment[playerWeapon] == 1434) atkLvl -= maxAtk * 0.05;
		 * else if (playerEquipment[playerWeapon] == 8103) atkLvl = atkLvl * 2;
		 * }
		 * 
		 * myAtk += (int)((atkLvl + (atkLvl * 0.15)) + (atkBonus + (atkBonus *
		 * 0.05)));
		 * 
		 * return myAtk;
		 */
		// double atkLevel = playerLevel[playerAttack];
		double attackLevel = playerLevel[playerAttack];
		if (isSpec || UsingSpecial) {
			if (playerEquipment[playerWeapon] == 5698) {
				attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.05;
			} else if (playerEquipment[playerWeapon] == 4151) {
				attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.1;
			} else if (playerEquipment[playerWeapon] == 4587) {
				attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.08;
			} else if (playerEquipment[playerWeapon] == 1434) {
				attackLevel -= getLevelForXP(playerXP[playerAttack]) * 0.05;
			} else if (playerEquipment[playerWeapon] == 8103) {
				attackLevel = attackLevel * 2;
			} else if (playerEquipment[playerWeapon] == 8086) { // this is for
																// accuracy it
																// needs to be
																// higher on ags
																// -.-
				attackLevel = getLevelForXP(playerXP[playerAttack]) * 1.15;
			} else if (playerEquipment[playerWeapon] == 8907) {
				attackLevel = getLevelForXP(playerXP[playerAttack]) * 1.25;
			}// vls suppose to be super accurate spec i know..
		}
		if (AtkPray == 1) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.05;
		} else if (AtkPray == 2) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.1;
		} else if (AtkPray == 3) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.15;
		} else if (AtkPray == 6) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.15;
		} else if (AtkPray == 7) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.2;
		}
		if (fullMeVoidEquipped()) {
			attackLevel += getLevelForXP(playerXP[playerAttack]) * 0.1;
		}
		return (int) (attackLevel + (playerBonus[bestmeleeAtk()] * 2));
	}

	public int rangeAtk(boolean isSpec) {
		/*
		 * int atkBonus = playerBonus[4]; int atkLvl =
		 * playerLevel[playerRanged]; int maxAtk =
		 * getLevelForXP(playerXP[playerRanged]); int myAtk = 0;
		 * 
		 * if (fullRaVoidEquipped()) atkLvl += maxAtk * 0.1;
		 * 
		 * if (isSpec || UsingSpecial) { if (playerEquipment[playerWeapon] ==
		 * 859) atkLvl += maxAtk * 0.1; else if (playerEquipment[playerWeapon]
		 * == 861) atkLvl -= maxAtk * 0.05; }
		 * 
		 * myAtk += (int)((atkLvl + (atkLvl * 0.15)) + (atkBonus + (atkBonus *
		 * 0.05)));
		 * 
		 * return myAtk;
		 */
		int attackLevel = playerLevel[playerRanged];
		if (isSpec || UsingSpecial) {
			if (playerEquipment[playerWeapon] == 859) {
				attackLevel += getLevelForXP(playerXP[playerRanged]) * 0.1;
			} else if (playerEquipment[playerWeapon] == 861) {
				attackLevel -= getLevelForXP(playerXP[playerRanged]) * 0.05;
			}
		}
		if (fullRaVoidEquipped()) {
			attackLevel += getLevelForXP(playerXP[playerRanged]) * 0.1;
		}
		return (int) (attackLevel + (playerBonus[4] * 2));
	}

	public int mageAtk() {
		/*
		 * int atkBonus = playerBonus[3]; int atkLvl = playerLevel[playerMagic];
		 * int maxAtk = getLevelForXP(playerXP[playerMagic]); int myAtk = 0;
		 * 
		 * if (fullAhrimsEquipped()) atkLvl += maxAtk * 0.05;
		 * 
		 * if (AtkPray == 5) atkLvl += maxAtk * 0.15;
		 * 
		 * if (fullMaVoidEquipped()) atkLvl += maxAtk * 0.2;
		 * 
		 * if (spellCastedId == 12037) myAtk += (int)((atkLvl + (atkLvl * 0.15))
		 * + (atkLvl + (atkLvl * 0.05))); else myAtk += (int)((atkLvl + (atkLvl
		 * * 0.15)) + (atkBonus + (atkBonus * 0.07)));
		 * 
		 * return myAtk;
		 */
		int attackLevel = playerLevel[playerMagic];
		if (fullMaVoidEquipped()) {
			attackLevel += getLevelForXP(playerXP[playerMagic]) * 0.2;
		}
		if (fullAhrimsEquipped()) {
			attackLevel += getLevelForXP(playerXP[playerMagic]) * 0.05;
		}
		if (AtkPray == 5) {
			attackLevel += getLevelForXP(playerXP[playerMagic]) * 0.15;
		}
		if (spellCastedId == 12037) {
			return (int) (attackLevel + attackLevel + (attackLevel * 2));
		} else {
			return (int) (attackLevel + (playerBonus[3] * 2));
		}
	}

	public int bestmeleeAtk() {
		if (playerBonus[0] > playerBonus[1] && playerBonus[0] > playerBonus[2]) {
			return 0;
		}
		if (playerBonus[1] > playerBonus[0] && playerBonus[1] > playerBonus[2]) {
			return 1;
		}
		if (playerBonus[2] > playerBonus[1] && playerBonus[2] > playerBonus[0]) {
			return 2;
		}
		return 0;
	}

	public int bestmeleeDef() {
		if (playerBonus[5] > playerBonus[6] && playerBonus[5] > playerBonus[7]) {
			return 5;
		}
		if (playerBonus[6] > playerBonus[5] && playerBonus[6] > playerBonus[7]) {
			return 6;
		}
		if (playerBonus[7] > playerBonus[5] && playerBonus[7] > playerBonus[6]) {
			return 7;
		}
		return 5;
	}

	public void DeleteArrow() {
		// misc.debugMes("Arrow Deleted");
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		int Wep = playerEquipment[playerWeapon];
		if ((Wep < 800 || Wep > 869) && Wep != 6522 && Wep != 4214
				&& Wep != 4212 || Wep > 836 && Wep < 862) {
			ArrowSlot = true;
			if (playerEquipmentN[playerArrows] == 1) {
				deleteEquipment(playerArrows);
			}
			if (playerEquipmentN[playerArrows] != 0) {
				outStream.createFrameVarSizeWord(34);
				outStream.writeWord(1688);
				outStream.writeByte(playerArrows);
				outStream.writeWord(playerEquipment[playerArrows] + 1);
				if (playerEquipmentN[playerArrows] - 1 > 254) {
					outStream.writeByte(255);
					outStream.writeDWord(playerEquipmentN[playerArrows] - 1);
				} else {
					outStream.writeByte(playerEquipmentN[playerArrows] - 1);
				}
				outStream.endFrameVarSizeWord();
				playerEquipmentN[playerArrows] -= 1;
			}
		} else {
			DeleteOtherRange();
		}
	}

	public void DeleteOtherRange() {
		// misc.debugMes("Range Item Deleted");
		int Wep = playerEquipment[playerWeapon];
		if (Wep != 4214 && Wep != 4212) {
			ArrowSlot = false;
			if (playerEquipmentN[playerWeapon] == 1) {
				deleteEquipment(playerWeapon);
			}
			outStream.createFrameVarSizeWord(34);
			outStream.writeWord(1688);
			outStream.writeByte(playerWeapon);
			outStream.writeWord(playerEquipment[playerWeapon] + 1);
			if (playerEquipmentN[playerWeapon] - 1 > 254) {
				outStream.writeByte(255);
				outStream.writeDWord(playerEquipmentN[playerWeapon] - 1);
			} else {
				outStream.writeByte(playerEquipmentN[playerWeapon] - 1);
			}
			outStream.endFrameVarSizeWord();
			playerEquipmentN[playerWeapon] -= 1;
		}
	}

	public void CheckArrows() {
		HasArrows = false;
		int wep = playerEquipment[playerWeapon];
		int arrow = playerEquipment[playerArrows];
		if (wep == 7979) {
			if (arrow == 7988 || arrow == 7989 || arrow == 8052
					|| arrow == 8065) {
				HasArrows = true;
				ArrowSlot = true;
			}
		} else if (wep == 8057) {
			if (arrow == 8052) {
				HasArrows = true;
				ArrowSlot = true;
			}
		} else if (wep == 8099) {
			if (arrow == 8052 || arrow == 8065) {
				HasArrows = true;
				ArrowSlot = true;
			}
		} else if (wep == 4734) {
			if (arrow == 4740) {
				HasArrows = true;
				ArrowSlot = true;
			}
		} else if (wep == 4214) {
			HasArrows = true;
		} else if (wep == 4212) {
			HasArrows = true;
		} else if (wep == 7958 || wep == 6724) {
			if (arrow >= 882 && arrow <= 893) {
				HasArrows = true;
			}
		} else if (wep >= 839 && wep <= 862) {
			int k = 882;
			do {
				if (arrow == k) {
					if (wep == 841 || wep == 839) {
						if (arrow <= 885) {
							HasArrows = true;
						}
					} else if (wep == 843 || wep == 845) {
						if (arrow <= 887) {
							HasArrows = true;
						}
					} else if (wep == 849 || wep == 847) {
						if (arrow <= 889) {
							HasArrows = true;
						}
					} else if (wep == 853 || wep == 851) {
						if (arrow <= 891) {
							HasArrows = true;
						}
					} else if (wep == 857 || wep == 855) {
						HasArrows = true;
					} else if (wep == 861 || wep == 859) {
						HasArrows = true;
					}
					if (HasArrows) {
						ArrowSlot = true;
					}
					k = 894;
				}
				k++;
			} while (k < 894);
		} else if (wep >= 800 && wep <= 869 && (wep < 836 || wep > 862)) {
			HasArrows = true;
			ArrowSlot = false;
		} else if (wep == 6522) {
			HasArrows = true;
			ArrowSlot = false;
		}
	}

	public void calcSpecialDamage() {
	}

	public boolean useSpell = false;
	public boolean useBow = false;
	public boolean HasSecondHit = false;

	public boolean fullDharokEquipped() {
		return (playerEquipment[playerHat] == 4716
				&& playerEquipment[playerChest] == 4720
				&& playerEquipment[playerLegs] == 4722 && playerEquipment[playerWeapon] == 4718);
	}

	public boolean FullGuthanEquipped() {
		return (playerEquipment[playerHat] == 4724
				&& playerEquipment[playerChest] == 4728
				&& playerEquipment[playerLegs] == 4730 && playerEquipment[playerWeapon] == 4726);
	}

	public boolean FullVeracEquipped() {
		return (playerEquipment[playerHat] == 4753
				&& playerEquipment[playerChest] == 4757
				&& playerEquipment[playerLegs] == 4759 && playerEquipment[playerWeapon] == 4755);
	}

	public boolean fullAhrimsEquipped() {
		return (playerEquipment[playerHat] == 4708
				&& playerEquipment[playerChest] == 4712
				&& playerEquipment[playerLegs] == 4714 && playerEquipment[playerWeapon] == 4710);
	}

	public boolean FullKarilsEquipped() {
		return (playerEquipment[playerHat] == 4732
				&& playerEquipment[playerChest] == 4736
				&& playerEquipment[playerLegs] == 4738 && playerEquipment[playerWeapon] == 4734);
	}

	public boolean FullToragsEquipped() {
		return (playerEquipment[playerHat] == 4745
				&& playerEquipment[playerChest] == 4749
				&& playerEquipment[playerLegs] == 4751 && playerEquipment[playerWeapon] == 4747);
	}

	public boolean fullRaVoidEquipped() {
		return (playerEquipment[playerHat] == 8023
				&& playerEquipment[playerChest] == 8019
				&& playerEquipment[playerLegs] == 8020 && playerEquipment[playerHands] == 8021);
	}

	public boolean fullMeVoidEquipped() {
		return (playerEquipment[playerHat] == 8024
				&& playerEquipment[playerChest] == 8019
				&& playerEquipment[playerLegs] == 8020 && playerEquipment[playerHands] == 8021);
	}

	public boolean fullMaVoidEquipped() {
		return (playerEquipment[playerHat] == 8022
				&& playerEquipment[playerChest] == 8019
				&& playerEquipment[playerLegs] == 8020 && playerEquipment[playerHands] == 8021);
	}

	public int boltEffect = -1;
	public int[] thrownaxeIndex = new int[5];
	public int[] thrownaxeXIndex = new int[5];
	public int[] thrownaxeYIndex = new int[5];
	public int axeSpecDelay = 0;

	public boolean hasBeenAxeHit(int npcIndex) {
		for (int i = 0; i < 5; i++) {
			if (thrownaxeIndex[i] == npcIndex) {
				return true;
			}
		}
		return false;
	}

	public int axeSpecIndex() {
		for (int i = 0; i < 5; i++) {
			if (thrownaxeIndex[i] == 0) {
				return i;
			}
		}
		return -1;
	}

	public int getLastAxeSpecIndex() {
		int idx = -1;
		for (int i = 0; i < 5; i++) {
			if (thrownaxeIndex[i] != 0) {
				idx = i;
			}
		}
		return idx;
	}

	public void calcAxe() {
		boolean didHit = false;
		int idx = axeSpecIndex();
		if (idx == -1) {
			resetAxeSpec();
			return;
		}
		for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc == null || hasBeenAxeHit(i) || npc.CurrentHp <= 0) {
				continue;
			}
			if (WithinDistance(thrownaxeXIndex[idx - 1],
					thrownaxeYIndex[idx - 1], npc.absX, npc.absY, 4)) {
				axeSpecDelay = 2;
				didHit = true;
				thrownaxeXIndex[idx] = npc.absX;
				thrownaxeYIndex[idx] = npc.absY;
				thrownaxeIndex[idx] = i;
				int offsetX = (thrownaxeXIndex[idx - 1] - npc.absX) * -1;
				int offsetY = (thrownaxeYIndex[idx - 1] - npc.absY) * -1;
				createProjectile(thrownaxeYIndex[idx - 1],
						thrownaxeXIndex[idx - 1], offsetY, offsetX, 258, 43,
						31, 60, i + 1);
				for (int q = 0; q < 5; q++) {
					if (delayedDmgSlot[q] == 0) {
						delayedDmgSlot[q] = thrownaxeIndex[idx];
						delayedDmgTarget[q] = 0;
						delayedDmgType[q] = 1;
						delayedDmgHit[q] = Misc.random(playerMaxHit);
						delayedDmgTime[q] = 4;
						break;
					}
				}
				break;
			}
		}
		if (!didHit) {
			resetAxeSpec();
		}
	}

	public void resetAxeSpec() {
		for (int i = 0; i < 5; i++) {
			thrownaxeXIndex[i] = 0;
			thrownaxeYIndex[i] = 0;
			thrownaxeIndex[i] = 0;
		}
	}

	public void combatProcess() {
		if (duelStartDelay == 6) {
			displayText("3");
		} else if (duelStartDelay == 4) {
			displayText("2");
		} else if (duelStartDelay == 2) {
			displayText("1");
		} else if (duelStartDelay == 0) {
			displayText("FIGHT!");
		}
		if (axeSpecDelay == 0) {
			calcAxe();
		}
		applyFollowing();
		applyDamages();
	}

	public void applyDamages() {
		for (int i = 0; i < delayedDmgSlot.length; i++) {
			delayedDmgTime[i]--;
			if (delayedDmgTime[i] == 0) {
				int slotToHit = delayedDmgSlot[i];
				int slotSelected = i;
				int whatToHit = delayedDmgTarget[i];
				int hitType = delayedDmgType[i];
				int spellType = delayedSpellId[i];
				if (whatToHit == 0) {
					if (hitType == 2) {
						applyMagicDamageNpc(slotToHit, slotSelected);
					} else if (hitType == 1) {
						applyRangeDamageNpc(slotToHit, slotSelected);
					} else if (hitType == 0) {
						applyMeleeDamageNpc(slotToHit, slotSelected);
					}
				} else if (whatToHit == 1) {
					if (hitType == 2) {
						applyMagicDamagePlayer(slotToHit, slotSelected);
					} else if (hitType == 1) {
						applyRangeDamagePlayer(slotToHit, slotSelected);
					} else if (hitType == 0) {
						applyMeleeDamagePlayer(slotToHit, slotSelected);
					}
					if (spellType != -10) {
						applyAfterEffects(slotToHit, i);
					}
				}
				damageDone += delayedDmgHit[slotSelected];
				if (hitType == 2 && spellType != -10) {
					addSkillXP((4 * magicXpInc) * damageHit, 6);
					addSkillXP((2 * magicXpInc) * damageHit, 3);
				} else if (hitType == 1 && spellType != -10) {
					if (skillId != 3) {
						addSkillXP((4 * rangedXpInc)
								* delayedDmgHit[slotSelected], playerRanged);
						addSkillXP((2 * rangedXpInc)
								* delayedDmgHit[slotSelected], playerHitpoints);
					} else {
						addSkillXP((2 * rangedXpInc)
								* delayedDmgHit[slotSelected], playerRanged);
						addSkillXP((2 * rangedXpInc)
								* delayedDmgHit[slotSelected], playerDefence);
						addSkillXP((2 * rangedXpInc)
								* delayedDmgHit[slotSelected], playerHitpoints);
					}
				} else if (hitType == 0 && spellType != -10) {
					if (skillId != 3) {
						addSkillXP((4 * combatXpInc)
								* delayedDmgHit[slotSelected], skillId);
						addSkillXP((2 * combatXpInc)
								* delayedDmgHit[slotSelected], playerHitpoints);
					} else {
						addSkillXP((2 * combatXpInc)
								* delayedDmgHit[slotSelected], playerAttack);
						addSkillXP((2 * combatXpInc)
								* delayedDmgHit[slotSelected], playerDefence);
						addSkillXP((2 * combatXpInc)
								* delayedDmgHit[slotSelected], playerStrength);
						addSkillXP((2 * combatXpInc)
								* delayedDmgHit[slotSelected], playerHitpoints);
					}
				}
				boltEffect = -1;
				delayedDmgSlot[slotSelected] = 0;
				delayedDmgTarget[slotSelected] = 0;
				delayedDmgType[slotSelected] = 0;
				delayedDmgHit[slotSelected] = 0;
				delayedSpellId[slotSelected] = 0;
			}
		}
	}

	public void applyPoisonPlayer(int wepId, int arrowId, int pId) {
		Client p = Server.s.playerHandler.clients[pId];
		if (p == null) {
			return;
		}
		if (Misc.random(100) <= 30) {
			if (arrowId >= 5622 && arrowId <= 5627) {
				if (p.poisonDelay == -1) {
					p.poisonDamage = 6;
					p.poisonDelay = 240;
				}
			} else if (wepId >= 5635 && wepId <= 5641) {
				if (p.poisonDelay == -1) {
					p.poisonDamage = 6;
					p.poisonDelay = 240;
				}
			} else if (wepId >= 5686 && wepId <= 5702) {
				if (p.poisonDelay == -1) {
					p.poisonDamage = 6;
					p.poisonDelay = 240;
				}
			} else if (wepId >= 5718 && wepId <= 5730) {
				if (p.poisonDelay == -1) {
					p.poisonDamage = 6;
					p.poisonDelay = 240;
				}
			}
		}
	}

	public void applyPoisonNPC(int wepId, int arrowId, int nId) {
		NPC n = Server.s.npcHandler.npcs[nId];
		if (n == null) {
			return;
		}
		if (Misc.random(100) <= 30) {
			if (arrowId >= 5622 && arrowId <= 5627) {
				if (n.poisonDelay == -1) {
					n.poisonDelay = 240;
				}
			} else if (wepId >= 5635 && wepId <= 5641) {
				if (n.poisonDelay == -1) {
					n.poisonDelay = 240;
				}
			} else if (wepId >= 5686 && wepId <= 5702) {
				if (n.poisonDelay == -1) {
					n.poisonDelay = 240;
				}
			} else if (wepId >= 5718 && wepId <= 5730) {
				if (n.poisonDelay == -1) {
					n.poisonDelay = 240;
				}
			}
		}
	}

	public void applyFollowing() {
		if (followId > 0) {
			Client p = Server.s.playerHandler.clients[followId];
			if (p != null) {
				if (p.IsDead || p.NewHp <= 0) {
					follow(0, 3, 1);
					return;
				}
				if (!WithinDistance(p.absX, p.absY, absX, absY, 25)) {
					follow(0, 3, 1);
					return;
				}
			} else if (p == null) {
				follow(0, 3, 1);
			}
		} else if (followId2 > 0) {
			NPC npc = Server.s.npcHandler.npcs[followId2];
			if (npc != null) {
				if (npc.IsDead || npc.CurrentHp <= 0) {
					follow(0, 3, 1);
					return;
				}
				if (!WithinDistance(npc.absX, npc.absY, absX, absY, 25)) {
					follow(0, 3, 1);
					return;
				}
			} else if (npc == null) {
				follow(0, 3, 1);
			}
		}
	}

	public void applyAfterEffects(int targetSlot, int dmgSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		if (p == null) {
			return;
		}
		int dmg = delayedDmgHit[dmgSlot];
		if (HeadPray == 6 && dmg > 3) {
			double Drained = (dmg * 0.25);
			Drained = Math.round(Drained - 0.5f);
			p.playerLevel[5] -= Drained;
			if (p.playerLevel[5] <= 0) {
				p.playerLevel[5] = 0;
			}
			p.setSkillLevel(5);
		}
		if (p.playerEquipment[playerRing] == 2550) {
			double RecoilDmg = (dmg * 0.1);
			RecoilDmg = Math.round(RecoilDmg - 0.5f);
			if (RecoilDmg == 0) {
				RecoilDmg = 1;
			}
			hitDiff2 = (int) RecoilDmg;
			updateHp(hitDiff2, false);
			updateRequired = true;
			hitUpdateRequired2 = true;
			p.Recoil();
		}
		if (p.vengenceDelay > 0 && dmg > 0) {
			double vengDmg = (dmg / 1.2);
			vengDmg = Math.round(vengDmg - 0.5f);
			if (vengDmg == 0) {
				vengDmg = 1;
			}
			hitDiff2 = (int) vengDmg;
			updateHp(hitDiff2, false);
			updateRequired = true;
			hitUpdateRequired2 = true;
			p.vengenceDelay = -1;
			p.displayText("Taste vengeance!");
		}
	}

	public void applyMeleeDamagePlayer(int targetSlot, int dmgSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		if (p == null) {
			return;
		}
		/*
		 * if(p.solEffect) { p.delayedDmgHit[dmgSlot] =
		 * (int)(p.delayedDmgHit[dmgSlot] / 2); } //testing something tom
		 * nothing personal :)
		 */
		if (UsingSpecial) {
			if (CheckIfDoubleHitter()) {
				if (firstSpecDone) {
					UsingSpecial = false;
					HasSecondHit = false;
				}
			} else {
				UsingSpecial = false;
				HasSecondHit = false;
				setSpec(false);

			}
			firstSpecDone = true;
		}
		if (p.teleX > 0 && p.teleY > 0) {
			return;
		}
		if (p.meleeDelay < -1 || p.meleeDelay > 3) {
			p.startAnimation(p.GetBlockEmote(p
					.getItemName(p.playerEquipment[p.playerWeapon])), 0);
		}
		p.KilledBy[playerId] += delayedDmgHit[dmgSlot];
		p.updateHp(delayedDmgHit[dmgSlot], false);
		if (p.hitUpdateRequired) {
			p.hitDiff2 = delayedDmgHit[dmgSlot];
			p.hitUpdateRequired2 = true;
			p.updateRequired = true;
		} else {
			p.hitDiff = delayedDmgHit[dmgSlot];
			p.hitUpdateRequired = true;
			p.updateRequired = true;
		}
	}

	public void applyMeleeDamageNpc(int targetSlot, int proSlot) {
		if (UsingSpecial) {
			if (CheckIfDoubleHitter()) {
				if (firstSpecDone) {
					UsingSpecial = false;
					HasSecondHit = false;
					setSpec(false);
				}
				firstSpecDone = true;
			} else {
				UsingSpecial = false;
				HasSecondHit = false;
				setSpec(false);
			}
		} else {
			firstSpecDone = false;
		}
		NPC npc = Server.s.npcHandler.npcs[targetSlot];
		if (npc == null) {
			return;
		}
		if (npc.NpcType != 2745) {
			npc.playAnimation(npc.GetBlockEmote());
		}
		npc.KilledBy[playerId] += delayedDmgHit[proSlot];
		npc.CurrentHp -= delayedDmgHit[proSlot];
		if (npc.hitUpdateRequired) {
			npc.hitDiff2 = delayedDmgHit[proSlot];
			npc.hitUpdateRequired2 = true;
			npc.updateRequired = true;
		} else {
			npc.hitDiff = delayedDmgHit[proSlot];
			npc.hitUpdateRequired = true;
			npc.updateRequired = true;
		}
		npc.StartKilling = playerId;
		npc.RandomWalk = false;
		npc.IsUnderAttack = true;
	}

	public void applyRangeDamagePlayer(int targetSlot, int dmgSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		if (p == null) {
			return;
		}
		if (UsingSpecial) {
			if (CheckIfDoubleHitter()) {
				if (firstSpecDone) {
					UsingSpecial = false;
					HasSecondHit = false;
					setSpec(false);
				}
			} else {
				UsingSpecial = false;
				HasSecondHit = false;
				setSpec(false);
			}
			firstSpecDone = true;
		}
		if (p.teleX > 0 && p.teleY > 0) {
			return;
		}
		if (p.meleeDelay < -1 || p.meleeDelay > 3) {
			p.startAnimation(p.GetBlockEmote(p
					.getItemName(p.playerEquipment[p.playerWeapon])), 0);
		}
		p.KilledBy[playerId] += delayedDmgHit[dmgSlot];
		p.updateHp(delayedDmgHit[dmgSlot], false);
		if (p.hitUpdateRequired) {
			p.hitDiff2 = delayedDmgHit[dmgSlot];
			p.hitUpdateRequired2 = true;
			p.updateRequired = true;
		} else {
			p.hitDiff = delayedDmgHit[dmgSlot];
			p.hitUpdateRequired = true;
			p.updateRequired = true;
		}
	}

	public void applyMagicDamagePlayer(int targetSlot, int dmgSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		if (p != null) {
			if (p.teleX > 0 && p.teleY > 0) {
				return;
			}
			if (p.meleeDelay < -1 || p.meleeDelay > 3) {
				p.startAnimation(p.GetBlockEmote(p
						.getItemName(p.playerEquipment[p.playerWeapon])), 0);
			}
			if (damageHit != 0) {
				p.KilledBy[playerId] += delayedDmgHit[dmgSlot];
				p.updateHp(delayedDmgHit[dmgSlot], false);
				if (p.hitUpdateRequired) {
					p.hitDiff2 = delayedDmgHit[dmgSlot];
					p.hitUpdateRequired2 = true;
					p.updateRequired = true;
				} else {
					p.hitDiff = delayedDmgHit[dmgSlot];
					p.hitUpdateRequired = true;
					p.updateRequired = true;
				}
				applySpellEffectPlayer2(targetSlot, dmgSlot);
			}
		}
		if (!autocastSpell) {
			spellCastedId = 0;
		}
	}

	public void applyRangeDamageNpc(int targetSlot, int dmgSlot) {
		if (UsingSpecial) {
			if (CheckIfDoubleHitter()) {
				if (firstSpecDone) {
					UsingSpecial = false;
					HasSecondHit = false;
					setSpec(false);
				}
			} else {
				UsingSpecial = false;
				HasSecondHit = false;
				setSpec(false);
			}
			firstSpecDone = true;
		}
		NPC npc = Server.s.npcHandler.npcs[targetSlot];
		if (npc.NpcType != 2745) {
			npc.playAnimation(npc.GetBlockEmote());
		}
		npc.KilledBy[playerId] += delayedDmgHit[dmgSlot];
		npc.CurrentHp -= delayedDmgHit[dmgSlot];
		if (npc.hitUpdateRequired) {
			npc.hitDiff2 = delayedDmgHit[dmgSlot];
			npc.hitUpdateRequired2 = true;
			npc.updateRequired = true;
		} else {
			npc.hitDiff = delayedDmgHit[dmgSlot];
			npc.hitUpdateRequired = true;
			npc.updateRequired = true;
		}
		npc.StartKilling = playerId;
		npc.RandomWalk = false;
		npc.IsUnderAttack = true;
	}

	public void applyMagicDamageNpc(int targetSlot, int dmgSlot) {
		NPC npc = Server.s.npcHandler.npcs[targetSlot];
		if (npc != null) {
			if (npc.NpcType != 2745) {
				npc.playAnimation(npc.GetBlockEmote());
			}
			if (damageHit != 0) {
				applySpellEffectNpc2(targetSlot, dmgSlot);
				npc.KilledBy[playerId] += delayedDmgHit[dmgSlot];
				npc.CurrentHp -= delayedDmgHit[dmgSlot];
				if (npc.hitUpdateRequired) {
					npc.hitDiff2 = delayedDmgHit[dmgSlot];
					npc.hitUpdateRequired2 = true;
					npc.updateRequired = true;
				} else {
					npc.hitDiff = delayedDmgHit[dmgSlot];
					npc.hitUpdateRequired = true;
					npc.updateRequired = true;
				}
			}
			npc.StartKilling = playerId;
			npc.RandomWalk = false;
			npc.IsUnderAttack = true;
		}
		if (!autocastSpell) {
			spellCastedId = 0;
		}
	}

	public void applySpellEffectNpc(int targetSlot) {
		NPC npc = Server.s.npcHandler.npcs[targetSlot];
		if (spellCastedId == 1572) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 10;
			}
		} else if (spellCastedId == 1582) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 20;
			}
		} else if (spellCastedId == 1592) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 30;
			}
		} else if (spellCastedId == 12861) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 10;
			}
		} else if (spellCastedId == 12881) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 20;
			}
		} else if (spellCastedId == 12871) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 30;
			}
		} else if (spellCastedId == 12891) {
			if (npc.EntangleDelay <= -4) {
				npc.EntangleDelay = 40;
			}
		} else if (spellCastedId == 12901 || spellCastedId == 12919
				|| spellCastedId == 12911 || spellCastedId == 12929) {
			updateHp(damageHit / 4, true);
		} else if (spellCastedId == 12939 || spellCastedId == 12963
				|| spellCastedId == 12951 || spellCastedId == 12975) {
			if (npc.poisonDelay == -1) {
				npc.poisonDelay = 240;
			}
		} else if (spellCastedId == 1153 || spellCastedId == 1157
				|| spellCastedId == 1161) {
			if (npc.statDrain <= (npc.DefLvl - (npc.DefLvl * 0.1))) {
				npc.statDrain = npc.DefLvl * 0.1;
			}
		}
		if (spellCastedId == 1543 || spellCastedId == 1542
				|| spellCastedId == 1562) {
			if (npc.statDrain <= (npc.DefLvl - (npc.DefLvl * 0.15))) {
				npc.statDrain = npc.DefLvl * 0.15;
			}
		} else if (spellCastedId == 12987 || spellCastedId == 13011
				|| spellCastedId == 12999 || spellCastedId == 12999) {
			if (npc.statDrain <= (npc.DefLvl - (npc.DefLvl * 0.05))) {
				npc.statDrain = npc.DefLvl * 0.05;
			}
		} else if (spellCastedId == 13023) {
			if (npc.statDrain <= (npc.DefLvl - (npc.DefLvl * 0.1))) {
				npc.statDrain = npc.DefLvl * 0.1;
			}
		}
	}

	public void applySpellEffectNpc2(int targetSlot, int dmgSlot) {
		NPC npc = Server.s.npcHandler.npcs[targetSlot];
		int spellId = delayedSpellId[dmgSlot];
		if (spellId == 12881) {
			multiIceAtk(363, 20, 0, 22);
		} else if (spellId == 12891) {
			multiIceAtk(369, 40, 0, 30);
		} else if (spellId == 12901 || spellId == 12919 || spellId == 12911
				|| spellId == 12929) {
			if (spellId == 12919) {
				multiBloodAtk(376, 100, 21);
			}
			if (spellId == 12929) {
				multiBloodAtk(377, 0, 29);
			}
		} else if (spellId == 12939 || spellId == 12963 || spellId == 12951
				|| spellId == 12975) {
			if (spellId == 12963) {
				multiSmokeAtk(387, 100, 19);
			}
			if (spellId == 12975) {
				multiSmokeAtk(391, 100, 27);
			}
		} else if (spellId == 13011) {
			multiAtk(381, 0, 20, 3);
		} else if (spellId == 13023) {
			multiAtk(383, 100, 28, 3);
		}
	}

	public void applySpellEffectPlayer(int targetSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		if (spellCastedId == 1572) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 10;
			}
		} else if (spellCastedId == 1582) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 20;
			}
		} else if (spellCastedId == 1592) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 30;
			}
		} else if (spellCastedId == 12861) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 10;
			}
		} else if (spellCastedId == 12881) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 20;
			}
		} else if (spellCastedId == 12871) {
			if (p.EntangleDelay <= -4) {
				p.stopMovement();
				p.EntangleDelay = 30;
			}
		} else if (spellCastedId == 12987 || spellCastedId == 13011
				|| spellCastedId == 12999 || spellCastedId == 12999) {
			if (p.playerLevel[playerAttack] > (p
					.getLevelForXP(p.playerXP[playerAttack]) - (int) (p
					.getLevelForXP(p.playerXP[playerAttack]) * 0.1))) {
				p.playerLevel[playerAttack] = p
						.getLevelForXP(p.playerXP[playerAttack])
						- (int) (p.getLevelForXP(p.playerXP[playerAttack]) * 0.1);
				p.setSkillLevel(playerAttack);
			}
		} else if (spellCastedId == 13023) {
			if (p.playerLevel[playerAttack] > (p
					.getLevelForXP(p.playerXP[playerAttack]) - (int) (p
					.getLevelForXP(p.playerXP[playerAttack]) * 0.15))) {
				p.playerLevel[playerAttack] = p
						.getLevelForXP(p.playerXP[playerAttack])
						- (int) (p.getLevelForXP(p.playerXP[playerAttack]) * 0.15);
				p.setSkillLevel(playerAttack);
			}
		} else if (spellCastedId == 1153) {
			if (p.playerLevel[playerAttack] > (p
					.getLevelForXP(p.playerXP[playerAttack]) - (int) (p
					.getLevelForXP(p.playerXP[playerAttack]) * 0.05))) {
				p.playerLevel[playerAttack] = p
						.getLevelForXP(p.playerXP[playerAttack])
						- (int) (p.getLevelForXP(p.playerXP[playerAttack]) * 0.05);
				p.setSkillLevel(playerAttack);
			}
		} else if (spellCastedId == 1157) {
			if (p.playerLevel[playerStrength] > (p
					.getLevelForXP(p.playerXP[playerStrength]) - (int) (p
					.getLevelForXP(p.playerXP[playerStrength]) * 0.05))) {
				p.playerLevel[playerStrength] = p
						.getLevelForXP(p.playerXP[playerStrength])
						- (int) (p.getLevelForXP(p.playerXP[playerStrength]) * 0.05);
				p.setSkillLevel(playerStrength);
			}
		} else if (spellCastedId == 1161) {
			if (p.playerLevel[playerDefence] > (p
					.getLevelForXP(p.playerXP[playerDefence]) - (int) (p
					.getLevelForXP(p.playerXP[playerDefence]) * 0.05))) {
				p.playerLevel[playerDefence] = p
						.getLevelForXP(p.playerXP[playerDefence])
						- (int) (p.getLevelForXP(p.playerXP[playerDefence]) * 0.05);
				p.setSkillLevel(playerDefence);
			}
		} else if (spellCastedId == 1562) {
			if (p.playerLevel[playerAttack] > (p
					.getLevelForXP(p.playerXP[playerAttack]) - (int) (p
					.getLevelForXP(p.playerXP[playerAttack]) * 0.1))) {
				p.playerLevel[playerAttack] = p
						.getLevelForXP(p.playerXP[playerAttack])
						- (int) (p.getLevelForXP(p.playerXP[playerAttack]) * 0.1);
				p.setSkillLevel(playerAttack);
			}
		} else if (spellCastedId == 1543) {
			if (p.playerLevel[playerStrength] > (p
					.getLevelForXP(p.playerXP[playerStrength]) - (int) (p
					.getLevelForXP(p.playerXP[playerStrength]) * 0.1))) {
				p.playerLevel[playerStrength] = p
						.getLevelForXP(p.playerXP[playerStrength])
						- (int) (p.getLevelForXP(p.playerXP[playerStrength]) * 0.1);
				p.setSkillLevel(playerStrength);
			}
		} else if (spellCastedId == 1542) {
			if (p.playerLevel[playerDefence] > (p
					.getLevelForXP(p.playerXP[playerDefence]) - (int) (p
					.getLevelForXP(p.playerXP[playerDefence]) * 0.1))) {
				p.playerLevel[playerDefence] = p
						.getLevelForXP(p.playerXP[playerDefence])
						- (int) (p.getLevelForXP(p.playerXP[playerDefence]) * 0.1);
				p.setSkillLevel(playerDefence);
			}
		} else if (spellCastedId == 12891) {
			if (p.EntangleDelay <= -4) {
				p.EntangleDelay = 40;
				p.stopMovement();
			}
		} else if (spellCastedId == 12901 || spellCastedId == 12919
				|| spellCastedId == 12911 || spellCastedId == 12929) {
			updateHp(damageHit / 4, true);
		} else if (spellCastedId == 12939 || spellCastedId == 12963
				|| spellCastedId == 12951 || spellCastedId == 12975) {
			if (p.poisonDelay == -1) {
				p.poisonDamage = 6;
				p.poisonDelay = 240;
			}
		} else if (spellCastedId == 12445) {
			if (p.teleBlockDelay <= 0) {
				p.teleBlockDelay = 360;
			}
		}
	}

	public void applySpellEffectPlayer2(int targetSlot, int dmgSlot) {
		Client p = (Client) Server.s.playerHandler.players[targetSlot];
		int spellId = delayedSpellId[dmgSlot];
		if (spellId == 12881) {
			multiIceAtkPlr(363, 20, 0, 22);
		} else if (spellId == 12891) {
			multiIceAtkPlr(369, 40, 0, 30);
		} else if (spellId == 12901 || spellId == 12919 || spellId == 12911
				|| spellId == 12929) {
			if (spellId == 12919) {
				multiBloodAtkPlr(376, 100, 21);
			}
			if (spellId == 12929) {
				multiBloodAtkPlr(377, 0, 29);
			}
		} else if (spellId == 12939 || spellId == 12963 || spellId == 12951
				|| spellId == 12975) {
			if (spellId == 12963) {
				multiSmokeAtkPlr(387, 100, 19);
			}
			if (spellId == 12975) {
				multiSmokeAtkPlr(391, 100, 27);
			}
		}
		if (spellId == 13011) {
			multiAtkPlr(381, 0, 20);
		}
		if (spellId == 13023) {
			multiAtkPlr(383, 100, 28);
		}
	}

	public void npcMenu(int npcId) {
		ClearFrame8134();
		changeText126("@dre@" + getNpcName(npcId), 8144);
		changeText126("@dbl@Max Hitpoints: " + getNpcHealth(npcId), 8148);
		changeText126("@dbl@Max Hit: " + getNpcHit(npcId), 8149);
		showInterface(8134);
	}

	public int getNpcHealth(int NpcID) {
		for (int i = 1; i < Server.s.npcHandler.maxListedNPCs; i++) {
			if (Server.s.npcHandler.NpcType[i] == NpcID) {
				return Server.s.npcHandler.MaxHp[i];
			}
		}
		return 0;
	}

	public int getNpcHit(int NpcID) {
		for (int i = 1; i < Server.s.npcHandler.maxListedNPCs; i++) {
			if (Server.s.npcHandler.NpcType[i] == NpcID) {
				return Server.s.npcHandler.MaxHit[i];
			}
		}
		return 0;
	}

	public void spellOnNpc() {
		try {
			if (!useNPCSpell) {
				attacknpc = inStream.readSignedWordBigEndianA();
				spellCastedId = inStream.readSignedWordA();
				useNPCSpell = true;
			}
			if (Server.s.npcHandler.npcs[attacknpc] == null) {
				return;
			}
			NPC npc = Server.s.npcHandler.npcs[attacknpc];
			int nX = npc.absX;
			int nY = npc.absY;
			if (!WithinDistance(nX, nY, absX, absY, 8)) {
				return;
			}
			if (WithinDistance(nX, nY, absX, absY, 8) && meleeDelay > 0) {
				stopMovement();
				return;
			}
			TurnPlayerTo(attacknpc);
			if (WithinDistance(nX, nY, absX, absY, 8)) {
				stopMovement();
			}
			useNPCSpell = false;
			if (!checkNpcCombatStatus()) {
				return;
			}
			int offsetX = (absX - nX) * -1;
			int offsetY = (absY - nY) * -1;
			grabSpellData();
			if (npc.NpcType == 3782) {
				return;
			}
			if (npc.NpcType >= 239 && npc.NpcType <= 247) {
				sendMessage("You can only melee this monster!");
				resetAtk();
				return;
			}
			if (npc.NpcType == 1355) {
				sendMessage("You can only range this monster!");
				resetAtk();
				return;
			}
			if (npc.NpcType == 1354) {
				sendMessage("You can only melee this monster!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1190 && playerEquipment[playerWeapon] != 2415) {
				sendMessage("You need a Saradomin staff to cast this spell!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1191 && playerEquipment[playerWeapon] != 2416) {
				sendMessage("You need a Guthix staff to cast this spell.");
				resetAtk();
				return;
			}
			if (spellCastedId == 1192 && playerEquipment[playerWeapon] != 2417) {
				sendMessage("You need a Zamorak staff to cast this spell.");
				resetAtk();
				return;
			}
			if (spellCastedId == 12037 && playerEquipment[playerWeapon] != 4170) {
				sendMessage("You need a Slayer's staff to cast this spell.");
				resetAtk();
				return;
			}
			if (spellCastedId == 18788) {
				if (playerLevel[playerMagic] >= 66) {
					if (InvItemAmt(7980) >= 1 && InvItemAmt(564) >= 1
							&& InvItemAmt(558) >= 1) {
						npcMenu(attacknpc);
						deleteItem(7980, GetItemSlot(7980), 1);
						deleteItem(564, GetItemSlot(564), 1);
						deleteItem(558, GetItemSlot(558), 1);
						playGraphic(524, 0, 250);
						startAnimation(1819, 0);
					} else {
						sendMessage("You need an astral, cosmic, and mind rune to cast this spell.");
					}
				} else {
					sendMessage("You need atleast 66 magic to cast this spell.");
				}
				resetAtk();
				return;
			}
			if (playerLevel[6] >= Lvl) {
				if (hasRunesNeeded()) {
					if (meleeDelay <= 0
							&& WithinDistance(nX, nY, absX, absY, 8)) {
						int maxAtk = Misc.random(mageAtk());
						int nDef = Misc.random(npc.DefPower());
						if (spellSet == 2) {
							SetSidebar(6, 18787);
						}
						inCombat = true;
						autocastSpell = false;
						npc.combatWith = playerId;
						combatDelay = 30;
						startAnimation(Emote, 0);
						if (PlayerGfx > 0) {
							playGraphic(PlayerGfx, 0, PlayerHeight);
						}
						if (npc.DefType == 2) {
							nDef -= (nDef * 0.15);
						}
						if (ProGfx > 0) {
							createProjectile(absY, absX, offsetY, offsetX,
									ProGfx, 43, 31, calcDistanceSpeed(nX, nY),
									attacknpc + 1);
							if (maxAtk > nDef) {
								createNpcGfx(EndGfx, calcDistanceSpeed(nX, nY),
										attacknpc, EndHeight);
								damageHit = 1;
							} else {
								createNpcGfx(85, calcDistanceSpeed(nX, nY),
										attacknpc, 100);
								damageHit = 0;
							}
						}
						if (ProGfx == -1) {
							if (maxAtk > nDef) {
								createNpcGfx(EndGfx, calcDistanceSpeed(nX, nY),
										attacknpc, EndHeight);
								damageHit = 1;
							} else {
								createNpcGfx(85, calcDistanceSpeed(nX, nY),
										attacknpc, 100);
								damageHit = 0;
							}
						}
						if (damageHit == 1) {
							if (spellCastedId >= 1190 && spellCastedId <= 1192)
								damageHit = godSpellDamage(spellCastedId);
							else if (spellCastedId == 12037)
								damageHit = Misc
										.random((10 + (int) (playerLevel[playerMagic] * 0.1)) - 1) + 1;
							else
								damageHit = Misc.random(Server.s.magicHandler
										.GetSpellMaxHit(spellCastedId) - 1) + 1;
							if ((npc.CurrentHp - damageHit) <= 0)
								damageHit = npc.CurrentHp;
							applySpellEffectNpc(attacknpc);
						}
						deleteItem(Rune1, GetItemSlot(Rune1), Rune1Am);
						deleteItem(Rune2, GetItemSlot(Rune2), Rune2Am);
						deleteItem(Rune3, GetItemSlot(Rune3), Rune3Am);
						deleteItem(Rune4, GetItemSlot(Rune4), Rune4Am);
						for (int i = 0; i < 5; i++) {
							if (delayedDmgSlot[i] == 0) {
								delayedDmgSlot[i] = attacknpc;
								delayedDmgTarget[i] = 0;
								delayedDmgType[i] = 2;
								delayedDmgHit[i] = damageHit;
								delayedSpellId[i] = spellCastedId;
								// if (ProGfx > 0)
								// {
								delayedDmgTime[i] = calcDistanceDamage(nX, nY);
								// }
								// else
								// {
								// if (spellCastedId == 12951 || spellCastedId
								// == 12999 || spellCastedId == 12911 ||
								// spellCastedId == 12871)
								// delayedDmgTime[i] = 3;
								// }
								break;
							}
						}
						// if (ProGfx > 0)
						// {
						meleeDelay = calcDistanceDamage(nX, nY) + 3;
						// }
						// else
						// {
						// meleeDelay = 5;
						// }
					}
				} else {
					sendMessage("You do not have enough runes to cast this spell.");
					resetAtk();
				}
			} else {
				sendMessage("You need a higher Magic level to cast this spell.");
				resetAtk();
			}
		} catch (Exception e) {
		}
	}

	public void viewStats(int pId) {
		ClearFrame8134();
		Client p = (Client) Server.s.playerHandler.players[pId];
		changeText126("@dre@" + p.playerName, 8144);
		changeText126(
				"@dbl@Attack: " + p.getLevelForXP(p.playerXP[playerAttack]),
				8148);
		changeText126(
				"@dbl@Strength: " + p.getLevelForXP(p.playerXP[playerStrength]),
				8149);
		changeText126(
				"@dbl@Defence: " + p.getLevelForXP(p.playerXP[playerDefence]),
				8150);
		changeText126(
				"@dbl@Magic: " + p.getLevelForXP(p.playerXP[playerMagic]), 8151);
		changeText126(
				"@dbl@Ranged: " + p.getLevelForXP(p.playerXP[playerRanged]),
				8152);
		changeText126(
				"@dbl@Hitpoints: "
						+ p.getLevelForXP(p.playerXP[playerHitpoints]), 8153);
		showInterface(8134);
	}

	public void ActionButtons() {
		int ButtonId = inStream.readUnsignedWord();
		int wildLvl = (((absY - 3520) / 8) + 1);
		switch (ButtonId) {
		case 8654:
			attackSkillMenu();
			break;
		case 8656:
			miningSkillMenu();
			break;
		case 8660:
			defenceSkillMenu();
			break;
		case 8662:
			fishingSkillMenu();
			break;
		case 8663:
			rangedSkillMenu();
			break;
		case 8664:
			thiefSkillMenu();
			break;
		case 8671:
			woodcuttingSkillMenu();
			break;
		case 8672:
			runecraftingSkillMenu();
			break;
		case 8669:
			magicSkillMenu();
			break;
		case 8661:
			herbloreSkillMenu();
			break;
		case 18860:
			int rights = Server.s.playerHandler.getClanRights(playerName);
			if (rights == 3) {
				int clanId = Server.s.playerHandler.getClanId(playerName);
				if (Server.s.playerHandler.deleteClan(playerName, clanId)) {
					sendMessage("You have deleted your clan.");
					buildClanInterface();
				}

			}
			break;
		case 18857:
			rights = Server.s.playerHandler.getClanRights(playerName);
			if (rights != -1) {
				if (rights >= 2) {
					outStream.createFrame(187);
					XInterfaceId = 18856;
				} else if (rights == 1) {
					Server.s.playerHandler.removeClanMember(playerName,
							playerName);
					sendMessage("You have left your clan.");
					buildClanInterface();
				}
			} else {
				outStream.createFrame(187);
				XInterfaceId = 18870;
			}
			break;
		case 18858:
			rights = Server.s.playerHandler.getClanRights(playerName);
			if (rights != -1) {
				if (rights == 3) {
					outStream.createFrame(187);
					XInterfaceId = 18857;
				} else if (rights == 2) {
					Server.s.playerHandler.removeClanMember(playerName,
							playerName);
					sendMessage("You have left your clan.");
					buildClanInterface();
				}
			} else {
			}
			break;
		case 18859:
			rights = Server.s.playerHandler.getClanRights(playerName);
			if (rights != -1) {
				if (rights == 3) {
					outStream.createFrame(187);
					XInterfaceId = 18858;
				}
			} else {
			}
			break;
		case 7332:
			changeCoords(absX, absY, heightLevel);
			resetEmotes();
			playersOnline();
			break;
		case 7333:
			deathItemsMenu();
			break;
		case 7334: // Demon Slayer
			break;
		case 7336: // Dorik's Quest
			break;
		case 7383: // Dragon Slayer
			break;
		case 18796:
			if (playerLevel[playerMagic] >= 71) {
				if (InvItemAmt(7980) >= 2 && InvItemAmt(563) >= 1
						&& InvItemAmt(564) >= 2) {
					deleteItem(7980, GetItemSlot(7980), 2);
					deleteItem(563, GetItemSlot(563), 1);
					deleteItem(564, GetItemSlot(564), 2);
					playGraphic(601, 0, 100);
					startAnimation(1978, 0);
					poisonDelay = -1;
					poisonDamage = 0;
				} else {
					sendMessage("You need 2 astrals, a law, and 2 cosmic runes to cast this spell.");
				}
			} else {
				sendMessage("You need atleast 71 magic to cast this spell.");
			}
			break;
		case 18800:
			if (playerLevel[playerMagic] >= 74) {
				if (InvItemAmt(7980) >= 2 && InvItemAmt(564) >= 2
						&& InvItemAmt(558) >= 2) {
					startAnimation(1978, 0);
					deleteItem(7980, GetItemSlot(7980), 2);
					deleteItem(563, GetItemSlot(563), 2);
					deleteItem(564, GetItemSlot(564), 2);
					healPoisonedPlayers();
				} else {
					sendMessage("You need 2 astrals, 2 laws, and 2 cosmic runes to cast this spell.");
				}
			} else {
				sendMessage("You need atleast 74 magic to cast this spell.");
			}
			break;
		case 18824:
			if (playerLevel[playerMagic] >= 94) {
				if (InvItemAmt(7980) >= 4 && InvItemAmt(557) >= 10
						&& InvItemAmt(560) >= 2) {
					if (vengenceDelay <= -60) {
						deleteItem(7980, GetItemSlot(7980), 4);
						deleteItem(557, GetItemSlot(557), 10);
						deleteItem(560, GetItemSlot(560), 2);
						startAnimation(4410, 0);
						vengenceDelay = 120;
						playGraphic(617, 0, 100);
					} else {
						sendMessage("You can't use vengence again yet!");
					}
				} else {
					sendMessage("You need 4 astrals, 10 earth, and 2 death runes to cast this spell.");
				}
			} else {
				sendMessage("You need atleast 94 magic to cast this spell.");
			}
			break;
		case 18828:
			if (playerLevel[playerMagic] >= 95) {
				if (InvItemAmt(7980) >= 4 && InvItemAmt(563) >= 6
						&& InvItemAmt(565) >= 3) {
					deleteItem(7980, GetItemSlot(7980), 4);
					deleteItem(563, GetItemSlot(563), 6);
					deleteItem(565, GetItemSlot(565), 3);
					startAnimation(716, 0);
					healHpOtherP();
				} else {
					sendMessage("You need 4 astral, 6 law, and 3 blood runes to cast this spell.");
				}
			} else {
				sendMessage("You need atleast 95 magic to cast this spell.");
			}
			break;
		case 18832:
			if (playerLevel[playerMagic] >= 96) {
				if (InvItemAmt(7980) >= 3 && InvItemAmt(564) >= 2
						&& InvItemAmt(563) >= 1) {
					deleteItem(7980, GetItemSlot(7980), 3);
					deleteItem(564, GetItemSlot(564), 2);
					deleteItem(563, GetItemSlot(561), 1);
					NpcDialogue = 126;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("You need 3 astral, 2 cosmic, and 1 law rune to cast this spell.");
				}
			} else {
				sendMessage("You need atleast 96 magic to cast this spell.");
			}
			break;
		case 18767:
			pcStatSelect = playerAttack;
			changeText126("@gre@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18768:
			pcStatSelect = playerStrength;
			changeText126("@yel@Attack", 18767);
			changeText126("@gre@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);

			break;
		case 18769:
			pcStatSelect = playerDefence;
			changeText126("@yel@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@gre@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18770:
			pcStatSelect = playerRanged;
			changeText126("@yel@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@gre@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18771:
			pcStatSelect = playerMagic;
			changeText126("@yel@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@gre@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18772:
			pcStatSelect = playerHitpoints;
			changeText126("@yel@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@gre@Hitpoints", 18772);
			changeText126("@yel@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18773:
			pcStatSelect = playerPrayer;
			changeText126("@yel@Attack", 18767);
			changeText126("@yel@Strength", 18768);
			changeText126("@yel@Defence", 18769);
			changeText126("@yel@Ranged", 18770);
			changeText126("@yel@Magic", 18771);
			changeText126("@yel@Hitpoints", 18772);
			changeText126("@gre@Prayer", 18773);
			changeText126("@yel@Points: " + pcPoints, 18783);
			showInterface(18691);
			break;
		case 18779:
			RemoveAllWindows();
			if (pcPoints >= 5) {
				pcPoints -= 5;
				int xpAdd = getLevelForXP(playerXP[pcStatSelect]);
				if (pcStatSelect != 5) {
					addSkillXP((xpAdd * xpAdd * 10) / 6, pcStatSelect);
				} else {
					addSkillXP((xpAdd * xpAdd * 8) / 12, pcStatSelect);
				}
			} else {
				sendMessage("You need atleast 5 points to buy any XP.");
			}
			break;
		case 18686:
			startAnimation(3866, 0);
			break;
		case 13383:
			startAnimation(2127, 0);
			break;
		case 13384:
			startAnimation(2128, 0);
			break;
		case 18465:
			startAnimation(3543, 0);
			break;
		case 13367:
			startAnimation(2110, 0);
			break;
		case 13368:
			startAnimation(2111, 0);
			break;
		case 13369:
			startAnimation(2112, 0);
			break;
		case 13370:
			startAnimation(2113, 0);
			break;
		case 667:
			startAnimation(1131, 0);
			break;
		case 6503:
			startAnimation(1130, 0);
			break;
		case 6506:
			startAnimation(1129, 0);
			break;
		case 666:
			startAnimation(1128, 0);
			break;
		case 15166:
			startAnimation(2836, 0);
			break;
		case 18464:
			startAnimation(1306, 0);
			break;
		case 1167:
		case 13045:
			teleEffect = 1;
			changeText126("Travel To", 2493);
			changeText126("Edgeville", 2494);
			changeText126("East Dragons (Wilderness)", 2495);
			changeText126("Castle (Wilderness)", 2496);
			changeText126("Varrock", 2497);
			changeText126("Mage Bank", 2498);
			sendFrame164(2492);
			break;
		case 1540:
		case 13069:
			teleEffect = 2;
			changeText126("Travel To", 2493);
			changeText126("Rock Crabs", 2494);
			changeText126("Dagganoth", 2495);
			changeText126("Elf Warrior", 2496);
			changeText126("Moss Giant", 2497);
			changeText126("Slayer Tower", 2498);
			sendFrame164(2492);
			break;
		case 1541:
		case 13079:
			teleEffect = 3;
			changeText126("Travel To", 2493);
			changeText126("Barrows", 2494);
			changeText126("Fight Pits", 2495);
			changeText126("Pest Control", 2496);
			changeText126("Assault", 2497);
			changeText126("Duel Arena", 2498);
			sendFrame164(2492);
			break;
		case 7455:
		case 13087:
			teleEffect = 4;
			changeText126("Travel To", 2493);
			changeText126("Warriors Guild", 2494);
			changeText126("NAZI Zombies", 2495);
			changeText126("Rat Racers", 2496);
			changeText126("Zombie Game", 2497);
			changeText126("Fight Caves (JAD)", 2498);
			sendFrame164(2492);
			break;
		case 2494:
			if (petSpell) {
				if (pet == null) {
					NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
							.newNPC(500, absX, absY, heightLevel, 0, 0, 0, 0,
									true, -1)];
					spawnPet(newPet);
				} else {
					if (pet.NpcType != 500) {
						removePet(true);
						NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
								.newNPC(500, absX, absY, heightLevel, 0, 0, 0,
										0, true, -1)];
						spawnPet(newPet);
					} else {
						spawnPet();
					}
				}
				petSpell = false;
				return;
			}
			if (teleEffect == 1) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3087, 3512, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 2) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2670, 3710, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 3) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3565, 3306, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 4) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2208, 4946, 0, 714, 715, 308, 4, 18431);
			}
			break;
		case 2495:
			if (petSpell) {
				if (pet == null) {
					NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
							.newNPC(51, absX, absY, heightLevel, 0, 0, 0, 0,
									true, -1)];
					spawnPet(newPet);
				} else {
					if (pet.NpcType != 51) {
						removePet(true);
						NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
								.newNPC(51, absX, absY, heightLevel, 0, 0, 0,
										0, true, -1)];
						spawnPet(newPet);
					} else {
						spawnPet();
					}
				}
				petSpell = false;
				return;
			}
			if (teleEffect == 1) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3354, 3648, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 2) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2455, 10147, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 3) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2399, 5179, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 4) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2832, 3335, 0, 714, 715, 308, 4, 18431);
			}
			break;
		case 2496:
			if (petSpell) {
				if (pet == null) {
					NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
							.newNPC(3198, absX, absY, heightLevel, 0, 0, 0, 0,
									true, -1)];
					spawnPet(newPet);
				} else {
					if (pet.NpcType != 3198) {
						removePet(true);
						NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
								.newNPC(3198, absX, absY, heightLevel, 0, 0, 0,
										0, true, -1)];
						spawnPet(newPet);
					} else {
						spawnPet();
					}
				}
				petSpell = false;
				return;
			}
			if (teleEffect == 1) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3011, 3631, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 2) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2894, 2726, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 3) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2663, 2652, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 4) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3159, 3723, 0, 714, 715, 308, 4, 18431);
			}
			break;
		case 2497:
			if (petSpell) {
				if (isExtremeMember < 1) {
					showDialogue("These are for Extreme members only!");
					return;
				}
				if (pet == null) {
					NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
							.newNPC(3850, absX, absY, heightLevel, 0, 0, 0, 0,
									true, -1)];
					spawnPet(newPet);
				} else {
					if (pet.NpcType != 3850) {
						removePet(true);
						NPC newPet = Server.s.npcHandler.npcs[Server.s.npcHandler
								.newNPC(3850, absX, absY, heightLevel, 0, 0, 0,
										0, true, -1)];
						spawnPet(newPet);
					} else {
						spawnPet();
					}
				}
				petSpell = false;
				return;
			}
			if (teleEffect == 1) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3243, 3517, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 2) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2650, 9534, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 3) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2608, 3148, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 4) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(1928, 5001, 0, 714, 715, 308, 4, 18431);
			}
			break;
		case 2498:
			if (teleEffect == 1) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2539, 4716, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 2) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3429, 3538, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 3) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(3367, 3267, 0, 714, 715, 308, 4, 18431);
			}
			if (teleEffect == 4) {
				wildLvl = (((absY - 3520) / 8) + 1);
				if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
						&& WildArea() || meleeFightStatus == 1) {
					sendMessage("You cannot teleport from here.");
					break;
				}
				if (teleBlockDelay > 0) {
					sendMessage("A magical force does not allow you to teleport.");
					break;
				}
				startTele(2441, 5172, 0, 714, 715, 308, 4, 18431);
			}
			break;
		case 1170:
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(3251, 3267, 0, 714, 715, 308, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 1174:
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(2956, 3203, 0, 714, 715, 308, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 18470:
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(2868, 9940, 0, 714, 715, 308, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 14801:
		case 14802:
		case 14803:
		case 14804:
		case 14805:
		case 14806:
		case 14807:
		case 8946:
		case 8950:
		case 8954:
		case 8958:
		case 8962:
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 14817:
			tanHide(1741, 1);
			break;
		case 14809:
			tanHide(1741, 5);
			break;
		case 14793:
			tanHide(1741, InvItemAmt(1739));
			break;
		case 14818:
			tanHide(1743, 1);
			break;
		case 14810:
			tanHide(1743, 5);
			break;
		case 14794:
			tanHide(1743, InvItemAmt(1739));
			break;
		case 14819:
			tanHide(1745, 1);
			break;
		case 14811:
			tanHide(1745, 5);
			break;
		case 14795:
			tanHide(1745, InvItemAmt(1753));
			break;
		case 14820:
			tanHide(2505, 1);
			break;
		case 14812:
			tanHide(2505, 5);
			break;
		case 14796:
			tanHide(2505, InvItemAmt(1751));
			break;
		case 14821:
			tanHide(2507, 1);
			break;
		case 14813:
			tanHide(2507, 5);
			break;
		case 14797:
			tanHide(2507, InvItemAmt(1749));
			break;
		case 14822:
			tanHide(2509, 1);
			break;
		case 14814:
			tanHide(2509, 5);
			break;
		case 14798:
			tanHide(2509, InvItemAmt(1747));
			break;
		case 14823:
			tanHide(8080, 1);
			break;
		case 14815:
			tanHide(8080, 5);
			break;
		case 14799:
			tanHide(8080, InvItemAmt(2893));
			break;
		case 8949:
			if (jewelleryType == 1) {
				craftJewel(1635, 1);
			} else if (jewelleryType == 2) {
				craftJewel(1654, 1);
			} else if (jewelleryType == 3) {
				craftJewel(1673, 1);
			}
			break;
		case 8948:
			if (jewelleryType == 1) {
				craftJewel(1635, 5);
			} else if (jewelleryType == 2) {
				craftJewel(1654, 5);
			} else if (jewelleryType == 3) {
				craftJewel(1673, 5);
			}
			break;
		case 8947:
			if (jewelleryType == 1) {
				craftJewel(1635, 10);
			} else if (jewelleryType == 2) {
				craftJewel(1654, 10);
			} else if (jewelleryType == 3) {
				craftJewel(1673, 10);
			}
			break;
		case 8953:
			if (jewelleryType == 1) {
				craftJewel(1637, 1);
			} else if (jewelleryType == 2) {
				craftJewel(1656, 1);
			} else if (jewelleryType == 3) {
				craftJewel(1675, 1);
			}
			break;
		case 8952:
			if (jewelleryType == 1) {
				craftJewel(1637, 5);
			} else if (jewelleryType == 2) {
				craftJewel(1656, 5);
			} else if (jewelleryType == 3) {
				craftJewel(1675, 5);
			}
			break;
		case 8951:
			if (jewelleryType == 1) {
				craftJewel(1637, 10);
			} else if (jewelleryType == 2) {
				craftJewel(1656, 10);
			} else if (jewelleryType == 3) {
				craftJewel(1675, 10);
			}
			break;
		case 8957:
			if (jewelleryType == 1) {
				craftJewel(1639, 1);
			} else if (jewelleryType == 2) {
				craftJewel(1658, 1);
			} else if (jewelleryType == 3) {
				craftJewel(1677, 1);
			}
			break;
		case 8956:
			if (jewelleryType == 1) {
				craftJewel(1639, 5);
			} else if (jewelleryType == 2) {
				craftJewel(1658, 5);
			} else if (jewelleryType == 3) {
				craftJewel(1677, 5);
			}
			break;
		case 8955:
			if (jewelleryType == 1) {
				craftJewel(1639, 10);
			} else if (jewelleryType == 2) {
				craftJewel(1658, 10);
			} else if (jewelleryType == 3) {
				craftJewel(1677, 10);
			}
			break;
		case 8961:
			if (jewelleryType == 1) {
				craftJewel(1641, 1);
			} else if (jewelleryType == 2) {
				craftJewel(1660, 1);
			} else if (jewelleryType == 3) {
				craftJewel(1679, 1);
			}
			break;
		case 8960:
			if (jewelleryType == 1) {
				craftJewel(1641, 5);
			} else if (jewelleryType == 2) {
				craftJewel(1660, 5);
			} else if (jewelleryType == 3) {
				craftJewel(1679, 5);
			}
			break;
		case 8959:
			if (jewelleryType == 1) {
				craftJewel(1641, 10);
			} else if (jewelleryType == 2) {
				craftJewel(1660, 10);
			} else if (jewelleryType == 3) {
				craftJewel(1679, 10);
			}
			break;
		case 8965:
			if (jewelleryType == 1) {
				craftJewel(1643, 1);
			} else if (jewelleryType == 2) {
				craftJewel(1662, 1);
			} else if (jewelleryType == 3) {
				craftJewel(1681, 1);
			}
			break;
		case 8964:
			if (jewelleryType == 1) {
				craftJewel(1643, 5);
			} else if (jewelleryType == 2) {
				craftJewel(1662, 5);
			} else if (jewelleryType == 3) {
				craftJewel(1681, 5);
			}
			break;
		case 8963:
			if (jewelleryType == 1) {
				craftJewel(1643, 10);
			} else if (jewelleryType == 2) {
				craftJewel(1662, 10);
			} else if (jewelleryType == 3) {
				craftJewel(1681, 10);
			}
			break;
		case 2471: // First of three option select
			if (NpcDialogue == 101) {
				jewelleryType = 1;
				displayItem246(8941, 150, 1635);
				displayItem246(8942, 150, 1637);
				displayItem246(8943, 150, 1639);
				displayItem246(8944, 150, 1641);
				displayItem246(8945, 150, 1643);
				sendFrame164(8938);
			} else if (NpcDialogue == 103) {
				if (combatLevel >= 20) {
					int slot = Misc.random3(slayerTask20.length);
					slayerId = slayerTask20[slot];
					slot = Misc.random3(slayerTaskAmt.length);
					slayerAmt = slayerTaskAmt[slot];
					NpcDialogue++;
					DialogueSend();
				} else {
					NpcDialogue = 106;
					DialogueSend();
				}
			} else if (NpcDialogue == 124) {
				changeCoords(2658, 2676, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 297) {
				changeCoords(3243, 3515, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 299) {
				changeCoords(3197, 3818, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 300) {
				changeCoords(3006, 3849, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 301) {
				changeCoords(2474, 3437, 0);
				RemoveAllWindows();
			} else if (NpcDialogue == 89) {
				if (!deleteItem(gloryId, GetItemSlot(gloryId), 1)) {
					deleteEquipment(playerAmulet);
				}
				addItem(newGloryId, 1);
				startTele(3086, 3490, 0, 714, 715, 308, 4, 18431);
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 229) {
				Server.s.playerHandler.changeClanMemberRights(
						whosRightsChanged, playerName, 1);
				int pid = Server.s.playerHandler
						.GetIdFromName(whosRightsChanged);
				if (pid != -1) {
					Client p = Server.s.playerHandler.clients[pid];
					p.sendMessage(playerName
							+ " has changed your clan rights to Member.");
					p.updateClanText();
				}
				RemoveAllWindows();
				whosRightsChanged = "";
			} else if (NpcDialogue == 138) {
				if (lunarQuest < 2) {
					sendMessage("You cannot smith this.");
					break;
				}
				if (playerLevel[playerSmithing] >= 50) {
					if (InvItemAmt(2893) >= 2 && InvItemAmt(2347) >= 1) {
						startAnimation(898, 0);
						deleteItem(2893, GetItemSlot(2893), 2);
						addItem(8013, 1);
						addSkillXP(40 * smithXpInc, 13);
					} else {
						sendMessage("You need 2 Lunar bars and a hammer to smith this.");
					}
				} else {
					sendMessage("You need atleast 50 smithing to make this.");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 139) {
				if (lunarQuest < 2) {
					sendMessage("You cannot craft this.");
					break;
				}
				if (getLevelForXP(playerXP[12]) >= 61) {
					if (InvItemAmt(1734) > 0 && InvItemAmt(8080) >= 2) {
						startAnimation(891, 0);
						deleteItem(8080, GetItemSlot(8080), 2);
						deleteItem(1734, GetItemSlot(1734), 1);
						addItem(8016, 1);
						addItem(8017, 1);
						addSkillXP(180 * craftXpInc, 12);
					} else {
						sendMessage("You need thread and two Lunar hides to make this.");
					}
				} else {
					showDialogue("You need atleast 61 Crafting to make this!");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 2472:
			if (NpcDialogue == 101) {
				jewelleryType = 2;
				displayItem246(8941, 80, 1654);
				displayItem246(8942, 80, 1656);
				displayItem246(8943, 80, 1658);
				displayItem246(8944, 80, 1660);
				displayItem246(8945, 80, 1662);
				sendFrame164(8938);
			} else if (NpcDialogue == 124) {
				changeCoords(2834, 3335, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 297) {
				changeCoords(2537, 4716, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 299) {
				changeCoords(2834, 9815, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 300) {
				changeCoords(2993, 3614, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 301) {
				changeCoords(2631, 3691, 0);
				RemoveAllWindows();
			} else if (NpcDialogue == 229) {
				Server.s.playerHandler.changeClanMemberRights(
						whosRightsChanged, playerName, 2);
				int pid = Server.s.playerHandler
						.GetIdFromName(whosRightsChanged);
				if (pid != -1) {
					Client p = Server.s.playerHandler.clients[pid];
					p.sendMessage(playerName
							+ " has changed your clan rights to Leader.");
					p.updateClanText();
				}
				RemoveAllWindows();
				whosRightsChanged = "";
			} else if (NpcDialogue == 103) {
				if (combatLevel >= 40) {
					int slot = Misc.random3(slayerTask40.length);
					slayerId = slayerTask40[slot];
					slot = Misc.random3(slayerTaskAmt.length);
					slayerAmt = slayerTaskAmt[slot];
					NpcDialogue++;
					DialogueSend();
				} else {
					NpcDialogue = 106;
					DialogueSend();
				}
			} else if (NpcDialogue == 89) {
				if (!deleteItem(gloryId, GetItemSlot(gloryId), 1)) {
					deleteEquipment(playerAmulet);
				}
				addItem(newGloryId, 1);
				startTele(3270, 3167, 0, 714, 715, 308, 4, 18431);
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 138) {
				if (lunarQuest < 2) {
					sendMessage("You cannot smith this.");
					break;
				}
				if (playerLevel[playerSmithing] >= 50) {
					if (InvItemAmt(2893) >= 4 && InvItemAmt(2347) >= 1) {
						startAnimation(898, 0);
						deleteItem(2893, GetItemSlot(2893), 4);
						addItem(8014, 1);
						addSkillXP(50 * smithXpInc, 13);
					} else {
						sendMessage("You need 4 Lunar bars and a hammer to smith this.");
					}
				} else {
					sendMessage("You need atleast 50 smithing to make this.");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 139) {
				if (lunarQuest < 2) {
					sendMessage("You cannot craft this.");
					break;
				}
				if (getLevelForXP(playerXP[12]) >= 61) {
					if (InvItemAmt(1734) > 0 && 8080 >= 2) {
						startAnimation(891, 0);
						deleteItem(8080, GetItemSlot(8080), 2);
						deleteItem(1734, GetItemSlot(1734), 1);
						addItem(8081, 1);
						addItem(8082, 1);
						addSkillXP(180 * craftXpInc, 12);
					} else {
						sendMessage("You need thread and two Lunar hides to make this.");
					}
				} else {
					showDialogue("You need atleast 61 Crafting to make this!");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 2473:
			if (NpcDialogue == 101) {
				jewelleryType = 3;
				displayItem246(8941, 80, 1673);
				displayItem246(8942, 80, 1675);
				displayItem246(8943, 80, 1677);
				displayItem246(8944, 80, 1679);
				displayItem246(8945, 80, 1681);
				sendFrame164(8938);
			} else if (NpcDialogue == 124) {
				if (monkeyMadnessQuest >= 1) {
					changeCoords(2805, 2707, 0);
				} else {
					sendMessage("You need to start monkey madness before you can go here.");
				}
				RemoveAllWindows();
			}
			if (NpcDialogue == 297) {
				changeCoords(3351, 3649, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 299) {
				changeCoords(2731, 9452, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 300) {
				changeCoords(2740, 9493, 0);
				RemoveAllWindows();
			}
			if (NpcDialogue == 301) {
				changeCoords(2577, 3844, 0);
				RemoveAllWindows();
			} else if (NpcDialogue == 103) {
				if (combatLevel >= 100) {
					int slot = Misc.random3(slayerTask70.length);
					slayerId = slayerTask70[slot];
					slot = Misc.random3(slayerTaskAmt.length);
					slayerAmt = slayerTaskAmt[slot];
					NpcDialogue++;
					DialogueSend();
				} else {
					NpcDialogue = 106;
					DialogueSend();
				}
			} else if (NpcDialogue == 229) {
				Server.s.playerHandler.changeClanMemberRights(
						whosRightsChanged, playerName, 3);
				int pid = Server.s.playerHandler
						.GetIdFromName(whosRightsChanged);
				if (pid != -1) {
					Client p = Server.s.playerHandler.clients[pid];
					p.sendMessage(playerName
							+ " has changed your clan rights to Owner.");
					p.updateClanText();
				}
				RemoveAllWindows();
				whosRightsChanged = "";
			} else if (NpcDialogue == 89) {
				if (!deleteItem(gloryId, GetItemSlot(gloryId), 1)) {
					deleteEquipment(playerAmulet);
				}
				addItem(newGloryId, 1);
				startTele(3079, 3250, 0, 714, 715, 308, 4, 18431);
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 138) {
				if (lunarQuest < 2) {
					sendMessage("You cannot smith this.");
					break;
				}
				if (playerLevel[playerSmithing] >= 50) {
					if (InvItemAmt(2893) >= 3 && InvItemAmt(2347) >= 1) {
						startAnimation(898, 0);
						deleteItem(2893, GetItemSlot(2893), 3);
						addItem(8015, 1);
						addSkillXP(45 * smithXpInc, 13);
					} else {
						sendMessage("You need 3 Lunar bars and a hammer to smith this.");
					}
				} else {
					sendMessage("You need atleast 50 smithing to make this.");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 139) {
				if (lunarQuest < 2) {
					sendMessage("You cannot craft this.");
					break;
				}
				if (getLevelForXP(playerXP[12]) >= 61) {
					if (InvItemAmt(1734) > 0 && InvItemAmt(8080) >= 2) {
						startAnimation(891, 0);
						deleteItem(8080, GetItemSlot(8080), 2);
						deleteItem(1734, GetItemSlot(1734), 1);
						addItem(8018, 1);
						addSkillXP(180 * craftXpInc, 12);
					} else {
						sendMessage("You need thread and two Lunar hides to make this.");
					}
				} else {
					showDialogue("You need atleast 61 Crafting to make this!");
				}
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 7450:
			smeltItem(2363, 1);
			break;
		case 7449:
			smeltItem(2363, 5);
			break;
		case 7448:
			smeltItem(2363, 10);
			break;
		case 7447:
			smeltId = 2363;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 7446:
			smeltItem(2361, 1);
			break;
		case 7444:
			smeltItem(2361, 5);
			break;
		case 7443:
			smeltItem(2361, 10);
			break;
		case 7442:
			smeltId = 2361;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 7441:
			smeltItem(2359, 1);
			break;
		case 7440:
			smeltItem(2359, 5);
			break;
		case 6397:
			smeltItem(2359, 10);
			break;
		case 4158:
			smeltId = 2359;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 4003:
			smeltItem(2357, 1);
			break;
		case 4002:
			smeltItem(2357, 5);
			break;
		case 4001:
			smeltItem(2357, 10);
			break;
		case 4000:
			smeltId = 2357;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 3999:
			smeltItem(2353, 1);
			break;
		case 3998:
			smeltItem(2353, 5);
			break;
		case 3997:
			smeltItem(2353, 10);
			break;
		case 3996:
			smeltId = 2353;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 3987:
			smeltItem(2349, 1);
			break;
		case 3986:
			smeltItem(2349, 5);
			break;
		case 2807:
			smeltItem(2349, 10);
			break;
		case 2414:
			smeltId = 2349;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 3991:
			smeltItem(2351, 1);
			break;
		case 15154:
			smeltItem(2351, 5);
			break;
		case 3989:
			smeltItem(2351, 10);
			break;
		case 3988:
			smeltId = 2351;
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 9118:
			CurrentFrame = -1;
			minimap(0);
			RemoveAllWindows();
			break;
		case 13035:
			if (teleX > 0 || teleY > 0) {
				break;
			}
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				if (Misc.random(1) == 1) {
					startTele(2827 + randomz.nextInt(2),
							3344 + randomz.nextInt(2), 0, 1979, -1, 392, 4,
							18431);
				} else {
					startTele(2860 + randomz.nextInt(2),
							3373 + randomz.nextInt(2), 0, 1979, -1, 392, 4,
							18431);
				}
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 13053:
			if (teleX > 0 || teleY > 0) {
				break;
			}
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(3251, 3267, 0, 1979, -1, 392, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 13061:
			if (teleX > 0 || teleY > 0) {
				break;
			}
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(2956, 3203, 0, 1979, -1, 392, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 13095:
			if (teleX > 0 || teleY > 0) {
				break;
			}
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				startTele(2868, 9940, 0, 1979, -1, 392, 4, 18431);
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 1164:
			wildLvl = (((absY - 3520) / 8) + 1);
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (playerLevel[playerMagic] >= 1) {
				pcStatus = 0;
				if (Misc.random(1) == 1) {
					startTele(2827 + randomz.nextInt(2),
							3344 + randomz.nextInt(2), 0, 714, 715, 308, 4,
							18431);
				} else {
					startTele(2860 + randomz.nextInt(2),
							3373 + randomz.nextInt(2), 0, 714, 715, 308, 4,
							18431);
				}
				if (spellSet == 2) {
					SetSidebar(6, 18787);
				}
			}
			break;
		case 15078:
			if (pinCorrect()) {
				resetBankPinAttempts();
				showInterface(7424);
				pinChanged = true;
				sendMessage("Enter your desired pin number now.");
			} else {
				sendMessage("You must enter your pin before changing it!");
			}
			break;
		case 15082:
			if (pinCorrect()) {
				RemoveAllWindows();
				resetBankPinAttempts();
				bankPin = -1;
				sendMessage("You no longer have a bank pin.");
			} else {
				sendMessage("You must enter your pin before deleting it!");
			}
			break;
		case 14873:
			numberEnter(1);
			break;
		case 14874:
			numberEnter(2);
			break;
		case 14875:
			numberEnter(3);
			break;
		case 14876:
			numberEnter(4);
			break;
		case 14877:
			numberEnter(5);
			break;
		case 14878:
			numberEnter(6);
			break;
		case 14879:
			numberEnter(7);
			break;
		case 14880:
			numberEnter(8);
			break;
		case 14881:
			numberEnter(9);
			break;
		case 14882:
			numberEnter(0);
			break;
		case 14922:
			RemoveAllWindows();
			CurrentFrame = -1;
			break;
		case 8638:
			objectId = 1059;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8637:
			objectId = 1059;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8636:
			objectId = 1059;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8635:
			objectId = 1129;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8634:
			objectId = 1129;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8633:
			objectId = 1129;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8641:
			objectId = 1061;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8640:
			objectId = 1061;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8639:
			objectId = 1061;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8644:
			objectId = 1063;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8643:
			objectId = 1063;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8642:
			objectId = 1063;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8647:
			objectId = 1095;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8646:
			objectId = 1095;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8645:
			objectId = 1095;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8650:
			objectId = 1169;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8649:
			objectId = 1169;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8648:
			objectId = 1169;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 8653:
			objectId = 1167;
			leatherId = 1741;
			craftDelAmt = 1;
			isCrafting = true;
			break;
		case 8652:
			objectId = 1167;
			leatherId = 1741;
			craftDelAmt = 5;
			isCrafting = true;
			break;
		case 8651:
			objectId = 1167;
			leatherId = 1741;
			craftDelAmt = 10;
			isCrafting = true;
			break;
		case 2422:
			RemoveAllWindows();
			CurrentFrame = -1;
			break;
		case 8889:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1099;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2493;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2495;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2497;
					craftDelAmt = 1;
					isCrafting = true;
				}
			} else {
				fletchType = 1;
				fletchDelAmt = 1;
				isFletching = true;
			}
			break;
		case 8888:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1099;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2493;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2495;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2497;
					craftDelAmt = 5;
					isCrafting = true;
				}
			} else {
				fletchType = 1;
				fletchDelAmt = 5;
				isFletching = true;
			}
			break;
		case 8887:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1099;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2493;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2495;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2497;
					craftDelAmt = 10;
					isCrafting = true;
				}
			} else {
				fletchType = 1;
				fletchDelAmt = 10;
				isFletching = true;
			}
			break;
		case 8897:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1135;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2499;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2501;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2503;
					craftDelAmt = 1;
					isCrafting = true;
				}
			} else {
				fletchType = 2;
				fletchDelAmt = 1;
				isFletching = true;
			}
			break;
		case 8896:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1135;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2499;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2501;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2503;
					craftDelAmt = 5;
					isCrafting = true;
				}
			} else {
				fletchType = 2;
				fletchDelAmt = 5;
				isFletching = true;
			}
			break;
		case 8895:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1135;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2499;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2501;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2503;
					craftDelAmt = 10;
					isCrafting = true;
				}
			} else {
				fletchType = 2;
				fletchDelAmt = 10;
				isFletching = true;
			}
			break;
		case 8893:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1065;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2487;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2489;
					craftDelAmt = 1;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2491;
					craftDelAmt = 1;
					isCrafting = true;
				}
			} else {
				fletchType = 0;
				fletchDelAmt = 1;
				isFletching = true;
			}
			break;
		case 8892:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1065;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2487;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2489;
					craftDelAmt = 5;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2491;
					craftDelAmt = 5;
					isCrafting = true;
				}
			} else {
				fletchType = 0;
				fletchDelAmt = 5;
				isFletching = true;
			}
			break;
		case 8891:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1065;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2487;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2489;
					craftDelAmt = 10;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2491;
					craftDelAmt = 10;
					isCrafting = true;
				}
			} else {
				fletchType = 0;
				fletchDelAmt = 10;
				isFletching = true;
			}
			break;
		case 8890:
		case 8886:
		case 8894:
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 2461: // First option select in two option frame
			if (NpcDialogue == 3) {
				showInterface(14924);
				NpcDialogue = -1;
			} else if (NpcDialogue == 133) {
				NpcDialogue++;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 9) {
				if (NpcTalkTo == 3786) {
					ViewShop(12);
				} else if (NpcTalkTo == 561) {
					ViewShop(15);
				}
				NpcDialogue = -1;
			} else if (NpcDialogue == 230) {
				ViewShop(48);
				NpcDialogue = -1;
			} else if (NpcDialogue == 165) {
				if (Server.s.playerHandler.players[meleeFightWith] != null) {
					Client p = (Client) Server.s.playerHandler.players[meleeFightWith];
					if (p.meleeFightStatus != 0) {
						sendMessage("You can't do that!");
						RemoveAllWindows();
						return;
					}
					duelStartDelay = 10;
					p.duelStartDelay = 10;
					meleeFightStatus = 1;
					p.meleeFightStatus = 1;
					changeCoords(2202, 4939, 0);
					p.changeCoords(2213, 4939, 0);
					RemoveAllWindows();
					p.RemoveAllWindows();
					if (knightWavesQuest == 1) {
						Server.s.npcHandler.newNPC(randomFightWarrior(),
								p.teleportToX - 1, p.teleportToY - 1, 0, 0, 0,
								0, 0, false, p.playerId);
					} else {
						Server.s.npcHandler.newNPC(armourTypeDefence(),
								p.teleportToX - 1, p.teleportToY - 1, 0, 0, 0,
								0, 0, false, p.playerId);
					}
					if (p.knightWavesQuest == 1) {
						Server.s.npcHandler.newNPC(randomFightWarrior(),
								teleportToX + 1, teleportToY + 1, 0, 0, 0, 0,
								0, false, playerId);
					} else {
						Server.s.npcHandler.newNPC(p.armourTypeDefence(),
								teleportToX + 1, teleportToY + 1, 0, 0, 0, 0,
								0, false, playerId);
					}
					drawHeadicon(10, meleeFightWith, 0, 0);
					p.drawHeadicon(10, playerId, 0, 0);
				} else {
					showDialogue("This player is not online.");
				}
			} else if (NpcDialogue == 6) {
				showInterface(3559);
				NpcDialogue = -1;
			} else if (NpcDialogue == 12) {
				ViewShop(2);
				NpcDialogue = -1;
			} else if (NpcDialogue == 15) {
				ViewShop(3);
				NpcDialogue = -1;
			} else if (NpcDialogue == 76) {
				changeCoords(2631, 3688, 0);
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 70) {
				ViewShop(18);
				NpcDialogue = -1;
			} else if (NpcDialogue == 18) {
				ViewShop(4);
				NpcDialogue = -1;
			} else if (NpcDialogue == 24) {
				ViewShop(7);
				NpcDialogue = -1;
			} else if (NpcDialogue == 27) {
				ViewShop(8);
				NpcDialogue = -1;
			} else if (NpcDialogue == 30) {
				ViewShop(9);
				NpcDialogue = -1;
			} else if (NpcDialogue == 67) {
				ViewShop(17);
				NpcDialogue = -1;
			} else if (NpcDialogue == 33) {
				ViewShop(6);
				NpcDialogue = -1;
			} else if (NpcDialogue == 36) {
				ViewShop(13);
				NpcDialogue = -1;
			} else if (NpcDialogue == 39) {
				changeText126("Leather", 14777);
				changeText126("1k", 14785);
				changeText126("Hard Leather", 14778);
				changeText126("1k", 14786);
				changeText126("Green-D Leather", 14779);
				changeText126("2k", 14787);
				changeText126("Blue-D Leather", 14780);
				changeText126("2k", 14788);
				changeText126("Red-D Leather", 14781);
				changeText126("2k", 14789);
				changeText126("Black-D Leather", 14782);
				changeText126("2k", 14790);
				changeText126("Lunar Leather", 14783);
				changeText126("10k", 14791);
				changeText126("", 14784);
				changeText126("", 14792);
				displayItem246(14769, 250, 1741);
				displayItem246(14770, 250, 1743);
				displayItem246(14771, 250, 1745);
				displayItem246(14772, 250, 2505);
				displayItem246(14773, 250, 2507);
				displayItem246(14774, 250, 2509);
				if (lunarQuest >= 2) {
					displayItem246(14775, 250, 8080);
				} else {
					displayItem246(14775, 250, -1);
				}
				showInterface(14670);
				NpcDialogue = -1;
			} else if (NpcDialogue == 42) {
				ViewShop(11);
				NpcDialogue = -1;
			} else if (NpcDialogue == 520) {
				ViewShop(20);
				NpcDialogue = -1;
			} else if (NpcDialogue == 73) {
				ViewShop(19);
				NpcDialogue = -1;
			} else if (NpcDialogue == 64) {
				ViewShop(16);
				NpcDialogue = -1;
			} else if (NpcDialogue == 49) {
				if (runeMysteriesQuest == 4) {
					changeCoords(2911, 4831, 0);
				} else {
					sendMessage("You must finish the Rune Mysteries Quest first!");
				}
				RemoveAllWindows();
				NpcDialogue = -1;
			} else if (NpcDialogue == 58) {
				changeCoords(2540, 3892, 0);
				RemoveAllWindows();
				NpcDialogue = -1;
			} else if (NpcDialogue == 52) {
				if (absX >= 3230 && absX <= 3250) {
					changeCoords(2893, 2726, 0);
				} else {
					changeCoords(3233, 3277, 0);
				}
				RemoveAllWindows();
				NpcDialogue = -1;
			} else if (NpcDialogue == 55) {
				changeCoords(2627, 5093, 0);
				RemoveAllWindows();
				NpcDialogue = -1;
			} else if (NpcDialogue == 61) {
				if (absX >= 3025 && absX <= 3050 && absY >= 4824
						&& absY <= 4850) {
					changeCoords(2601, 3895, 0);
				} else {
					changeCoords(3017, 4811, 0);
					playerLevel[5] = 0;
					setSkillLevel(5);
					skullTimer = 360;
					if (HeadIconPk != 1) {
						SetPkHeadIcon(1);
					}
				}
				RemoveAllWindows();
				NpcDialogue = -1;
			} else if (NpcDialogue == 21) {
				changeCoords(3085, 3935, 0);
				playerLevel[playerAttack] = 1;
				playerLevel[playerStrength] = 1;
				playerLevel[playerRanged] = 1;
				setSkillLevel(playerAttack);
				setSkillLevel(playerStrength);
				setSkillLevel(playerRanged);
				RemoveAllWindows();
			} else if (NpcDialogue == 119) {
				changeCoords(2208, 4946, 0);
				RemoveAllWindows();
			} else if (NpcDialogue == 123) {
				changeCoords(3102, 3930, 0);
				startMageArena();
				RemoveAllWindows();
			} else if (NpcDialogue == 125) {
				ViewShop(38);
			} else if (NpcDialogue == 126) {
				SetSidebar(6, 1151);
				RemoveAllWindows();
			} else if (NpcDialogue == 149) {
				spellSet = 2;
				SetSidebar(6, 18787);
				RemoveAllWindows();
			} else if (NpcDialogue == 228) {
				if (clanRequestName.equalsIgnoreCase(null)
						|| clanRequest < 0
						|| clanRequestName.equalsIgnoreCase("")
						|| !Server.s.playerHandler.addClanMember(playerName,
								clanRequestName)) {
					sendMessage("Clan joining error.");
				} else {
					// updateClanText();
				}
				RemoveAllWindows();
				clanRequest = -1;
				clanRequestName = "";
			} else if (NpcDialogue == 114) {
				shotputThrow();
				int dis = Misc.random((playerMaxHit / 2) + (playerMaxHit / 2)) + 1;
				addSkillXP((4 * combatXpInc) * dis, playerStrength);
				showDialogue("You threw the rock " + dis + " feet!");
				if (dis > 1) {
					addItem(7774, (int) dis / 2);
				}
				int landX = absX;
				int landY = absY - dis - 1;
				int offsetX = (absX - landX) * -1;
				int offsetY = (absY - landY) * -1;
				startAnimation(439, 0);
				createProjectile(absY, absX, offsetY, offsetX, 195, 43, 0, 95,
						0);
				NpcDialogue = -1;
			} else {
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 2462: // Second option select in two option frame
			if (NpcDialogue == 3 || NpcDialogue == 6 || NpcDialogue == 9
					|| NpcDialogue == 12 || NpcDialogue == 15
					|| NpcDialogue == 18 || NpcDialogue == 21
					|| NpcDialogue == 24 || NpcDialogue == 27
					|| NpcDialogue == 30 || NpcDialogue == 33
					|| NpcDialogue == 36 || NpcDialogue == 39
					|| NpcDialogue == 42 || NpcDialogue == 49
					|| NpcDialogue == 52 || NpcDialogue == 55
					|| NpcDialogue == 58 || NpcDialogue == 61
					|| NpcDialogue == 64 || NpcDialogue == 67
					|| NpcDialogue == 70 || NpcDialogue == 73
					|| NpcDialogue == 76 || NpcDialogue == 78
					|| NpcDialogue == 82) {
				NpcDialogue++;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 133) {
				NpcDialogue += 2;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 230) {
				NpcDialogue = 102;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 165) {
				if (Server.s.playerHandler.players[meleeFightWith] != null) {
					Client p = (Client) Server.s.playerHandler.players[meleeFightWith];
					p.sendMessage("Other player declined.");
					p.NpcDialogue = -1;
					p.RemoveAllWindows();
					p.meleeFightWith = 0;
					p.meleeFightStatus = -1;
				}
				meleeFightWith = 0;
				meleeFightStatus = -1;
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 125) {
				NpcDialogue = 115;
				NpcTalkTo = 2508;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 126) {
				SetSidebar(6, 12855);
				RemoveAllWindows();
			} else if (NpcDialogue == 149) {
				spellSet = 0;
				SetSidebar(6, 1151);
				RemoveAllWindows();
			} else if (NpcDialogue == 114) {
				shotputThrow();
				int dis = Misc.random(playerMaxHit) + 1;
				showDialogue("You threw the rock " + dis + " feet!");
				addSkillXP((4 * combatXpInc) * dis, playerStrength);
				if (dis > 1) {
					addItem(7774, (int) dis / 2);
				}
				int landX = absX;
				int landY = absY - dis - 1;
				int offsetX = (absX - landX) * -1;
				int offsetY = (absY - landY) * -1;
				startAnimation(439, 0);
				createProjectile(absY, absX, offsetY, offsetX, 195, 43, 0, 95,
						0);
				NpcDialogue = -1;
			} else {
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 2458:
			// This is the log out button.
			if (combatDelay <= 0 & combat.getCombatDelay() <= 0) {
				if (!logOutButton) {
					logOutButton = true;
					outStream.createFrame(109);
				}
			} else {
				sendMessage("You can't log out in battle.");
			}
			break;
		case 6674:
			if (duelWith > 0
					&& Server.s.playerHandler.players[duelWith] != null) {
				Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
				if (otherPlr.duelStatus == 1) {
					changeText126("Waiting for other player...", 6684);
					otherPlr.changeText126("Other player has accepted.", 6684);
					duelStatus = 2;
					int neededSlots = GetDuelItemSlots();
					if (duelRule[5]) {
						for (int w = 0; w < playerEquipment.length; w++) {
							if (playerEquipment[w] > 0 && w != playerWeapon
									&& w != playerArrows) {
								neededSlots++;
							}
						}
					}
					if (duelRule[4]) {
						if (playerEquipment[playerWeapon] > 0) {
							neededSlots++;
						}
					}
					if (neededSlots > FreeSlots()) {
						sendMessage("You do not have enough space in your inventory.");
						otherPlr.sendMessage("Other player does not have enough inventory space.");
						duelStatus = 1;
						otherPlr.duelStatus = 1;
						changeText126("", 6684);
						otherPlr.changeText126("", 6684);
						break;
					}
				} else if (otherPlr.duelStatus == 2) {
					duelStatus = 3;
					otherPlr.duelStatus = 3;
					int neededSlots = GetDuelItemSlots();
					if (duelRule[5]) {
						for (int w = 0; w < playerEquipment.length; w++) {
							if (playerEquipment[w] > 0 && w != playerWeapon
									&& w != playerArrows) {
								neededSlots++;
							}
						}
					}
					if (neededSlots > FreeSlots()) {
						sendMessage("You do not have enough space in your inventory.");
						otherPlr.sendMessage("Other player does not have enough inventory space.");
						duelStatus = 1;
						otherPlr.duelStatus = 1;
						changeText126("", 6684);
						otherPlr.changeText126("", 6684);
						break;
					}
					RemoveAllWindows();
					otherPlr.RemoveAllWindows();
					DuelStart();
					otherPlr.DuelStart();
					if (!duelRule[9] && !duelRule[10]) {
						int thisPlr = Misc.random(noObMoveX.length - 1);
						int otherPlr2 = Misc.random(noObMoveX.length - 1);
						teleportToX = noObMoveX[thisPlr];
						teleportToY = noObMoveY[thisPlr];
						otherPlr.teleportToX = noObMoveX[otherPlr2];
						otherPlr.teleportToY = noObMoveY[otherPlr2];
					} else if (duelRule[9] && !duelRule[10]) {
						if (Misc.random(2) == 1) {
							teleportToX = 3337;
							teleportToY = 3253;
							otherPlr.teleportToX = 3337;
							otherPlr.teleportToY = 3252;
						} else if (Misc.random(2) == 1) {
							teleportToX = 3346;
							teleportToY = 3255;
							otherPlr.teleportToX = 3347;
							otherPlr.teleportToY = 3255;
						} else if (Misc.random(2) == 1) {
							teleportToX = 3345;
							teleportToY = 3251;
							otherPlr.teleportToX = 3344;
							otherPlr.teleportToY = 3251;
						} else {
							teleportToX = 3354;
							teleportToY = 3251;
							otherPlr.teleportToX = 3354;
							otherPlr.teleportToY = 3252;
						}
					} else if (duelRule[10]) {
						int thisPlr = Misc.random(obMoveX.length - 1);
						int otherPlr2 = Misc.random(obMoveX.length - 1);
						teleportToX = obMoveX[thisPlr];
						teleportToY = obMoveY[thisPlr];
						otherPlr.teleportToX = obMoveX[otherPlr2];
						otherPlr.teleportToY = obMoveY[otherPlr2];
						duelRule[9] = false;
						otherPlr.duelRule[9] = false;
					}
					if (duelRule[5]) {
						for (int w = 0; w < playerEquipment.length; w++) {
							if (playerEquipment[w] > 0 && w != playerWeapon) {
								removeItem(playerEquipment[w], w);
							}
						}
						for (int w = 0; w < playerEquipment.length; w++) {
							if (otherPlr.playerEquipment[w] > 0
									&& w != playerWeapon) {
								otherPlr.removeItem(
										otherPlr.playerEquipment[w], w);
							}
						}
					}
					if (duelRule[4]) {
						removeItem(playerEquipment[playerWeapon], playerWeapon); // there
						otherPlr.removeItem(
								otherPlr.playerEquipment[playerWeapon],
								playerWeapon);
					}
					drawHeadicon(10, duelWith, 0, 0);
					otherPlr.drawHeadicon(10, playerId, 0, 0);
					duelStartDelay = 10;
					otherPlr.duelStartDelay = 10;
				}
			}
			break;
		case 6698:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p0 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[0]) {
					duelRule[0] = false;
					p0.duelRule[0] = false;
				} else {
					duelRule[0] = true;
					p0.duelRule[0] = true;
				}
				RefreshDuelRules();
				p0.RefreshDuelRules();
			}
			break;
		case 6699:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p1 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[1]) {
					duelRule[1] = false;
					p1.duelRule[1] = false;
				} else {
					duelRule[1] = true;
					p1.duelRule[1] = true;
				}
				RefreshDuelRules();
				p1.RefreshDuelRules();
			}
			break;
		case 6697:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p2 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[2] == true) {
					duelRule[2] = false;
					p2.duelRule[2] = false;
				} else {
					duelRule[2] = true;
					p2.duelRule[2] = true;
				}
				RefreshDuelRules();
				p2.RefreshDuelRules();
			}
			break;
		case 7817:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p3 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[3]) {
					duelRule[3] = false;
					p3.duelRule[3] = false;
				} else {
					duelRule[3] = true;
					p3.duelRule[3] = true;
				}
				RefreshDuelRules();
				p3.RefreshDuelRules();
			}
			break;
		case 669:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p4 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[4] == true) {
					duelRule[4] = false;
					p4.duelRule[4] = false;
				} else {
					duelRule[4] = true;
					p4.duelRule[4] = true;
				}
				RefreshDuelRules();
				p4.RefreshDuelRules();
			}
			break;
		case 6696:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p5 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[5] == true) {
					duelRule[5] = false;
					p5.duelRule[5] = false;
				} else {
					duelRule[5] = true;
					p5.duelRule[5] = true;
				}
				RefreshDuelRules();
				p5.RefreshDuelRules();
			}
			break;
		case 6701:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p6 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[6] == true) {
					duelRule[6] = false;
					p6.duelRule[6] = false;
				} else {
					duelRule[6] = true;
					p6.duelRule[6] = true;
				}
				RefreshDuelRules();
				p6.RefreshDuelRules();
			}
			break;
		case 6702:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p7 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[7] == true) {
					duelRule[7] = false;
					p7.duelRule[7] = false;
				} else {
					duelRule[7] = true;
					p7.duelRule[7] = true;
				}
				RefreshDuelRules();
				p7.RefreshDuelRules();
			}
			break;
		case 6703:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p8 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[8] == true) {
					duelRule[8] = false;
					p8.duelRule[8] = false;
				} else {
					duelRule[8] = true;
					p8.duelRule[8] = true;
				}
				RefreshDuelRules();
				p8.RefreshDuelRules();
			}
			break;
		case 6704:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p9 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[9] == true) {
					duelRule[9] = false;
					p9.duelRule[9] = false;
				} else {
					duelRule[9] = true;
					p9.duelRule[9] = true;
				}
				RefreshDuelRules();
				p9.RefreshDuelRules();
			}
			break;
		case 6731:
			if (Server.s.playerHandler.players[duelWith] != null) {
				Client p10 = (Client) Server.s.playerHandler.players[duelWith];
				if (duelRule[10] == true) {
					duelRule[10] = false;
					p10.duelRule[10] = false;
				} else {
					duelRule[10] = true;
					p10.duelRule[10] = true;
				}
				RefreshDuelRules();
				p10.RefreshDuelRules();
			}
			break;
		case 152:
			// Make player walk.
			isRunning2 = false;
			break;
		case 153:
			// Make player run.
			isRunning2 = true;
			break;
		case 168: // Skillcape emotes
			boolean skillcapesDisabled = true;
			if (skillcapesDisabled) {
				sendMessage("Skillcapes have been disabled temporarily.");
				return;
			}
			if (playerEquipment[playerCape] == 7982) { // attack
				playAnimation(4959, 0);
				playGraphic(705, 0, 0);
			} else if (playerEquipment[playerCape] == 7983) { // prayer
				playAnimation(4979, 0);
				playGraphic(710, 0, 0);
			} else if (playerEquipment[playerCape] == 7984) { // strength
				playAnimation(4981, 0);
				playGraphic(700, 0, 0);
			} else if (playerEquipment[playerCape] == 7985) { // defence
				playAnimation(4961, 0);
				playGraphic(719, 0, 0);
			} else if (playerEquipment[playerCape] == 7986) { // range
				playAnimation(4973, 0);
				playGraphic(723, 0, 0);
			} else if (playerEquipment[playerCape] == 7987) { // magic
				playAnimation(4939, 0);
				playGraphic(702, 0, 0);
			} else if (playerEquipment[playerCape] == 7978) { // combat cape i
																// just used
																// quest
				playAnimation(4945, 0);
				playGraphic(708, 0, 0);
			} else if (playerEquipment[playerCape] == 8026) { // theiving
				playAnimation(4965, 0);
				playGraphic(717, 0, 0);
			} else if (playerEquipment[playerCape] == 8025) { // runecrafting
				playAnimation(4947, 0);
				playGraphic(709, 0, 0);
			} else if (playerEquipment[playerCape] == 7994) { // hitpoints
				// TODO: Check if male/female / the female gfx is 712
				playAnimation(4971, 0);
				playGraphic(704, 0, 0);
			} else if (playerEquipment[playerCape] == 8004) { // herblore
				playAnimation(4969, 0);
				playGraphic(714, 0, 0);
			} else if (playerEquipment[playerCape] == 8037) { // fishing
				playAnimation(4951, 0);
				playGraphic(724, 0, 0);
			} else if (playerEquipment[playerCape] == 8038) { // cooking
				playAnimation(4955, 0);
				playGraphic(722, 0, 0);
			} else if (playerEquipment[playerCape] == 8041) { // woodcutting
				playAnimation(4957, 0);
				playGraphic(701, 0, 0);
			} else if (playerEquipment[playerCape] == 8042) { // mining
				playAnimation(4941, 0);
				playGraphic(706, 0, 0);
			} else if (playerEquipment[playerCape] == 8043) { // smithing
				playAnimation(4943, 0);
				playGraphic(707, 0, 0);
			} else if (playerEquipment[playerCape] == 8044) { // fletching
				playAnimation(4937, 0);
				playGraphic(721, 0, 0);
			} else if (playerEquipment[playerCape] == 8045) { // crafting
				playAnimation(4949, 0);
				playGraphic(720, 0, 0);
			} else if (playerEquipment[playerCape] == 8075) { // slayer
				// playAnimation()
				// @Harry theres no slayer emote??
				playGraphic(716, 0, 0);
			} else if (playerEquipment[playerCape] == 6570) { // fire cape?
				playAnimation(4975, 0);
				playGraphic(725, 0, 0);
			} else {
				sendMessage("You need a skillcape on to use this.");
			}
			break;
		case 169:
			startAnimation(856, 0);
			break;
		case 162:
			startAnimation(857, 0);
			break;
		case 164:
			startAnimation(858, 0);
			break;
		case 165:
			startAnimation(859, 0);
			break;
		case 161:
			startAnimation(860, 0);
			break;
		case 170:
			startAnimation(861, 0);
			break;
		case 171:
			startAnimation(862, 0);
			break;
		case 163:
			startAnimation(863, 0);
			break;
		case 167:
			startAnimation(864, 0);
			break;
		case 172:
			startAnimation(865, 0);
			break;
		case 166:
			startAnimation(866, 0);
			break;
		case 13362:
			startAnimation(2105, 0);
			break;
		case 13363:
			startAnimation(2106, 0);
			break;
		case 13364:
			startAnimation(2107, 0);
			break;
		case 13365:
			startAnimation(2108, 0);
			break;
		case 13366:
			startAnimation(2109, 0);
			break;
		case 150:
			// soundEffects = true;
			autoAtk = true;
			break;
		case 151:
			// soundEffects = false;
			autoAtk = false;
			break;
		case 5387:
			takeAsNote = false;
			break;
		case 5386:
			takeAsNote = true;
			break;
		case 3420:
			if (TradingWith != 0) {
				Client Trade = (Client) Server.s.playerHandler.players[TradingWith];
				if (Trade != null) {
					TradeStatus = 1;
					if (Trade.TradeStatus != 1) {
						changeText126("Waiting for other player...", 3431);
						Trade.changeText126("Other player has accepted.", 3431);
					} else {
						SecondTradeWindow();
						Trade.SecondTradeWindow();
					}
				}
			}
			break;
		case 3546:
			if (TradingWith != 0) {
				Client Trade2 = (Client) Server.s.playerHandler.players[TradingWith];
				if (Trade2 != null) {
					TradeStatus = 2;
					if (Trade2.TradeStatus != 2) {
						changeText126("Waiting for other player...", 3535);
						Trade2.changeText126("Other player has accepted.", 3535);
					} else {
						acceptedTrade = true;
						Trade2.acceptedTrade = true;
						RemoveAllWindows();
						for (int i = 0; i < playerOTItems.length; i++) {
							if (playerOTItems[i] != 0) {
								addItem(playerOTItems[i] - 1, playerOTItemsN[i]);
								appendTradeInfo(playerName + " Accepted "
										+ playerOTItemsN[i] + " "
										+ getItemName(playerOTItems[i] - 1)
										+ " From Player " + Trade2.playerName);
							}
							playerOTItems[i] = 0;
							playerTItems[i] = 0;
							playerOTItemsN[i] = 0;
							playerTItemsN[i] = 0;
						}
						Trade2.RemoveAllWindows();
						for (int i = 0; i < Trade2.playerOTItems.length; i++) {
							if (Trade2.playerOTItems[i] != 0) {
								Trade2.addItem(Trade2.playerOTItems[i] - 1,
										Trade2.playerOTItemsN[i]);
								appendTradeInfo(Trade2.playerName
										+ " Accepted "
										+ Trade2.playerOTItemsN[i]
										+ " "
										+ getItemName(Trade2.playerOTItems[i] - 1)
										+ " From Player " + playerName);
							}
							Trade2.playerOTItems[i] = 0;
							Trade2.playerTItems[i] = 0;
							Trade2.playerOTItemsN[i] = 0;
							Trade2.playerTItemsN[i] = 0;
						}
						acceptedTrade = false;
						Trade2.acceptedTrade = false;
						Server.s.playerHandler.SaveChar(this);
						Server.s.playerHandler
								.SaveChar(Server.s.playerHandler.players[Trade2.playerId]);
						TradeStatus = -1;
						Trade2.TradeStatus = -1;
						TradingWith = 0;
						Trade2.TradingWith = 0;
					}
				}
			}
			break;
		case 18846:
			if (isMember == 0) {
				sendMessage("This is a members only prayer.");
				SetConfig(102, 0);
				break;
			}
			if (knightWavesQuest != 1) {
				sendMessage("You must unlock this prayer at the Warriors Guild.");
				SetConfig(102, 0);
				break;
			}
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 7 || DefPray == 7 || StrPray == 7) {
				AtkPray = 0;
				DefPray = 0;
				StrPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[playerDefence]) < 70) {
				showDialogue("You need a Defence level of 70 to use Piety.");
				SetConfig(102, 0);
			} else if (getLevelForXP(playerXP[5]) >= 70) {
				if (AtkPray != 0 || StrPray != 0 || DefPray != 0) {
					SetConfig(101, 0); // Chivalry
					SetConfig(83, 0); // Thick Skin
					SetConfig(84, 0); // Burst of Str
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(86, 0); // Rock Skin
					SetConfig(87, 0); // Superhuman Str
					SetConfig(88, 0); // improved Reflexes
					SetConfig(92, 0); // Steel Skin
					SetConfig(93, 0); // Ultimate Str
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(89, 0); // Hawk Eye
					SetConfig(90, 0); // Mystic Lore
				}
				NewDrain = 4;
				AtkPray = 7;
				StrPray = 7;
				DefPray = 7;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 70) {
				showDialogue("You need a Prayer level of 70 to use Piety.");
				SetConfig(102, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(102, 0);
			}
			break;
		case 18840:
			if (isMember == 0) {
				sendMessage("This is a members only prayer.");
				SetConfig(101, 0);
				break;
			}
			if (knightWavesQuest != 1) {
				sendMessage("You must unlock this prayer at the Warriors Guild.");
				SetConfig(101, 0);
				break;
			}
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 6 || DefPray == 6 || StrPray == 6) {
				AtkPray = 0;
				DefPray = 0;
				StrPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[playerDefence]) < 60) {
				showDialogue("You need a Defence level of 60 to use Chivalry.");
				SetConfig(101, 0);
			} else if (getLevelForXP(playerXP[5]) >= 60) {
				if (AtkPray != 0 || StrPray != 0 || DefPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(83, 0); // Thick Skin
					SetConfig(84, 0); // Burst of Str
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(86, 0); // Rock Skin
					SetConfig(87, 0); // Superhuman Str
					SetConfig(88, 0); // improved Reflexes
					SetConfig(92, 0); // Steel Skin
					SetConfig(93, 0); // Ultimate Str
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(89, 0); // Hawk Eye
					SetConfig(90, 0); // Mystic Lore
				}
				NewDrain = 4;
				AtkPray = 6;
				StrPray = 6;
				DefPray = 6;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 60) {
				showDialogue("You need a Prayer level of 60 to use Chivalry.");
				SetConfig(101, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(101, 0);
			}
			break;
		case 5617:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (protectItem) {
				protectItem = false;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 25) {
				NewDrain = 36;
				protectItem = true;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 25) {
				showDialogue("You need a Prayer level of 25 to use Protect Items.");
				SetConfig(91, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(91, 0);
			}
			break;
		case 5609:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (DefPray == 1) {
				DefPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 1) {
				if (DefPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(86, 0); // Rock Skin
					SetConfig(92, 0); // Steel Skin
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 24;
				DefPray = 1;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 1) {
				showDialogue("You need a Prayer level of 1 to use Thick Skin.");
				SetConfig(83, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(83, 0);
			}
			break;
		case 5610:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (StrPray == 1) {
				StrPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 4) {
				if (StrPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(87, 0); // Superhuman Str
					SetConfig(93, 0); // Ultimate Str
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 24;
				StrPray = 1;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 4) {
				showDialogue("You need a Prayer level of 4 to use Burst of Strength.");
				SetConfig(84, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(84, 0);
			}
			break;
		case 5611:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 1) {
				AtkPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 7) {
				if (AtkPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(88, 0); // improved Reflexes
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(90, 0); // Mystic Lore
					SetConfig(89, 0); // Hawk Eye
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 24;
				AtkPray = 1;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 7) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 7 to use Clarity of Thought.");
				SetConfig(85, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(85, 0);
			}
			break;
		case 5612:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (DefPray == 2) {
				DefPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 10) {
				if (DefPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(83, 0); // Thick Skin
					SetConfig(92, 0); // Steel Skin
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 12;
				DefPray = 2;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 10) {
				showDialogue("You need a Prayer level of 10 to use Rock Skin.");
				SetConfig(86, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(86, 0);
			}
			break;
		case 5613:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (StrPray == 2) {
				StrPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 13) {
				if (StrPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(84, 0); // Burst of Str
					SetConfig(93, 0); // Ultimate Str
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 12;
				StrPray = 2;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 13) {
				showDialogue("You need a Prayer level of 13 to use Superhuman Strength.");
				SetConfig(87, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(87, 0);
			}
			break;
		case 5614:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 2) {
				AtkPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 16) {
				if (AtkPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(90, 0); // Mystic Lore
					SetConfig(89, 0); // Hawk Eye
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 12;
				AtkPray = 2;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 16) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 16 to use Improved Reflexes.");
				SetConfig(88, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(88, 0);
			}
			break;
		case 5618:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (DefPray == 3) {
				DefPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 28) {
				if (DefPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(83, 0); // Thick Skin
					SetConfig(86, 0); // Rock Skin
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 6;
				DefPray = 3;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 28) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 28 to use Steel Skin.");
				SetConfig(92, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(92, 0);
			}
			break;
		case 5619:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (StrPray == 3) {
				StrPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 31) {
				if (StrPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(84, 0); // Burst of Str
					SetConfig(87, 0); // Superhuman Str
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 6;
				StrPray = 3;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 31) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 31 to use ultimate Strength.");
				SetConfig(93, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(93, 0);
			}
			break;
		case 5620:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 3) {
				AtkPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 34) {
				if (AtkPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(88, 0); // improved Reflexes
					SetConfig(90, 0); // Mystic Lore
					SetConfig(89, 0); // Hawk Eye
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 6;
				AtkPray = 3;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 34) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 34 to use Incredible Reflexes.");
				SetConfig(94, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(94, 0);
			}
			break;
		case 5615:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 4) {
				AtkPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 19) {
				if (AtkPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(88, 0); // improved Reflexes
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(90, 0); // Mystic Lore
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 6;
				AtkPray = 4;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 19) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 19 to use Hawk Eye.");
				SetConfig(89, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(89, 0);
			}
			break;
		case 5616:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (AtkPray == 5) {
				AtkPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 22) {
				if (AtkPray != 0) {
					SetConfig(102, 0); // Piety
					SetConfig(101, 0); // Chivalry
					SetConfig(85, 0); // Clarity of Thought
					SetConfig(88, 0); // improved Reflexes
					SetConfig(94, 0); // Inc Reflexes
					SetConfig(89, 0); // Hawk Eye
					if (DefPray > 5 || StrPray > 5 || AtkPray > 5) {
						StrPray = 0;
						DefPray = 0;
						AtkPray = 0;
					}
				}
				NewDrain = 6;
				AtkPray = 5;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 22) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 22 to use Mystic Lore.");
				SetConfig(90, 0);
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(90, 0);
			}
			break;
		case 5621:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 1) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 37) {
				if (HeadPray != 0) {
					SetConfig(96, 0);
					SetConfig(97, 0);
					SetConfig(98, 0);
					SetConfig(99, 0);
					SetConfig(100, 0);
				}
				NewDrain = 6;
				SetPrayHeadIcon(3);
				HeadPray = 1;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 37) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 37 to use Protect from Magic.");
				SetConfig(95, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(95, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 5622:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 2) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 40) {
				if (HeadPray != 0) {
					SetConfig(95, 0);
					SetConfig(97, 0);
					SetConfig(98, 0);
					SetConfig(99, 0);
					SetConfig(100, 0);
				}
				NewDrain = 6;
				SetPrayHeadIcon(2);
				HeadPray = 2;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 40) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 40 to use Protect from Missles.");
				SetConfig(96, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(96, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 5623:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 3) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 43) {
				if (HeadPray != 0) {
					SetConfig(95, 0);
					SetConfig(96, 0);
					SetConfig(98, 0);
					SetConfig(99, 0);
					SetConfig(100, 0);
				}
				NewDrain = 6;
				SetPrayHeadIcon(1);
				HeadPray = 3;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 43) {
				showDialogue("You need a Prayer level of 43 to use Protect from Melee.");
				SetConfig(97, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(97, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 683:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 4) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 46) {
				if (HeadPray != 0) {
					SetConfig(95, 0);
					SetConfig(96, 0);
					SetConfig(97, 0);
					SetConfig(99, 0);
					SetConfig(100, 0);
				}
				NewDrain = 24;
				SetPrayHeadIcon(4);
				HeadPray = 4;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 46) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 46 to use Retribution.");
				SetConfig(98, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(98, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 684:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 5) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 49) {
				if (HeadPray != 0) {
					SetConfig(95, 0);
					SetConfig(96, 0);
					SetConfig(97, 0);
					SetConfig(98, 0);
					SetConfig(100, 0);
				}
				NewDrain = 12;
				SetPrayHeadIcon(6);
				HeadPray = 5;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 49) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 49 to use Redemption.");
				SetConfig(99, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(99, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 685:
			if (duelRule[8] || knightWavesGame == 1) {
				sendMessage("Prayer has been disabled here!");
				resetAllPrayers();
				break;
			}
			if (HeadPray == 6) {
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			} else if (getLevelForXP(playerXP[5]) >= 52) {
				if (HeadPray != 0) {
					SetConfig(95, 0);
					SetConfig(96, 0);
					SetConfig(97, 0);
					SetConfig(98, 0);
					SetConfig(99, 0);
				}
				NewDrain = 4;
				SetPrayHeadIcon(5);
				HeadPray = 6;
				checkDrain();
			} else if (getLevelForXP(playerXP[5]) < 52) {
				// sendMessage("You do not have a high enough prayer level.");
				showDialogue("You need a Prayer level of 52 to use Smite.");
				SetConfig(100, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			if (playerLevel[5] <= 0) {
				sendMessage("You have no prayer points left!");
				SetConfig(100, 0);
				SetPrayHeadIcon(0);
				HeadPray = 0;
				CheckIfPray();
			}
			break;
		case 353:
			if (playerEquipment[playerWeapon] == 4675 && spellSet == 1) {
				SetSidebar(0, 1689);
			} else if (playerEquipment[playerWeapon] == 4170) {
				SetSidebar(0, 12050);
			} else {
				SetSidebar(0, 1829);
			}
			break;
		case 349:
			if (spellCastedId <= 0) {
				if (playerEquipment[playerWeapon] == 4675 && spellSet == 1) {
					SetSidebar(0, 1689);
				} else if (playerEquipment[playerWeapon] == 4170) {
					SetSidebar(0, 12050);
				} else {
					SetSidebar(0, 1829);
				}
			}
			spellCastedId = 0;
			SetConfig(108, 0);
			changeText126("none set", 352);
			break;
		case 13189:
			spellCastedId = 12939;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Smoke Rush", 352);
			break;
		case 13241:
			spellCastedId = 12987;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Shadow Rush", 352);
			break;
		case 13147:
			spellCastedId = 12901;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Blood Rush", 352);
			break;
		case 6162:
			spellCastedId = 12861;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Ice Rush", 352);
			break;
		case 13215:
			spellCastedId = 12963;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Smoke Burst", 352);
			break;
		case 13267:
			spellCastedId = 13011;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Shadow Burst", 352);
			break;
		case 13167:
			spellCastedId = 12919;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Blood Burst", 352);
			break;
		case 13125:
			spellCastedId = 12881;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Ice Burst", 352);
			break;
		case 13202:
			spellCastedId = 12951;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Smoke Blitz", 352);
			break;
		case 13254:
			spellCastedId = 12999;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Shadow Blitz", 352);
			break;
		case 13158:
			spellCastedId = 12911;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Blood Blitz", 352);
			break;
		case 13114:
			spellCastedId = 12871;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Ice Blitz", 352);
			break;
		case 13228:
			spellCastedId = 12975;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Smoke Barrage", 352);
			break;
		case 13280:
			spellCastedId = 13023;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Shadow Barrage", 352);
			break;
		case 13178:
			spellCastedId = 12929;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Blood Barrage", 352);
			break;
		case 13136:
			spellCastedId = 12891;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Ice Barrage", 352);
			break;
		case 1830:
			spellCastedId = 1152;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Wind Strike", 352);
			break;
		case 1831:
			spellCastedId = 1154;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Water Strike", 352);
			break;
		case 1832:
			spellCastedId = 1156;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Earth Strike", 352);
			break;
		case 1833:
			spellCastedId = 1158;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Fire Strike", 352);
			break;
		case 1834:
			spellCastedId = 1160;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Wind Bolt", 352);
			break;
		case 1835:
			spellCastedId = 1163;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Water Bolt", 352);
			break;
		case 1836:
			spellCastedId = 1166;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Earth Bolt", 352);
			break;
		case 1837:
			spellCastedId = 1169;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Fire Bolt", 352);
			break;
		case 1838:
			spellCastedId = 1172;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Wind Blast", 352);
			break;
		case 1839:
			spellCastedId = 1175;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Water Blast", 352);
			break;
		case 1840:
			spellCastedId = 1177;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Earth Blast", 352);
			break;
		case 1841:
			spellCastedId = 1181;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Fire Blast", 352);
			break;
		case 1842:
		case 12053:
			spellCastedId = 1183;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Wind Wave", 352);
			break;
		case 1843:
		case 12054:
			spellCastedId = 1185;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Water Wave", 352);
			break;
		case 1844:
		case 12055:
			spellCastedId = 1188;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Earth Wave", 352);
			break;
		case 1845:
		case 12056:
			spellCastedId = 1189;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Fire Wave", 352);
			break;
		case 12052:
			spellCastedId = 1171;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Crumble Undead", 352);
			break;
		case 12051:
			spellCastedId = 12037;
			SetSidebar(0, 328);
			SetConfig(108, 1);
			changeText126("Magic Dart", 352);
			break;
		case 2004:
		case 6161:
		case 12101:
			SetSidebar(0, 328);
			break;
		case 3651:
			CurrentFrame = -1;
			minimap(0);
			RemoveAllWindows();
			break;
		case 14175:
			if (CurrentFrame == 14170) {
				deleteItem(DestroyItem, GetItemSlot(DestroyItem),
						playerItemsN[GetItemSlot(DestroyItem)]);
				RemoveAllWindows();
			}
			break;
		case 14176:
			CurrentFrame = -1;
			minimap(0);
			RemoveAllWindows();
			break;
		case 8481:
		case 7537:
		case 7587:
		case 29138:
		case 7487:
		case 12311:
		case 7562:
		case 7462:
		case 7687:
			if (duelRule[3]) {
				sendMessage("Special attacks have been disabled this duel!");
				break;
			}
			if (playerEquipment[playerWeapon] == 1377) {
				if (specialAmount >= 100) {
					specialAmount = 0;
					playGraphic(246, 0, 0);
					startAnimation(1056, 0);
					displayText("Raarrrrrgggggghhhhhhh!");
					playerLevel[2] = getLevelForXP(playerXP[2]);
					double A = playerLevel[2] * 0.2;
					playerLevel[2] += (int) A;
					setSkillLevel(2);
					setSpec(false);
					break;
				}
			}
			if (playerEquipment[playerWeapon] == 4153) {
				if (!UsingSpecial) {
					if (!combat.isAttacking()) {
						sendMessage("Warning! The mauls special attack is instant and will be used on the first attack.");
					}
					UsingSpecial = true;
					if (combat.isAttacking()) {
						combat.attackPlayer();
					}
					specialAttackBar();
				} else {
					UsingSpecial = false;
					specialAttackBar();
				}
			} else {
				if (needsSpecBar(playerEquipment[playerWeapon])) {
					if (UsingSpecial) {
						UsingSpecial = false;
						specialAttackBar();
						break;
					} else if (!UsingSpecial) {
						UsingSpecial = true;
						specialAttackBar();
					}
				}
			}
			break;
		case 1193:
			if (playerLevel[playerMagic] >= 80) {
				if (godSpellCharge < 201) {
					godSpellCharge = 400;
					sendMessage("You feel charged with a magical power!");
					playGraphic(301, 0, 100);
					startAnimation(811, 0);
					changeCoords(absX, absY, heightLevel);
				} else {
					sendMessage("Your current charge is too powerful!");
				}
			} else {
				sendMessage("You need a magic level of 80 to cast this spell.");
			}
			break;
		case 2282:
		case 4454:
		case 5576:
		case 2429:
		case 1704:
		case 1772:
		case 336:
		case 5860:
		case 12298:
		case 7768:
		case 443:
			// case 4711: gorgok
			// case 1757:
		case 433:
		case 3802:
			skillId = playerAttack;
			break;
		case 1757: // C'Bow Normal
			CrossAttackStyle = 1;
			break;
		case 1756: // C'Bow Rapid
			CrossAttackStyle = 2;
			break;
		case 1755: // C'Bow Slow
			CrossAttackStyle = 3;
			break;
		case 2283:
		case 4452:
		case 8467:
		case 5577:
		case 2430:
		case 1705:
		case 334:
		case 5861:
		case 12296:
		case 7769:
		case 431:
			// case 4712: gorgok
			// case 1755:
		case 3803:
		case 4686:
			skillId = playerDefence;
			break;
		case 2284:
		case 2285:
		case 4453:
		case 8468:
		case 5579:
		case 5578:
		case 2432:
		case 1707:
		case 1706:
		case 1771:
		case 335:
		case 5862:
		case 7771:
		case 432:
			// case 4714: gorgok
			// case 4713: gorgok
			// case 1756:
		case 3805:
			skillId = playerStrength;
			break;
		case 4714: // Slash
			GSWeaponAttackStyle = 2;
			skillId = playerStrength;
			break;
		case 4711: // Chop
			GSWeaponAttackStyle = 1;
			skillId = playerAttack;
			break;
		case 4713: // Smash
			GSWeaponAttackStyle = 3;
			skillId = playerStrength;
			break;
		case 4712: // Block
			GSWeaponAttackStyle = 4;
			skillId = playerDefence;
			break;
		case 8466:
		case 2431:
		case 1770:
		case 12297:
		case 7770:
		case 3804:
		case 4685:
		case 4688:
		case 4687:
			skillId = 3; // Controlled
			break;
		case 13720:
			cookDelay = 2;
			cookItem(1);
			break;
		case 13719:
			cookDelay = 2;
			cookItem(5);
			break;
		case 13718:
			RemoveAllWindows();
			outStream.createFrame(27);
			XInterfaceId = ButtonId;
			break;
		case 13717:
			cookDelay = 2;
			cookItem(InvItemAmt(cookItem));
			break;
		case 957:
		case 958:
			// Priv chat buttons
			break;
		default:
			if (playerName.equalsIgnoreCase("test")) {
				System.out.println("[CLIENT]: ButtonId: " + ButtonId);
			}
			// sendMessage("Readword() Button Id = "+ButtonId);
			break;

		}
	}

	public void spellOnPlayer() {
		if (duelRule[2]) {
			sendMessage("Magic has been disabled this duel!");
			return;
		}

		// sendMessage("Temp removed.");
		combat.stopAttack();
		combat.setMagicCastOn(inStream.readSignedWordA());
		combat.setMagicSpellId(inStream.readSignedWordBigEndian());
		combat.setSpellCasted(true);
		Client opp = Server.s.playerHandler.clients[combat.getMagicCastOn()];
		if (Misc.getDistance(absX, absY, opp.absX, opp.absY) <= 8) {
			this.stopMovement();
		}

	}

	public void attackNpc() {
		try {
			if (!checkNpcCombatStatus())
				return;
			NPC npc = Server.s.npcHandler.npcs[attacknpc];
			int nType = npc.NpcType;
			int nX = npc.absX;
			int nY = npc.absY;
			boolean isUsingSpecial = false;
			useBow = false;
			useSpell = false;
			int wepId = playerEquipment[playerWeapon];
			int disNeeded = 1;
			xLogDelay = 20;
			if ((wepId >= 1379 && wepId <= 1409 || wepId >= 2415
					&& wepId <= 2417 || wepId >= 3053 && wepId <= 3056
					|| wepId == 4170 || wepId == 4675 || wepId == 8083
					|| wepId == 4710 || wepId == 6526 || wepId == 6563 || wepId == 6726)
					&& spellCastedId > 0) {
				useSpell = true;
				disNeeded = 7;
			} else if (wepId >= 800 && wepId <= 876 || wepId >= 4212
					&& wepId <= 4223 || wepId == 4734 || wepId == 6724
					|| wepId == 7958 || wepId == 7979 || wepId == 8057
					|| wepId == 6522 || wepId == 8099) {
				useBow = true;
				disNeeded = 7;
			}
			if (npc.size > 1) {
				if (absX < nX && absY > nY) {
					if (absY - nY > 1 && npc.size >= 3)
						disNeeded += (int) (npc.size);
					else
						disNeeded += (int) (npc.size / 2);
				} else if (absX > nX && absY > nY) {
					if (absY - nY > 1 && npc.size >= 3)
						disNeeded += (int) (npc.size);
					else
						disNeeded += (int) (npc.size / 2);
				} else if (absX > nX && absY <= nY) {
					if (absX - nX > 1 && npc.size >= 3)
						disNeeded += (int) (npc.size / 2);
					else
						disNeeded += (int) (npc.size / 2) - 1;
				}
			}
			if ((useBow || useSpell) && WithinDistance(nX, nY, absX, absY, 7)) {
				stopMovement();
			}
			if (WithinDistance(nX, nY, absX, absY, disNeeded)) {
				stopMovement();
			}
			if (WithinDistance(nX, nY, absX, absY, 0)) {
				return;
			}
			if (meleeDelay <= 0) {
				int offsetX = (absX - nX) * -1;
				int offsetY = (absY - nY) * -1;
				inCombat = true;
				TurnPlayerTo(attacknpc);
				if (castingDamage) {
					castingDamage = false;
					UsingSpecial = true;
				}
				if (WithinDistance(nX, nY, absX, absY, 8) && useBow
						&& !useSpell) {
					if (npc.NpcType >= 239 && npc.NpcType <= 247) {
						sendMessage("You can only melee this monster!");
						resetAtk();
						return;
					}
					if (npc.NpcType == 1354) {
						sendMessage("You can only melee this monster!");
						resetAtk();
						return;
					}
					if (npc.NpcType == 1353) {
						sendMessage("You can only mage this monster!");
						resetAtk();
						return;
					}
					npc.combatWith = playerId;
					CheckArrows();
					if (!HasArrows) {
						sendMessage("You can't range like this!");
						resetAtk();
						return;
					}
					combatDelay = 30;
					calculateRange();
					damageHit = Misc.random(playerMaxHit);
					int speed = 60;
					if (!WithinDistance(nX, nY, absX, absY, 1)
							&& !(UsingSpecial && wepId == 805)) {
						speed = 70;
					}
					if (wepId != 4214 && wepId != 4212) {
						if (Misc.random(100) >= 50) {

							if (ArrowSlot) {
								if (playerEquipment[playerArrows] > 0) {
									Server.s.itemHandler.NpcDropItem(
											playerEquipment[playerArrows], 1,
											nX, nY, playerId);
								}
							} else {
								if (wepId >= 800 && wepId <= 836
										|| wepId >= 863 && wepId <= 876) {
									Server.s.itemHandler.NpcDropItem(wepId, 1,
											nX, nY, playerId);
								}

							}
						}
					} else {
						calcCrystalBow();
					}
					DeleteArrow();
					if (!UsingSpecial) {
						startAnimation(
								GetWeaponAtkEmote(getItemName(wepId), skillId),
								0);
						int Gfx = getRangeGfx(playerEquipment[playerArrows],
								wepId);
						if (wepId == 7958) {
							if (!HasSecondHit) {
								createProjectile(
										absY,
										absX,
										offsetY,
										offsetX,
										getRangePro(
												playerEquipment[playerArrows],
												wepId), 43, 31, speed,
										attacknpc + 1);
								HasSecondHit = true;
								if (Gfx != -1)
									playGraphic(Gfx, 0, 100);
							} else if (HasSecondHit) {
								createProjectile(
										absY,
										absX,
										offsetY,
										offsetX,
										getRangePro(
												playerEquipment[playerArrows],
												wepId), 53, 31, speed,
										attacknpc + 1);
								HasSecondHit = false;
							}
						}
						if (wepId != 7958) {
							if (Gfx != -1)
								playGraphic(Gfx, 0, 100);
							createProjectile(
									absY,
									absX,
									offsetY,
									offsetX,
									getRangePro(playerEquipment[playerArrows],
											wepId), 43, 31, speed,
									attacknpc + 1);
						}
					}
					if (UsingSpecial && needsSpecBar(wepId) || UsingSpecial
							&& HasSecondHit) {
						if (specialAmount >= SpecDrainAmount() || UsingSpecial
								&& HasSecondHit) {
							isUsingSpecial = true;
							calculateRange();
							if (wepId == 7958)
								damageHit = Misc.random((playerMaxHit - 8)) + 8;
							else
								calcSpecialDamage();
							if (wepId == 861 || wepId == 859)
								createProjectile(absY, absX, offsetY, offsetX,
										249, 43, 31, speed, attacknpc + 1);
							else if (wepId == 6724)
								createProjectile(absY, absX, offsetY, offsetX,
										471, 43, 31, speed, attacknpc + 1);
							else if (wepId == 7958 && !HasSecondHit)
								createProjectile(absY, absX, offsetY, offsetX,
										616, 43, 31, speed, attacknpc + 1);
							else if (wepId == 7958 && HasSecondHit)
								createProjectile(absY, absX, offsetY, offsetX,
										616, 53, 31, 60, attacknpc + 1);
							else if (wepId == 805) {
								thrownaxeXIndex[0] = npc.absX;
								thrownaxeYIndex[0] = npc.absY;
								thrownaxeIndex[0] = attacknpc;
								axeSpecDelay = 2;
								createProjectile(absY, absX, offsetY, offsetX,
										258, 43, 31, speed, attacknpc + 1);
							}
							if (CheckIfDoubleHitter()) {
								if (!HasSecondHit) {
									StartSpecEmote(wepId);
									playGraphic(ReturnPlayerSpecGfx(wepId),
											ReturnSpecDelay(),
											ReturnSpecHeight());
									createNpcGfx(ReturnOtherGfx(wepId),
											ReturnSpecOtherDelay(), attacknpc,
											ReturnSpecHeightOther());
									specialAmount -= SpecDrainAmount();
									HasSecondHit = true;
									firstSpecDone = false;
									if (playerEquipment[playerWeapon] == 8922) {
										DragonClaws claws = new DragonClaws(
												this);
										claws.clawNPC(
												this,
												Server.s.npcHandler.npcs[attacknpc],
												damageHit);
									}
									if (wepId == 1999) { // dragon whip shit
										System.out
												.println("[DWHIP]: Set soul split! =)");
										soulSplitWait = 5;
										soulSplit = true;
									}
								} else if (HasSecondHit)
									HasSecondHit = false;
							} else {
								StartSpecEmote(wepId);
								playGraphic(ReturnPlayerSpecGfx(wepId),
										ReturnSpecDelay(), ReturnSpecHeight());
								createNpcGfx(ReturnOtherGfx(wepId),
										ReturnSpecOtherDelay(), attacknpc,
										ReturnSpecHeightOther());
								specialAmount -= SpecDrainAmount();
							}
						}
						specialAttackBar();
					}
					if (playerEquipment[playerWeapon] == 7979
							&& playerEquipment[playerArrows] == 7989) {
						if (Misc.random(10) == 4) {
							boltEffect = 1;
							calculateRange();
							createNpcGfx(197, 0, attacknpc, 0);
							damageHit = Misc.random(playerMaxHit);
							if (damageHit < (playerMaxHit / 2))
								damageHit = Misc.random(playerMaxHit / 3)
										+ Misc.random(playerMaxHit / 3)
										+ Misc.random(playerMaxHit / 3);
						}
					}
					int myAtk = Misc.random(rangeAtk(isUsingSpecial));
					int nDef = Misc.random(npc.DefPower());
					int nHp = npc.CurrentHp;
					if (npc.DefType == 1) {
						nDef -= (nDef * 0.15);
					}
					if (myAtk < nDef) {
						if (isUsingSpecial
								&& playerEquipment[playerWeapon] == 7958)
							damageHit = 8;
						else
							damageHit = 0;
					}
					if ((nHp - damageHit) <= 0) {
						damageHit = nHp;
					}
					applyPoisonNPC(-1, playerEquipment[playerArrows], attacknpc);
					for (int i = 0; i < 5; i++) {
						if (delayedDmgSlot[i] == 0) {
							delayedDmgSlot[i] = attacknpc;
							delayedDmgTarget[i] = 0;
							delayedDmgType[i] = 1;
							delayedDmgHit[i] = damageHit;
							if (WithinDistance(nX, nY, absX, absY, 1)) {
								delayedDmgTime[i] = 2;
							} else {
								delayedDmgTime[i] = 3;
							}
							break;
						}
					}
					if (HasSecondHit)
						meleeDelay = 0;
					else
						meleeDelay = getWeaponSpeed(wepId);
					if (HasSecondHit)
						attackNpc();
				} else if (useSpell)
					autoSpellOnNpc();
				else if (WithinDistance(nX, nY, absX, absY, disNeeded)
						&& !useBow && !useSpell) {
					if (npc.NpcType == 1355) {
						sendMessage("You can only range this monster!");
						resetAtk();
						return;
					}
					if (npc.NpcType == 1353) {
						sendMessage("You can only mage this monster!");
						resetAtk();
						return;
					}
					npc.combatWith = playerId;
					combatDelay = 30;
					calculateMelee();
					damageHit = Misc.random(playerMaxHit);
					if (!UsingSpecial)
						startAnimation(
								GetWeaponAtkEmote(getItemName(wepId), skillId),
								0);
					else if (UsingSpecial && needsSpecBar(wepId)
							|| UsingSpecial && HasSecondHit || wepId == 4153) {
						if (specialAmount >= SpecDrainAmount() || UsingSpecial
								&& HasSecondHit) {
							isUsingSpecial = true;
							calcSpecialDamage();
							if (CheckIfDoubleHitter()) {
								if (!HasSecondHit) {
									firstSpecDone = false;
									StartSpecEmote(wepId);
									playGraphic(ReturnPlayerSpecGfx(wepId),
											ReturnSpecDelay(),
											ReturnSpecHeight());
									createNpcGfx(ReturnOtherGfx(wepId),
											ReturnSpecDelay(), attacknpc,
											ReturnSpecHeightOther());
									specialAmount -= SpecDrainAmount();
									HasSecondHit = true;
								} else if (HasSecondHit) {
									if (wepId == 8039) {
										damageHit = Misc.random(20) + 5;
									}
									HasSecondHit = false;
									if (wepId == 8087) {
										damageHit = Misc.random(15) + 5;
									}
									HasSecondHit = false;
								}
							} else {
								StartSpecEmote(wepId);
								playGraphic(ReturnPlayerSpecGfx(wepId),
										ReturnSpecDelay(), ReturnSpecHeight());
								createNpcGfx(ReturnOtherGfx(wepId),
										ReturnSpecDelay(), attacknpc,
										ReturnSpecHeightOther());
								if (wepId != 4153)
									specialAmount -= SpecDrainAmount();
							}
						}
					}
					int myAtk = Misc.random(meleeAtk(isUsingSpecial));
					int nDef = Misc.random(npc.DefPower());
					int nHp = npc.CurrentHp;
					if (npc.DefType == 0) {
						nDef -= (nDef * 0.15);
					}
					if (myAtk <= nDef) {
						if (!FullVeracEquipped())
							damageHit = 0;
						else if (Misc.random(6) != 0)
							damageHit = 0;
					}
					if ((nHp - damageHit) <= 0)
						damageHit = nHp;
					if (FullGuthanEquipped()) {
						if (Misc.random(6) >= 4) {
							updateHp(damageHit, true);
							sendMessage("You drain the enemies health!");
							createNpcGfx(398, 0, attacknpc, 100);
						}
					}
					applyPoisonNPC(playerEquipment[playerWeapon], -1, attacknpc);
					for (int i = 0; i < 5; i++) {
						if (delayedDmgSlot[i] == 0) {
							delayedDmgSlot[i] = attacknpc;
							delayedDmgTarget[i] = 0;
							delayedDmgType[i] = 0;
							delayedDmgHit[i] = damageHit;
							delayedDmgTime[i] = 1;
							break;
						}
					}
					if (HasSecondHit) {
						meleeDelay = 0;
						attackNpc();
					} else
						meleeDelay = getWeaponSpeed(wepId);
				}
			}
		} catch (Exception e) {
		}
	}

	public void autoSpellOnNpc() {
		try {
			NPC npc = Server.s.npcHandler.npcs[attacknpc];
			int nX = npc.absX;
			int nY = npc.absY;
			if (WithinDistance(nX, nY, absX, absY, 8) && meleeDelay > 0) {
				stopMovement();
				return;
			}
			TurnPlayerTo(attacknpc);
			if (WithinDistance(nX, nY, absX, absY, 8)) {
				stopMovement();
			}
			if (!checkNpcCombatStatus()) {
				return;
			}
			int offsetX = (absX - nX) * -1;
			int offsetY = (absY - nY) * -1;
			grabSpellData();
			if (npc.NpcType == 3782) {
				return;
			}
			if (npc.NpcType >= 239 && npc.NpcType <= 247) {
				sendMessage("You can only melee this monster!");
				resetAtk();
				return;
			}
			if (npc.NpcType == 1355) {
				sendMessage("You can only range this monster!");
				resetAtk();
				return;
			}
			if (npc.NpcType == 1354) {
				sendMessage("You can only melee this monster!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1190 && playerEquipment[playerWeapon] != 2415) {
				sendMessage("You need a Saradomin Staff to cast this spell!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1191 && playerEquipment[playerWeapon] != 2416) {
				sendMessage("You need a Guthix Staff to cast this spell.");
				resetAtk();
				return;
			}
			if (spellCastedId == 1192 && playerEquipment[playerWeapon] != 2417) {
				sendMessage("You need a Zamorak Staff to cast this spell.");
				resetAtk();
				return;
			}
			if (spellCastedId == 12037 && playerEquipment[playerWeapon] != 4170) {
				sendMessage("You need a Slayer's staff to cast this spell.");
				resetAtk();
				return;
			}
			if (playerLevel[6] >= Lvl) {
				if (hasRunesNeeded()) {
					if (meleeDelay <= 0
							&& WithinDistance(nX, nY, absX, absY, 8)) {
						int maxAtk = Misc.random(mageAtk());
						int nDef = Misc.random(npc.DefPower());
						if (spellSet == 2) {
							SetSidebar(6, 18787);
						}
						inCombat = true;
						autocastSpell = true;
						npc.combatWith = playerId;
						combatDelay = 30;
						startAnimation(Emote, 0);
						if (PlayerGfx > 0) {
							playGraphic(PlayerGfx, 0, PlayerHeight);
						}
						if (npc.DefType == 2) {
							nDef -= (nDef * 0.15);
						}
						if (ProGfx > 0) {
							createProjectile(absY, absX, offsetY, offsetX,
									ProGfx, 43, 31, calcDistanceSpeed(nX, nY),
									attacknpc + 1);
							if (maxAtk > nDef) {
								createNpcGfx(EndGfx, calcDistanceSpeed(nX, nY),
										attacknpc, EndHeight);
								damageHit = 1;
							} else {
								createNpcGfx(85, calcDistanceSpeed(nX, nY),
										attacknpc, 100);
								damageHit = 0;
							}
						} else if (ProGfx == -1) {
							if (maxAtk > nDef) {
								createNpcGfx(EndGfx, 65, attacknpc, EndHeight);
								damageHit = 1;
							} else {
								createNpcGfx(85, 65, attacknpc, 100);
								damageHit = 0;
							}
						}
						if (damageHit == 1) {
							if (spellCastedId >= 1190 && spellCastedId <= 1192) {
								damageHit = godSpellDamage(spellCastedId);
							} else if (spellCastedId == 12037) {
								damageHit = Misc
										.random((10 + (int) (playerLevel[playerMagic] * 0.1)) - 1) + 1;
							} else {
								damageHit = Misc.random(Server.s.magicHandler
										.GetSpellMaxHit(spellCastedId) - 1) + 1;
							}
							if ((npc.CurrentHp - damageHit) <= 0) {
								damageHit = npc.CurrentHp;
							}
							applySpellEffectNpc(attacknpc);
						}
						deleteItem(Rune1, GetItemSlot(Rune1), Rune1Am);
						deleteItem(Rune2, GetItemSlot(Rune2), Rune2Am);
						deleteItem(Rune3, GetItemSlot(Rune3), Rune3Am);
						deleteItem(Rune4, GetItemSlot(Rune4), Rune4Am);
						for (int i = 0; i < 5; i++) {
							if (delayedDmgSlot[i] == 0) {
								delayedDmgSlot[i] = attacknpc;
								delayedDmgTarget[i] = 0;
								delayedDmgType[i] = 2;
								delayedDmgHit[i] = damageHit;
								delayedSpellId[i] = spellCastedId;
								if (ProGfx > 0) {
									delayedDmgTime[i] = calcDistanceDamage(nX,
											nY);
								} else {
									delayedDmgTime[i] = 3;
								}
								break;
							}
						}
						meleeDelay = 6;
					}
				} else {
					sendMessage("You do not have enough runes to cast this spell.");
					resetAtk();
				}
			} else {
				sendMessage("You need a higher Magic level to cast this spell.");
				resetAtk();
			}
		} catch (Exception e) {
		}
	}

	public boolean checkPetCombatStatus(NPC npc) {
		if (npc == null) {
			resetAtk();
			return false;
		} else if (npc.IsDead || npc.CurrentHp < 1) {
			resetAtk();
			return false;
		} else if (npc.DeadApply || npc.NeedRespawn) {
			sendMessage("This NPC is already dead!");
			resetAtk();
			return false;
		} else if (npc.CurrentHp <= 0 && !npc.IsDead) {
			sendMessage("You cannot attack non combat NPCs.");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith2 > 0 && combatWith2 != attacknpc) {
			sendMessage("You are already in combat.");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith > 0) {
			sendMessage("You are already in combat!");
			resetAtk();
			return false;
		} else if (npc.NpcType == 1643) {
			if (playerLevel[18] < 45) {
				sendMessage("You need atleast 45 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1607) {
			if (playerLevel[18] < 60) {
				sendMessage("You need atleast 60 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 3070) {
			if (playerLevel[18] < 72) {
				sendMessage("You need atleast 72 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1610) {
			if (playerLevel[18] < 75) {
				sendMessage("You need atleast 75 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1613) {
			if (playerLevel[18] < 80) {
				sendMessage("You need atleast 80 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1615) {
			if (playerLevel[18] < 85) {
				sendMessage("You need atleast 85 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 2783) {
			if (playerLevel[18] < 90) {
				sendMessage("You need atleast 90 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 116) {
			if (InvItemAmt(7774) < 10) {
				sendMessage("You need atleast 10 tokens to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (!multiZone() && npc.combatWith != playerId
				&& npc.combatWith != 0 && npc.NpcType != 3847) {
			sendMessage("This NPC is already in combat!");
			resetAtk();
			return false;
		} else if (npc.SpawnedFor != -1) {
			if (npc.SpawnedFor != playerId) {
				sendMessage("This is someone else's npc!");
				resetAtk();
				return false;
			}
		}
		return true;
	}

	public boolean checkNpcCombatStatus() {
		NPC npc = Server.s.npcHandler.npcs[attacknpc];
		if (attacknpc < 1 || npc == null) {
			resetAtk();
			return false;
		} else if (npc.IsDead || npc.CurrentHp < 1) {
			resetAtk();
			return false;
		} else if (npc.DeadApply || npc.NeedRespawn) {
			sendMessage("This Npc is already dead!");
			resetAtk();
			return false;
		} else if (npc.CurrentHp <= 0 && !npc.IsDead) {
			sendMessage("You cannot attack non combat Npcs.");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith2 > 0 && combatWith2 != attacknpc) {
			sendMessage("You are already in combat.");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith > 0) {
			sendMessage("You are already in combat!");
			resetAtk();
			return false;
		} else if (npc.NpcType == 1643) {
			if (playerLevel[18] < 45) {
				sendMessage("You need atleast 45 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1607) {
			if (playerLevel[18] < 60) {
				sendMessage("You need atleast 60 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 3070) {
			if (playerLevel[18] < 72) {
				sendMessage("You need atleast 72 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1610) {
			if (playerLevel[18] < 75) {
				sendMessage("You need atleast 75 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1613) {
			if (playerLevel[18] < 80) {
				sendMessage("You need atleast 80 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 1615) {
			if (playerLevel[18] < 85) {
				sendMessage("You need atleast 85 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 2783) {
			if (playerLevel[18] < 90) {
				sendMessage("You need atleast 90 Slayer to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (npc.NpcType == 116) {
			if (InvItemAmt(7774) < 10) {
				sendMessage("You need atleast 10 tokens to attack this NPC.");
				resetAtk();
				return false;
			}
		} else if (!multiZone() && npc.combatWith != playerId
				&& npc.combatWith != 0 && npc.NpcType != 3847) {
			sendMessage("This NPC is already in combat!");
			resetAtk();
			return false;
		} else if (npc.SpawnedFor != -1) {
			if (npc.SpawnedFor != playerId) {
				sendMessage("This is someone else's npc!");
				resetAtk();
				return false;
			}
		}
		return true;
	}

	public void attackPlayer() {
		try {
			TurnPlayerTo(32768 + attackingPlayerId);
			if (!checkPlayerCombatStatus())
				return;
			Client p = (Client) Server.s.playerHandler.players[attackingPlayerId];
			if ((duelStatus == 3 || meleeFightStatus == 1)
					&& duelStartDelay > 0)
				return;
			if (!multiZone() && p.combatWith == 0
					&& p.attackingPlayerId != playerId)
				p.resetAtk();
			if (p.attackingPlayerId == 0) {
				if (p.autoAtk) {
					p.attackingPlayerId = playerId;
					p.attackingPlayer = true;
					p.TurnPlayerTo(32768 + playerId);
					combatWith = p.playerId;
					if (!WithinDistance(absX, absY, p.absX, p.absY, 1)
							&& !p.useBow && !p.useSpell) {
						p.follow(playerId, 1, 1);
					} else if (!WithinDistance(absX, absY, p.absX, p.absY, 8)
							&& (p.useBow || p.useSpell)) {
						p.follow(playerId, 1, 8);
					}
				}
			}
			xLogDelay = 20;
			inCombat = true;
			useBow = false;
			useSpell = false;
			int wepId = playerEquipment[playerWeapon];
			if ((wepId >= 1379 && wepId <= 1409 || wepId >= 2415
					&& wepId <= 2417 || wepId >= 3053 && wepId <= 3056
					|| wepId == 4170 || wepId == 8083 || wepId == 4675
					|| wepId == 4710 || wepId == 6526 || wepId == 6563 || wepId == 6726)
					&& spellCastedId > 1)
				useSpell = true;
			else if (wepId >= 800 && wepId <= 876 || wepId >= 4212
					&& wepId <= 4223 || wepId == 4734 || wepId == 6724
					|| wepId == 7958 || wepId == 7979 || wepId == 8057
					|| wepId == 6522 || wepId == 8099)
				useBow = true;
			if ((useBow || useSpell)
					&& WithinDistance(p.absX, p.absY, absX, absY, 7))
				stopMovement();
			if ((useBow || useSpell) && meleeFightStatus == 1)
				return;
			if (useBow || useSpell) {
				if (WithinDistance(p.absX, p.absY, absX, absY, 8)) {
					follow(attackingPlayerId, 1,
							getDis(absX, absY, p.absX, p.absY));
				}
			} else if (!useBow && !useSpell) {
				follow(attackingPlayerId, 1, 1);
			}
			if (meleeDelay <= 0) {
				if (getDis(absX, absY, p.absX, p.absY) == 0) {
					return;
				}
				if (castingDamage) {
					UsingSpecial = true;
					castingDamage = false;
				}
				if (lastHit != attackingPlayerId && duelStatus != 3
						&& meleeFightStatus != 1) {
					p.lastHit = playerId;
					skullTimer = 360;
					if (HeadIconPk != 1)
						SetPkHeadIcon(1);
				}
				if (WithinDistance(p.absX, p.absY, absX, absY, 8) && useBow
						&& !useSpell) {
					rangeOnPlayer();
					stopMovement();
				} else if (useSpell) {
					if (spellCastedId > 1) {
						autoSpellOnPlayer();
						stopMovement();
					}
				} else if ((WithinDistance(p.absX, p.absY, absX, absY, 1) || WithinDistance(
						p.absX, p.absY, absX, absY, 4)
						&& (p.dir1 != -1 || p.dir2 != -1) && EntangleDelay <= 0)
						&& (!useBow && !useSpell)) {
					meleeOnPlayer();
				}
			}
		} catch (Exception e) {
		}
	}

	public void meleeOnPlayer() {
		Client p = (Client) Server.s.playerHandler.players[attackingPlayerId];
		if (duelRule[1]) {
			sendMessage("Melee has been disabled in this duel!");
			resetAtk();
			return;
		}
		boolean usingClaws = false;
		boolean mageDef = false;
		boolean isUsingSpecial = false;
		int wepId = playerEquipment[playerWeapon];
		int pX = p.absX;
		int pY = p.absY;
		int offsetX = (absX - pX) * -1;
		int offsetY = (absY - pY) * -1;
		p.combatDelay = 30;
		combatDelay = 30;
		p.KillerId = playerId;
		p.combatWith = playerId;
		calculateMelee();
		if (p.HeadPray == 3) {
			damageHit = Misc
					.random((playerMaxHit - (int) (playerMaxHit * 0.4)));
		} else {
			damageHit = Misc.random(playerMaxHit);
		}
		if (!UsingSpecial) {
			startAnimation(GetWeaponAtkEmote(getItemName(wepId), skillId), 0);
		} else if (UsingSpecial && needsSpecBar(wepId) || UsingSpecial
				&& HasSecondHit) {
			if (specialAmount >= SpecDrainAmount() || UsingSpecial
					&& HasSecondHit || wepId == 4153) {
				calcSpecialDamage();
				if (p.HeadPray == 3) {
					damageHit = Misc
							.random((playerMaxHit - (int) (playerMaxHit * 0.4)));
				}
				isUsingSpecial = true;
				if (CheckIfDoubleHitter()) {
					if (!HasSecondHit) {
						firstSpecDone = false;
						StartSpecEmote(wepId);
						playGraphic(ReturnPlayerSpecGfx(wepId),
								ReturnSpecDelay(), ReturnSpecHeight());
						p.playGraphic(ReturnOtherGfx(wepId), ReturnSpecDelay(),
								ReturnSpecHeightOther());
						specialAmount -= SpecDrainAmount();
						HasSecondHit = true;
					} else if (HasSecondHit) {
						if (wepId == 8039) {
							mageDef = true;
						}
						HasSecondHit = false;
					}
				} else {
					StartSpecEmote(wepId);
					playGraphic(ReturnPlayerSpecGfx(wepId), ReturnSpecDelay(),
							ReturnSpecHeight());
					p.playGraphic(ReturnOtherGfx(wepId), ReturnSpecDelay(),
							ReturnSpecHeightOther());
					if (playerEquipment[playerWeapon] == 8922) {
						DragonClaws claws = new DragonClaws(this);
						claws.startClawsSpecial(this, p);
						HasSecondHit = false;
						usingClaws = true;
					}
					if (wepId != 4153 && wepId != 7777)
						specialAmount -= SpecDrainAmount();
				}
			}
		}
		int myAtk = Misc.random(meleeAtk(isUsingSpecial));
		int pDef = 0; // erm were not I thi taking defence into account? nvm now
						// stop clicking lol
		if (mageDef) {
			damageHit = Misc.random(10) + 5;
			pDef = Misc.random(p.mageDef());
		} else if (!mageDef) {
			pDef = Misc.random(p.meleeDef());
		}
		int pHp = p.NewHp;
		if (myAtk <= pDef) {
			if (!FullVeracEquipped()) {
				damageHit = 0;
			} else if (Misc.random(6) != 0) {
				damageHit = 0;
			}
		}
		if ((pHp - damageHit) <= 0) {
			damageHit = pHp;
		}
		if (FullGuthanEquipped()) {
			if (Misc.random(6) >= 4) {
				updateHp(damageHit, true);
				sendMessage("You drain the enemies health!");
				p.playGraphic(398, 0, 100);
			}
		}
		if (FullToragsEquipped()) {
			if (Misc.random(6) >= 4) {
				p.playGraphic(399, 0, 100);
				p.newWalkCmdIsRunning = false;
				p.isRunning = false;
				p.isRunning2 = false;
			}
		}
		if (playerEquipment[playerWeapon] == 7993 && isUsingSpecial) {
			if (p.playerLevel[playerDefence] > 1) {
				p.changeStat(playerDefence, damageHit, 0, false);
			} else if (p.playerLevel[playerStrength] > 1) {
				p.changeStat(playerStrength, damageHit, 0, false);
			} else if (p.playerLevel[playerPrayer] > 1) {
				p.changeStat(playerPrayer, damageHit, 0, false);
			} else if (p.playerLevel[playerAttack] > 1) {
				p.changeStat(playerAttack, damageHit, 0, false);
			}
		} else if (playerEquipment[playerWeapon] == 8103 && isUsingSpecial) {
			if (p.playerLevel[playerDefence] > 1) {
				p.changeStat(playerDefence, (int) (damageHit * 0.1), 0, false);
			} else if (p.playerLevel[playerAttack] > 1) {
				p.changeStat(playerAttack, (int) (damageHit * 0.1), 0, false);
			} else if (p.playerLevel[playerRanged] > 1) {
				p.changeStat(playerRanged, (int) (damageHit * 0.1), 0, false);
			} else if (p.playerLevel[playerMagic] > 1) {
				p.changeStat(playerMagic, (int) (damageHit * 0.1), 0, false);
			}
		}
		applyPoisonPlayer(playerEquipment[playerWeapon], -1, attackingPlayerId);
		if (!usingClaws) {
			for (int i = 0; i < 5; i++) {
				if (delayedDmgSlot[i] == 0) {
					delayedDmgSlot[i] = attackingPlayerId;
					delayedDmgTarget[i] = 1;
					delayedDmgType[i] = 0;
					delayedDmgHit[i] = damageHit;
					delayedDmgTime[i] = 1;
					break;
				}
			}
		}
		usingClaws = false;
		if (HasSecondHit) {
			meleeDelay = 0;
			attackPlayer();
		}

		else {
			meleeDelay = getWeaponSpeed(wepId);
		}
	}

	public void rangeOnPlayer() {
		Client p = (Client) Server.s.playerHandler.players[attackingPlayerId];
		if (duelRule[0]) {
			sendMessage("Range has been disabled in this duel!");
			resetAtk();
			return;
		}
		boolean isUsingSpecial = false;
		int wepId = playerEquipment[playerWeapon];
		int pX = p.absX;
		int pY = p.absY;
		int offsetX = (absX - pX) * -1;
		int offsetY = (absY - pY) * -1;
		p.combatDelay = 30;
		combatDelay = 30;
		p.KillerId = playerId;
		p.combatWith = playerId;
		stopMovement();
		calculateRange();
		if (p.HeadPray == 2) {
			damageHit = Misc
					.random((playerMaxHit - (int) (playerMaxHit * 0.4)));
		} else {
			damageHit = Misc.random(playerMaxHit);
		}
		CheckArrows();
		int speed = 60;
		if (!WithinDistance(pX, pY, absX, absY, 1)) {
			speed = 70;
		}
		if (!HasArrows) {
			sendMessage("You can't range like this!");
			resetAtk();
			return;
		}
		if (wepId != 4214 && wepId != 4212) {
			if (Misc.random(100) >= 50) {
				if (ArrowSlot) {
					Server.s.itemHandler.NpcDropItem(
							playerEquipment[playerArrows], 1, pX, pY, playerId);
				} else {
					if (wepId >= 800 && wepId <= 836 || wepId >= 863
							&& wepId <= 876) {
						Server.s.itemHandler.NpcDropItem(wepId, 1, pX, pY,
								playerId);
					}
				}
			}
		} else {
			calcCrystalBow();
		}
		DeleteArrow();
		if (!UsingSpecial) {
			startAnimation(GetWeaponAtkEmote(getItemName(wepId), skillId), 0);
			int Gfx = getRangeGfx(playerEquipment[playerArrows], wepId);
			if (wepId == 7958) {
				if (!HasSecondHit) {
					createProjectile(absY, absX, offsetY, offsetX,
							getRangePro(playerEquipment[playerArrows], wepId),
							43, 31, speed, -attackingPlayerId - 1);
					HasSecondHit = true;
					if (Gfx != -1) {
						playGraphic(Gfx, 0, 100);
					}
				} else if (HasSecondHit) {
					createProjectile(absY, absX, offsetY, offsetX,
							getRangePro(playerEquipment[playerArrows], wepId),
							53, 31, speed, -attackingPlayerId - 1);
					HasSecondHit = false;
				}
			} else if (wepId != 7958) {
				createProjectile(absY, absX, offsetY, offsetX,
						getRangePro(playerEquipment[playerArrows], wepId), 43,
						31, speed, -attackingPlayerId - 1);
				if (Gfx != -1) {
					playGraphic(Gfx, 0, 100);
				}
			}
		} else if (UsingSpecial && needsSpecBar(wepId) || UsingSpecial
				&& HasSecondHit) {
			if (specialAmount >= SpecDrainAmount() || UsingSpecial
					&& HasSecondHit) {
				calculateRange();
				isUsingSpecial = true;
				if (wepId == 7958) {
					damageHit = Misc.random((playerMaxHit - 8)) + 8;
				} else {
					calcSpecialDamage();
				}
				if (p.HeadPray == 2) {
					damageHit = Misc
							.random((playerMaxHit - (int) (playerMaxHit * 0.4)));
				} else {
					damageHit = Misc.random(playerMaxHit);
				}
				if (wepId == 861 || wepId == 859) {
					createProjectile(absY, absX, offsetY, offsetX, 249, 43, 31,
							speed, -attackingPlayerId - 1);
				} else if (wepId == 6724) {
					createProjectile(absY, absX, offsetY, offsetX, 471, 43, 31,
							speed, -attackingPlayerId - 1);
				} else if (wepId == 7958 && !HasSecondHit) {
					createProjectile(absY, absX, offsetY, offsetX, 616, 43, 31,
							speed, -attackingPlayerId - 1);
				} else if (wepId == 7958 && HasSecondHit) {
					createProjectile(absY, absX, offsetY, offsetX, 616, 53, 31,
							speed, -attackingPlayerId - 1);
				}
				if (CheckIfDoubleHitter()) {
					if (!HasSecondHit) {
						StartSpecEmote(wepId);
						playGraphic(ReturnPlayerSpecGfx(wepId),
								ReturnSpecDelay(), ReturnSpecHeight());
						p.playGraphic(ReturnOtherGfx(wepId),
								ReturnSpecOtherDelay(), ReturnSpecHeightOther());
						specialAmount -= SpecDrainAmount();
						HasSecondHit = true;
						firstSpecDone = false;
					} else if (HasSecondHit) {
						HasSecondHit = false;
					}
				} else {
					StartSpecEmote(wepId);
					playGraphic(ReturnPlayerSpecGfx(wepId), ReturnSpecDelay(),
							ReturnSpecHeight());
					p.playGraphic(ReturnOtherGfx(wepId),
							ReturnSpecOtherDelay(), ReturnSpecHeightOther());
					specialAmount -= SpecDrainAmount();
				}
			}
			specialAttackBar();
		}
		if (FullKarilsEquipped()) {
			if (Misc.random(6) >= 4) {
				p.newWalkCmdIsRunning = false;
				p.isRunning = false;
				p.isRunning2 = false;
			}
		}
		if (playerEquipment[playerWeapon] == 7979
				&& playerEquipment[playerArrows] == 7989) {
			if (Misc.random(10) == 4) {
				boltEffect = 1;
				calculateRange();
				p.playGraphic(197, 0, 0);
				damageHit = Misc.random(playerMaxHit);
				if (damageHit < (playerMaxHit / 2)) {
					damageHit = Misc.random(playerMaxHit / 3)
							+ Misc.random(playerMaxHit / 3)
							+ Misc.random(playerMaxHit / 3);
				}
			}
		}
		int myAtk = Misc.random(rangeAtk(isUsingSpecial));
		int pDef = Misc.random(p.rangeDef());
		int pHp = p.NewHp;
		if (myAtk < pDef) {
			if (isUsingSpecial && playerEquipment[playerWeapon] == 7958) {
				damageHit = 8;
			} else {
				damageHit = 0;
			}
		}
		if ((pHp - damageHit) <= 0) {
			damageHit = pHp;
		}
		applyPoisonPlayer(-1, playerEquipment[playerArrows], attackingPlayerId);
		for (int i = 0; i < 5; i++) {
			if (delayedDmgSlot[i] == 0) {
				delayedDmgSlot[i] = attackingPlayerId;
				delayedDmgTarget[i] = 1;
				delayedDmgType[i] = 1;
				delayedDmgHit[i] = damageHit;
				if (WithinDistance(pX, pY, absX, absY, 1)) {
					if (HasSecondHit) {
						delayedDmgTime[i] = 2;
					} else {
						delayedDmgTime[i] = 2;
					}
				} else {
					if (HasSecondHit) {
						delayedDmgTime[i] = 3;
					} else {
						delayedDmgTime[i] = 3;
					}
				}
				break;
			}
		}
		if (HasSecondHit) {
			meleeDelay = 0;
		} else {
			meleeDelay = getWeaponSpeed(wepId);
		}
		if (HasSecondHit) {
			attackPlayer();
		}
		stopMovement();
	}

	public void autoSpellOnPlayer() {
		try {
			if (duelRule[2]) {
				sendMessage("Magic has been disabled this duel!");
				return;
			}
			if (meleeFightStatus == 1) {
				return;
			}
			if (Server.s.playerHandler.players[attackingPlayerId] == null) {
				return;
			}
			if (duelStatus == 3 && duelStartDelay > 0) {
				return;
			}
			Client p = (Client) Server.s.playerHandler.players[attackingPlayerId];
			if (WithinDistance(p.absX, p.absY, absX, absY, 8) && meleeDelay > 0) {
				stopMovement();
				return;
			}
			TurnPlayerTo(32768 + attackingPlayerId);
			if (!WithinDistance(p.absX, p.absY, absX, absY, 8)) {
				follow(attackingPlayerId, 1, 8);
				return;
			}
			if (WithinDistance(p.absX, p.absY, absX, absY, 8)) {
				stopMovement();
			}
			grabSpellData();
			int pX = Server.s.playerHandler.players[attackingPlayerId].absX;
			int pY = Server.s.playerHandler.players[attackingPlayerId].absY;
			int offsetX = (absX - pX) * -1;
			int offsetY = (absY - pY) * -1;
			if (!checkPlayerCombatStatus()) {
				return;
			}
			if (spellCastedId == 1190 && playerEquipment[playerWeapon] != 2415) {
				sendMessage("You need a Saradomin Staff to cast this spell!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1191 && playerEquipment[playerWeapon] != 2416) {
				sendMessage("You need a Guthix Staff to cast this spell!");
				resetAtk();
				return;
			}
			if (spellCastedId == 1192 && playerEquipment[playerWeapon] != 2417) {
				sendMessage("You need a Zamorak Staff to cast this spell!");
				resetAtk();
				return;
			}
			if (spellCastedId == 12037 && playerEquipment[playerWeapon] != 4170) {
				sendMessage("You need a Slayer's staff to cast this spell.");
				resetAtk();
				return;
			}
			if (playerLevel[6] >= Lvl) {
				if (hasRunesNeeded()) {
					if (meleeDelay <= 0
							&& WithinDistance(pX, pY, absX, absY, 8)) {
						int maxAtk = Misc.random(mageAtk());
						int pDef = Misc.random(p.mageDef());
						if (lastHit != attackingPlayerId && duelStatus != 3) {
							p.lastHit = playerId;
							skullTimer = 360;
							if (HeadIconPk != 1) {
								SetPkHeadIcon(1);
							}
						}
						if (spellSet == 2) {
							SetSidebar(6, 18787);
						}
						autocastSpell = true;
						p.combatDelay = 30;
						combatDelay = 30;
						p.KillerId = playerId;
						p.combatWith = playerId;
						startAnimation(Emote, 0);
						if (PlayerGfx > 0) {
							playGraphic(PlayerGfx, 0, PlayerHeight);
						}
						if (ProGfx > 0) {
							createProjectile(absY, absX, offsetY, offsetX,
									ProGfx, 43, 31, calcDistanceSpeed(pX, pY),
									-attackingPlayerId - 1);
							if (maxAtk > pDef) {
								p.playGraphic(EndGfx,
										calcDistanceSpeed(pX, pY), EndHeight);
								damageHit = 1;
							} else {
								p.playGraphic(85, calcDistanceSpeed(pX, pY),
										100);
								damageHit = 0;
							}
						} else if (ProGfx == -1) {
							if (maxAtk > pDef) {
								p.playGraphic(EndGfx, 65, EndHeight);
								damageHit = 1;
							} else {
								p.playGraphic(85, 65, 100);
								damageHit = 0;
							}
						}
						if (damageHit == 1) {
							if (spellCastedId >= 1190 && spellCastedId <= 1192) {
								damageHit = godSpellDamage(spellCastedId);
							} else if (spellCastedId == 12037) {
								damageHit = Misc
										.random((10 + (int) (playerLevel[playerMagic] * 0.1)) - 1) + 1;
							} else {
								damageHit = Misc.random(Server.s.magicHandler
										.GetSpellMaxHit(spellCastedId) - 1) + 1;
							}
							if (p.HeadPray == 1) {
								damageHit -= damageHit * 0.4;
							}
							if ((p.NewHp - damageHit) <= 0) {
								damageHit = p.NewHp;
							}
							if (spellCastedId >= 1190 && spellCastedId <= 1192) {
								godSpellEffect(spellCastedId, damageHit,
										attackingPlayerId);
							}
							applySpellEffectPlayer(attackingPlayerId);
						}
						deleteItem(Rune1, GetItemSlot(Rune1), Rune1Am);
						deleteItem(Rune2, GetItemSlot(Rune2), Rune2Am);
						deleteItem(Rune3, GetItemSlot(Rune3), Rune3Am);
						deleteItem(Rune4, GetItemSlot(Rune4), Rune4Am);
						for (int i = 0; i < 5; i++) {
							if (delayedDmgSlot[i] == 0) {
								delayedDmgSlot[i] = attackingPlayerId;
								delayedDmgTarget[i] = 1;
								delayedDmgType[i] = 2;
								delayedDmgHit[i] = damageHit;
								delayedSpellId[i] = spellCastedId;
								if (ProGfx > 0) {
									delayedDmgTime[i] = calcDistanceDamage(pX,
											pY);
								} else {
									delayedDmgTime[i] = 3;
								}
								break;
							}
						}
						meleeDelay = 6;
					}
				} else {
					sendMessage("You do not have enough runes to cast this spell.");
					resetAtk();
				}
			} else {
				sendMessage("You do not have a high enough Magic level to cast this spell.");
				resetAtk();
			}
		} catch (Exception e) {
		}
	}

	public boolean hasRunesNeeded() {
		return (InvItemAmt(Rune1) >= Rune1Am && InvItemAmt(Rune2) >= Rune2Am
				&& InvItemAmt(Rune3) >= Rune3Am && InvItemAmt(Rune4) >= Rune4Am);
	}

	public void grabSpellData() {
		Emote = Server.s.magicHandler.GetSpellAnim(spellCastedId);
		PlayerGfx = Server.s.magicHandler.GetSpellStartGfx(spellCastedId);
		ProGfx = Server.s.magicHandler.GetSpellProGfx(spellCastedId);
		EndGfx = Server.s.magicHandler.GetSpellEndGfx(spellCastedId);
		MaxHit = Server.s.magicHandler.GetSpellMaxHit(spellCastedId);
		Lvl = Server.s.magicHandler.GetSpellLvl(spellCastedId);
		Rune1 = Server.s.magicHandler.GetSpellRune1(spellCastedId);
		Rune1Am = Server.s.magicHandler.GetSpellRune1Am(spellCastedId);
		Rune2 = Server.s.magicHandler.GetSpellRune2(spellCastedId);
		Rune2Am = Server.s.magicHandler.GetSpellRune2Am(spellCastedId);
		Rune3 = Server.s.magicHandler.GetSpellRune3(spellCastedId);
		Rune3Am = Server.s.magicHandler.GetSpellRune3Am(spellCastedId);
		Rune4 = Server.s.magicHandler.GetSpellRune4(spellCastedId);
		Rune4Am = Server.s.magicHandler.GetSpellRune4Am(spellCastedId);
		PlayerHeight = Server.s.magicHandler
				.GetSpellPlayerHeight(spellCastedId);
		EndHeight = Server.s.magicHandler.GetSpellEndHeight(spellCastedId);
	}

	public void calcCrystalBow() {
		crystalBowShots--;
		if (crystalBowShots <= 0) {
			deleteEquipment(playerWeapon);
			crystalBowShots = 1000;
			sendMessage("Your bow turns into dust...");
			showDialogue("Your bow crumbles to dust...");
		}
	}

	public boolean cheapItems() {
		int totalValue = 0;
		/*
		 * for(int i = 0; i < playerItems.length; i++) { if(playerItems[i] !=
		 * -1) { totalValue += getItemValue(playerItems[i]); } } for(int ii = 0;
		 * ii < playerEquipment.length; i++) { if(playerEquipment[i] != -1) {
		 * totalValue += getItemValue(playerEquipment[ii]); } } if(totalValue <
		 * 50000) { return true; }
		 */
		return false;
	}

	public boolean checkPlayerCombatStatus() {
		if (attackingPlayerId < 1
				|| attackingPlayerId > Server.s.playerHandler.maxPlayers
				|| Server.s.playerHandler.players[attackingPlayerId] == null) {
			resetAtk();
			return false;
		}
		Client p = (Client) Server.s.playerHandler.players[attackingPlayerId];
		if (p.IsDead || p.NewHp < 1) {
			resetAtk();
			return false;
			// check if this is right plzn
		} else if (Server.s.ClanWars.teamBluePlayers.contains(this)
				&& Server.s.ClanWars.teamBluePlayers.contains(p)) {
			sendMessage("You must attack the red players!");
			return false;
		} else if (Server.s.ClanWars.teamRedPlayers.contains(this)
				&& Server.s.ClanWars.teamRedPlayers.contains(p)) {
			sendMessage("You must attack the blue players!");
			return false;
		} else if ((Server.s.ClanWars.teamBluePlayers.contains(this) && Server.s.ClanWars.teamRedPlayers
				.contains(p))
				|| (Server.s.ClanWars.teamRedPlayers.contains(this) && Server.s.ClanWars.teamBluePlayers
						.contains(p))) {
			// sendMessage("It's working!");
			return true;
		} else if (WildArea() && cheapItems()) {
			sendMessage("Please get items of value to kill others in the wilderness.");
			return false;
		} else if (WildArea() && p.cheapItems()) {
			sendMessage("This player needs more value until they can be attacked.");
			return false;
		} else if (WildArea() && playerEquipment[playerWeapon] == 1999) {
			sendMessage("You cannot fight other players with a Dragon whip.");
			return false;
		} else if ((!FightPits.fighters.contains(playerName) || !FightPits.fighters
				.contains(p.playerName))
				&& !p.WildArea()
				&& duelStatus != 3
				&& p.duelStatus != 3
				&& meleeFightStatus != 1
				&& p.meleeFightStatus != 1
				&& !Server.s.ClanWars.teamBluePlayers.contains(this)
				&& !Server.s.ClanWars.teamRedPlayers.contains(this)) {
			// System.out.println("It said yes???!");
			sendMessage("You are not in combat zone.");
			return false;
		} else if (Server.s.ClanWars.teamBluePlayers.contains(this)
				|| Server.s.ClanWars.teamRedPlayers.contains(this)) {
			return true;
		} else if (FightPits.fighters.contains(playerName)
				&& FightPits.fighters.contains(p.playerName)) {
			return true;
		} else if (!p.WildArea() && duelStatus != 3 && p.duelStatus != 3
				&& meleeFightStatus != 1 && p.meleeFightStatus != 1) {
			resetAtk();
			return false;
		} else if (!multiZone() && p.combatWith != playerId && p.combatWith > 0
				&& p.attackingPlayerId != playerId) {
			sendMessage("This player is already in combat!");
			resetAtk();
			return false;
		} else if (!multiZone() && p.combatWith2 > 0) {
			sendMessage("This player is already in combat!");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith2 > 0) {
			sendMessage("You are already in combat!");
			resetAtk();
			return false;
		} else if (!multiZone() && combatWith != attackingPlayerId
				&& combatWith > 0) {
			sendMessage("You are already in combat!");
			resetAtk();
			return false;
		} else if (duelStatus == 3 && attackingPlayerId != duelWith) {
			sendMessage("You are not dueling this player!");
			resetAtk();
			return false;
		} else if (meleeFightStatus == 1 && attackingPlayerId != meleeFightWith) {
			sendMessage("You are not fighting this player!");
			resetAtk();
			return false;
		} else if (!checkWildRange(p.combatLevel) && duelStatus != 3
				&& meleeFightStatus != 1) {
			sendMessage("Your combat difference is too great!");
			resetAtk();
			return false;
		} else if (!p.checkWildRange(combatLevel) && p.duelStatus != 3
				&& p.meleeFightStatus != 1) {
			sendMessage("Your combat difference is too great!");
			resetAtk();
			return false;
		}
		return true;
	}

	public boolean addSkillXP(int amount, int skill) {
		if (expLock)
			return false;
		if ((amount + playerXP[skill]) < 0
				|| amount + playerXP[skill] > 200000000
				|| playerXP[skill] >= 200000000) {
			playerXP[skill] = 200000000;
			refreshSkills();
			return false;
		}
		int oldLevel = getLevelForXP(playerXP[skill]);
		amount *= getXPMultiplier();
		playerXP[skill] += amount;
		int newLevel = getLevelForXP(playerXP[skill]);
		if (oldLevel < getLevelForXP(playerXP[skill])) {
			playGraphic(199, 0, 100);
			playerXP[skill] += amount;
			if (oldLevel < newLevel) {
				playerLevel[skill] = getLevelForXP(playerXP[skill]);
			}
			LevelUp(skill);
			if (skill == 3) {
				updateHp(newLevel - oldLevel, true);
			}
			if (playerLevel[skill] > 95) {
				yell(playerName + "'s " + statName[skill] + " level is now "
						+ playerLevel[skill] + "!");
			}
			TotalLvl = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1])
					+ getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3])
					+ getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5])
					+ getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7])
					+ getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9])
					+ getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[11])
					+ getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13])
					+ getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15])
					+ getLevelForXP(playerXP[16]) + getLevelForXP(playerXP[17])
					+ getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]));
			TotalXP = (playerXP[0] + playerXP[1] + playerXP[2] + playerXP[3]
					+ playerXP[4] + playerXP[5] + playerXP[6] + playerXP[7]
					+ playerXP[8] + playerXP[9] + playerXP[10] + playerXP[11]
					+ playerXP[12] + playerXP[13] + playerXP[14] + playerXP[15]
					+ playerXP[16] + playerXP[17] + playerXP[18] + playerXP[19] + playerXP[20]);
			changeText126("Total Lvl: " + TotalLvl, 3984);
			changeText126("" + TotalLvl, 149);
			changeText126("" + combatLevel, 184);
			updateRequired = true;
			appearanceUpdateRequired = true;
		}
		setSkillLevel(skill);
		return true;
	}

	public int TotalXP = 0;
	public int TotalLvl = 0;

	public void LevelUp(int skill) {
		CurrentFrame = 6247;
		int skillcapeId = 0;
		if (getLevelForXP(playerXP[skill]) == 99) {
			switch (skill) {
			case 0:
				skillcapeId = 7982;
				break;
			case 1:
				skillcapeId = 7985;
				break;
			case 2:
				skillcapeId = 7984;
				break;
			case 3:
				skillcapeId = 7994;
				break;
			case 4:
				skillcapeId = 7986;
				break;
			case 5:
				skillcapeId = 7983;
				break;
			case 6:
				skillcapeId = 7987;
				break;
			case 7:
				skillcapeId = 8038;
				break;
			case 8:
				skillcapeId = 8041;
				break;
			case 9:
				skillcapeId = 8044;
				break;
			case 10:
				skillcapeId = 8037;
				break;
			case 11:
				skillcapeId = 0;
				break;
			case 12:
				skillcapeId = 8045;
				break;
			case 13:
				skillcapeId = 8043;
				break;
			case 14:
				skillcapeId = 8042;
				break;
			case 15:
				skillcapeId = 7858;
				break;
			case 16:
				skillcapeId = 0;
				break;
			case 17:
				skillcapeId = 8026;
				break;
			case 18:
				skillcapeId = 8075;
				break;
			case 19:
				skillcapeId = 0;
				break;
			case 20:
				skillcapeId = 8025;
				break;
			}
			displayItem246(6210, 290, skillcapeId);
			changeText126(
					"Congratulations, you just reached a skill level of 99!",
					6207);
			changeText126("", 6208);
			sendFrame164(6206);
			return;
		}
		switch (skill) {
		case 0:
			changeText126(
					"Congratulations, you just advanced an attack level!", 6248);
			changeText126("Your attack level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6249);
			sendFrame164(6247);
			sendMessage("Congratulations, you just advanced an attack level.");
			break;
		case 1:
			changeText126(
					"Congratulations, you just advanced a defence level!", 6254);
			changeText126("Your defence level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6255);
			sendFrame164(6253);
			sendMessage("Congratulations, you just advanced a defence level.");
			break;
		case 2:
			changeText126(
					"Congratulations, you just advanced a strength level!",
					6207);
			changeText126("Your strength level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6208);
			sendFrame164(6206);
			sendMessage("Congratulations, you just advanced a strength level.");
			break;
		case 3:
			changeText126(
					"Congratulations, you just advanced a hitpoints level!",
					6217);
			changeText126("Your hitpoints level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6218);
			sendFrame164(6216);
			sendMessage("Congratulations, you just advanced a hitpoints level.");
			break;
		case 4:
			changeText126("Congratulations, you just advanced a ranged level!",
					5453);
			changeText126("Your ranged level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6114);
			sendFrame164(4443);
			sendMessage("Congratulations, you just advanced a ranging level.");
			break;
		case 5:
			sendFrame164(6242);
			changeText126("Congratulations, you just advanced a prayer level!",
					6243);
			changeText126("Your prayer level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6244);
			sendMessage("Congratulations, you just advanced a prayer level.");
			break;
		case 6:
			sendFrame164(6211);
			changeText126("Congratulations, you just advanced a magic level!",
					6212);
			changeText126("Your magic level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6213);
			sendMessage("Congratulations, you just advanced a magic level.");
			break;
		case 7:
			sendFrame164(6226);
			changeText126(
					"Congratulations, you just advanced a cooking level!", 6227);
			changeText126("Your cooking level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6228);
			sendMessage("Congratulations, you just advanced a cooking level.");
			break;
		case 8:
			sendFrame164(4272);
			changeText126(
					"Congratulations, you just advanced a woodcutting level!",
					4273);
			changeText126("Your woodcutting level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4274);
			sendMessage("Congratulations, you just advanced a woodcutting level.");
			break;
		case 9:
			sendFrame164(6231);
			changeText126(
					"Congratulations, you just advanced a fletching level!",
					6232);
			changeText126("Your fletching level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6233);
			sendMessage("Congratulations, you just advanced a fletching level.");
			break;
		case 10:
			sendFrame164(6258);
			changeText126(
					"Congratulations, you just advanced a fishing level!", 6259);
			changeText126("Your fishing level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6260);
			sendMessage("Congratulations, you just advanced a fishing level.");
			break;
		case 11:
			sendFrame164(4282);
			changeText126(
					"Congratulations, you just advanced a fire making level!",
					4283);
			changeText126("Your firemaking level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4284);
			sendMessage("Congratulations, you just advanced a fire making level.");
			break;
		case 12:
			sendFrame164(6263);
			changeText126(
					"Congratulations, you just advanced a crafting level!",
					6264);
			changeText126("Your crafting level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6265);
			sendMessage("Congratulations, you just advanced a crafting level.");
			break;
		case 13:
			changeText126(
					"Congratulations, you just advanced a smithing level!",
					6222);
			changeText126("Your smithing level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6223);
			sendFrame164(6221);
			sendMessage("Congratulations, you just advanced a smithing level.");
			break;
		case 14:
			changeText126("Congratulations, you just advanced a mining level!",
					4417);
			changeText126("Your mining level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4438);
			sendFrame164(4416);
			sendMessage("Congratulations, you just advanced a mining level.");
			break;
		case 15:
			changeText126(
					"Congratulations, you just advanced a herblore level!",
					6238);
			changeText126("Your herblore level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 6239);
			sendFrame164(6237);
			sendMessage("Congratulations, you just advanced a herblore level.");
			break;
		case 16:
			changeText126(
					"Congratulations, you just advanced a agility level!", 4278);
			changeText126("Your agility level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4279);
			sendFrame164(4277);
			sendMessage("Congratulations, you just advanced an agility level.");
			break;
		case 17:
			changeText126(
					"Congratulations, you just advanced a thieving level!",
					4263);
			changeText126("Your theiving level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4264);
			sendFrame164(4261);
			sendMessage("Congratulations, you just advanced a thieving level.");
			break;
		case 18:
			changeText126("Congratulations, you just advanced a slayer level!",
					12123);
			changeText126("Your slayer level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 12124);
			sendFrame164(12122);
			sendMessage("Congratulations, you just advanced a slayer level.");
			break;
		case 19:
			changeText126(
					"Congratulations, you just advanced a farming level!", 4268);
			changeText126("Your farming level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4269);
			sendFrame164(4267);
			sendMessage("Congratulations, you just advanced a farming level.");
			break;
		case 20:
			changeText126(
					"Congratulations, you just advanced a runecrafting level!",
					4268);
			changeText126("Your runecrafting level is now "
					+ getLevelForXP(playerXP[skill]) + " .", 4269);
			sendFrame164(4267);
			sendMessage("Congratulations, you just advanced a runecrafting level.");
			break;
		}
	}

	public void setSkillLevel(int skillNum) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		if (skillNum == 0) {
			changeText126("" + playerLevel[0] + "", 4004);
			changeText126("" + getLevelForXP(playerXP[0]) + "", 4005);
		} else if (skillNum == 2) {
			changeText126("" + playerLevel[2] + "", 4006);
			changeText126("" + getLevelForXP(playerXP[2]) + "", 4007);
		} else if (skillNum == 1) {
			changeText126("" + playerLevel[1] + "", 4008);
			changeText126("" + getLevelForXP(playerXP[1]) + "", 4009);
		} else if (skillNum == 4) {
			changeText126("" + playerLevel[4] + "", 4010);
			changeText126("" + getLevelForXP(playerXP[4]) + "", 4011);
		} else if (skillNum == 5) {
			changeText126("" + playerLevel[5] + "", 4012);
			changeText126("" + getLevelForXP(playerXP[5]) + "", 4013);
		} else if (skillNum == 6) {
			changeText126("" + playerLevel[6] + "", 4014);
			changeText126("" + getLevelForXP(playerXP[6]) + "", 4015);
		} else if (skillNum == 3) {
			changeText126("" + playerLevel[3] + "", 4016);
			changeText126("" + getLevelForXP(playerXP[3]) + "", 4017);
		} else if (skillNum == 16) {
			changeText126("" + playerLevel[16] + "", 4018);
			changeText126("" + getLevelForXP(playerXP[16]) + "", 4019);
		} else if (skillNum == 15) {
			changeText126("" + playerLevel[15] + "", 4020);
			changeText126("" + getLevelForXP(playerXP[15]) + "", 4021);
		} else if (skillNum == 17) {
			changeText126("" + playerLevel[17] + "", 4022);
			changeText126("" + getLevelForXP(playerXP[17]) + "", 4023);
		} else if (skillNum == 12) {
			changeText126("" + playerLevel[12] + "", 4024);
			changeText126("" + getLevelForXP(playerXP[12]) + "", 4025);
		} else if (skillNum == 9) {
			changeText126("" + playerLevel[9] + "", 4026);
			changeText126("" + getLevelForXP(playerXP[9]) + "", 4027);
		} else if (skillNum == 14) {
			changeText126("" + playerLevel[14] + "", 4028);
			changeText126("" + getLevelForXP(playerXP[14]) + "", 4029);
		} else if (skillNum == 13) {
			changeText126("" + playerLevel[13] + "", 4030);
			changeText126("" + getLevelForXP(playerXP[13]) + "", 4031);
		} else if (skillNum == 10) {
			changeText126("" + playerLevel[10] + "", 4032);
			changeText126("" + getLevelForXP(playerXP[10]) + "", 4033);
		} else if (skillNum == 7) {
			changeText126("" + playerLevel[7] + "", 4034);
			changeText126("" + getLevelForXP(playerXP[7]) + "", 4035);
		} else if (skillNum == 11) {
			changeText126("" + playerLevel[11] + "", 4036);
			changeText126("" + getLevelForXP(playerXP[11]) + "", 4037);
		} else if (skillNum == 8) {
			changeText126("" + playerLevel[8] + "", 4038);
			changeText126("" + getLevelForXP(playerXP[8]) + "", 4039);
		} else if (skillNum == 20) {
			changeText126("" + playerLevel[20] + "", 4152);
			changeText126("" + getLevelForXP(playerXP[20]) + "", 4153);
		} else if (skillNum == 18) {
			changeText126("" + playerLevel[18] + "", 12166);
			changeText126("" + getLevelForXP(playerXP[18]) + "", 12167);
		} else if (skillNum == 19) {
			changeText126("" + playerLevel[19] + "", 13926);
			changeText126("" + getLevelForXP(playerXP[19]) + "", 13927);
		} else if (skillNum == 20) {
			changeText126("" + playerLevel[20] + "", 4152);
			changeText126("" + getLevelForXP(playerXP[20]) + "", 4153);
		}
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(134);
		outStream.writeByte(skillNum);
		outStream.writeDWord_v1(playerXP[skillNum]);
		outStream.writeByte(playerLevel[skillNum]);
	}

	public void loadQuestTab() {
		if (Server.s.restartTime / 2 / 60 < 60) {
			changeText126("@or1@Uptime: @gre@" + Server.s.restartTime / 2 / 60
					+ " @or1@mins", 663);
		} else {
			int time = Server.s.restartTime;
			int min = 0;
			int hr = 0;
			hr = time / 2 / 60 / 60;
			int miliSecHr = Math.round((time / 2 / 60 / 60) - 0.5f);
			min = (time - (miliSecHr * 2 * 60 * 60)) / 2 / 60;
			changeText126("@or1@Uptime: @gre@" + hr + " @or1@hr @gre@" + min
					+ " @or1@min", 663);
		}
		changeText126("@or1@Players online: @gre@"
				+ Server.s.playerHandler.playerCount, 7332);
		changeText126("@or1@Items kept on death", 7333);
		changeText126("", 7334);
		changeText126("", 7336);
		changeText126("", 7383);
		changeText126("", 7339);
		changeText126("", 7338);
		changeText126("", 7340);
		changeText126("", 7346);
		changeText126("", 7341);
		changeText126("", 7342);
		changeText126("", 7337);
		changeText126("", 7343);
		changeText126("", 7335);
		changeText126("", 7344);
		changeText126("", 7345);
		changeText126("", 7347);
		changeText126("", 7348);
	}

	public void RefreshDuelRules() {
		if (duelWith > 0 && Server.s.playerHandler.players[duelWith] != null) {
			Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
			changeText126("Dueling with: " + otherPlr.playerName
					+ "    Combat level:" + otherPlr.combatLevel, 6671);
			otherPlr.changeText126("Dueling with: " + playerName
					+ "    Combat level:" + combatLevel, 6671);
			changeText126("", 6684);
			otherPlr.changeText126("", 6684);
			duelStatus = 1;
			otherPlr.duelStatus = 1;
			if (duelRule[0]) {
				changeText126("@gre@No Ranged", 6698);
			} else {
				changeText126("No Ranged", 6698);
			}
			if (duelRule[1]) {
				changeText126("@gre@No Melee", 6699);
			} else {
				changeText126("No Melee", 6699);
			}
			if (duelRule[2]) {
				changeText126("@gre@No Magic", 6697);
			} else {
				changeText126("No Magic", 6697);
			}
			if (duelRule[3]) {
				changeText126("@gre@No Sp. Atk", 7817);
			} else {
				changeText126("No Sp. Atk", 7817);
			}
			if (duelRule[4]) {
				changeText126("@gre@No Weapons", 669);
			} else {
				changeText126("No Weapons", 669);
			}
			if (duelRule[5]) {
				changeText126("@gre@No Armour", 6696);
			} else {
				changeText126("No Armour", 6696);
			}
			if (duelRule[6]) {
				changeText126("@gre@No Drinks", 6701);
			} else {
				changeText126("No Drinks", 6701);
			}
			if (duelRule[7]) {
				changeText126("@gre@No Food", 6702);
			} else {
				changeText126("No Food", 6702);
			}
			if (duelRule[8]) {
				changeText126("@gre@No Prayer", 6703);
			} else {
				changeText126("No Prayer", 6703);
			}
			if (duelRule[9]) {
				changeText126("@gre@No Movement", 6704);
			} else {
				changeText126("No Movement", 6704);
			}
			if (duelRule[10]) {
				changeText126("@gre@Obstacles", 6731);
			} else {
				changeText126("Obstacles", 6731);
			}
		}
	}

	public void DuelVictory() {
		resetAtk();
		drawHeadicon(10, 0, 0, 0);
		int spot = Misc.random(dSpotX.length - 1);
		changeCoords(dSpotX[spot], dSpotY[spot], 0);
		if (duelWith > 0 && Server.s.playerHandler.players[duelWith] != null) {
			Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
			changeText126("" + otherPlr.combatLevel, 6839);
			changeText126(otherPlr.playerName, 6840);
			otherPlr.drawHeadicon(10, 0, 0, 0);
		}
		for (int i = 0; i < 21; i++) {
			playerLevel[i] = getLevelForXP(playerXP[i]);
		}
		for (int i = 0; i < 21; i++) {
			setSkillLevel(i);
		}
		itemsToVScreen();
		showInterface(6733);
		duelStatus = -1;
		for (int i9 = 0; i9 < duelItems.length; i9++) {
			if (duelItems[i9] > 0) {
				addItem(duelItems[i9] - 1, duelItemsN[i9]);
			}
		}
		for (int i9 = 0; i9 < otherDuelItems.length; i9++) {
			if (otherDuelItems[i9] > 0) {
				addItem(otherDuelItems[i9] - 1, otherDuelItemsN[i9]);
			}
		}
		meleeFightStatus = -1;
		resetDuel();
		updateHp(getLevelForXP(playerXP[3]), true);
		resetAllPrayers();
		specialAmount = 100;
		if (needsSpecBar(playerEquipment[playerWeapon])) {
			specialAttackBar();
		}
		skullTimer = -1;
		SetPkHeadIcon(0);
		EntangleDelay = 0;
		poisonDelay = -1;
		poisonDamage = 0;
		resetKeepItem();
		resetItems(3823);
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
		resetEmotes();
		killMyNPCs();
	}

	public void meleeFightVictory() {
		resetAtk();
		drawHeadicon(10, 0, 0, 0);
		if (meleeFightWith > 0
				&& Server.s.playerHandler.players[meleeFightWith] != null) {
			Client otherPlr = (Client) Server.s.playerHandler.players[meleeFightWith];
			otherPlr.drawHeadicon(10, 0, 0, 0);
			addItem(7774, (int) (otherPlr.combatLevel * 0.15));
		}
		int skullId = Server.s.playerHandler.playerRedSkull;
		if (skullId == 0 || skullId == meleeFightWith
				|| Server.s.playerHandler.players[skullId] == null
				|| !Server.s.playerHandler.players[skullId].meleeFightArea()) {
			SetPkHeadIcon(2);
			Server.s.playerHandler.playerRedSkull = playerId;
			if (Server.s.playerHandler.players[skullId] != null) {
				Client p = (Client) Server.s.playerHandler.players[skullId];
				if (p.HeadIconPk == 2) {
					p.SetPkHeadIcon(0);
				}
			}
		}
		for (int i = 0; i < 21; i++) {
			playerLevel[i] = getLevelForXP(playerXP[i]);
		}
		for (int i = 0; i < 21; i++) {
			setSkillLevel(i);
		}
		meleeFightStatus = -1;
		updateHp(getLevelForXP(playerXP[3]), true);
		resetAllPrayers();
		specialAmount = 100;
		if (needsSpecBar(playerEquipment[playerWeapon])) {
			specialAttackBar();
		}
		skullTimer = -1;
		EntangleDelay = 0;
		poisonDelay = -1;
		poisonDamage = 0;
		resetKeepItem();
		resetItems(3823);
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
		changeCoords(2184, 4944, 0);
		resetEmotes();
		killMyNPCs();
	}

	public void DuelStart() {
		for (int i = 0; i < 21; i++) {
			playerLevel[i] = getLevelForXP(playerXP[i]);
		}
		for (int i = 0; i < 21; i++) {
			setSkillLevel(i);
		}
		updateHp(getLevelForXP(playerXP[3]), true);
		resetAllPrayers();
		specialAmount = 100;
		UsingSpecial = false;
		if (needsSpecBar(playerEquipment[playerWeapon])) {
			specialAttackBar();
		}
		skullTimer = -1;
		SetPkHeadIcon(0);
		EntangleDelay = 0;
		poisonDelay = -1;
		poisonDamage = 0;
		resetKeepItem();
		resetItems(3823);
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void declineDuel() {
		if (duelStatus == 3 || duelStatus == -1) {
			return;
		}
		sendMessage("You decline the duel.");
		RemoveAllWindows();
		if (duelWith > 0 && Server.s.playerHandler.players[duelWith] != null) {
			Client P = (Client) Server.s.playerHandler.players[duelWith];
			P.sendMessage("The other player declined rules and stake options.");
			P.RemoveAllWindows();
			for (int i = 0; i < P.duelItems.length; i++) {
				if (P.duelItems[i] != 0) {
					P.addItem(P.duelItems[i] - 1, P.duelItemsN[i]);
				}
			}
			P.resetItems(3214);
			P.resetDuel();
			P.duelWith = 0;
			P.duelStatus = -1;
		}
		for (int i = 0; i < duelItems.length; i++) {
			if (duelItems[i] != 0) {
				addItem(duelItems[i] - 1, duelItemsN[i]);
			}
		}
		duelWith = 0;
		duelStatus = -1;
		resetItems(3214);
		resetDuel();
	}

	public void RemoveAllDuelItems() {
		for (int i = 0; i < duelItems.length; i++) {
			if (duelItems[i] > 0) {
				fromDuel((duelItems[i] - 1), i, duelItemsN[i]);
			}
		}
	}

	public int GetDuelItemSlots() {
		int Slots = 0;
		for (int i = 0; i < duelItems.length; i++) {
			if (duelItems[i] > 0) {
				Slots++;
			}
		}
		for (int i = 0; i < otherDuelItems.length; i++) {
			if (otherDuelItems[i] > 0) {
				Slots++;
			}
		}
		return Slots;
	}

	public void itemsToVScreen() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6822);
		outStream.writeWord(otherDuelItems.length);
		for (int i = 0; i < otherDuelItems.length; i++) {
			if (otherDuelItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(otherDuelItemsN[i]);
			} else {
				outStream.writeByte(otherDuelItemsN[i]);
			}
			outStream.writeWordBigEndianA(otherDuelItems[i]);
		}
		outStream.endFrameVarSizeWord();
	}

	public void refreshDuelScreen() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6669);
		outStream.writeWord(duelItems.length);
		for (int i = 0; i < duelItems.length; i++) {
			if (duelItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(duelItemsN[i]);
			} else {
				outStream.writeByte(duelItemsN[i]);
			}
			outStream.writeWordBigEndianA(duelItems[i]);
		}
		outStream.endFrameVarSizeWord();
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6670);
		outStream.writeWord(otherDuelItems.length);
		for (int i = 0; i < otherDuelItems.length; i++) {
			if (otherDuelItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(otherDuelItemsN[i]);
			} else {
				outStream.writeByte(otherDuelItemsN[i]);
			}
			outStream.writeWordBigEndianA(otherDuelItems[i]);
		}
		outStream.endFrameVarSizeWord();
	}

	public boolean stakeDisabled = true;

	public boolean stakeItem(int itemId, int itemSlot, int itemAmount) {
		if (stakeDisabled) {
			sendMessage("@red@Staking has been disabled until it is fixed.");
			return false;
		}
		if (itemAmount <= 0) {
			itemAmount = 1;
		}

		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return false;
		}

		boolean inDuel = false;

		if (itemId + 1 == playerItems[itemSlot]) {
			if (itemAmount > playerItemsN[itemSlot]
					&& (Item.itemStackable[playerItems[itemSlot] - 1] || Item.itemIsNote[playerItems[itemSlot] - 1])) {
				itemAmount = playerItemsN[itemSlot];
				sendMessage("Item Amount Changed.");
			} else if (itemAmount > InvItemAmt(itemId)
					&& !Item.itemStackable[playerItems[itemSlot] - 1]
					&& !Item.itemIsNote[playerItems[itemSlot] - 1]) {
				int amt2 = 0;
				for (int q = 0; q < playerItems.length; q++) {
					if (playerItems[q] == itemId + 1) {
						amt2++;
					}
				}
				if (itemAmount > amt2) {
					itemAmount = amt2;
					sendMessage("Non stack change.");
				}
			}

			if (Item.itemStackable[playerItems[itemSlot] - 1]
					|| Item.itemIsNote[playerItems[itemSlot] - 1]) {
				for (int i = 0; i < duelItems.length; i++) {
					if (duelItems[i] == playerItems[itemSlot]) {
						duelItemsN[i] += itemAmount;
						if (Server.s.playerHandler.players[duelWith] != null) {
							Server.s.playerHandler.players[duelWith].otherDuelItemsN[i] += itemAmount;
						}
						inDuel = true;
						break;
					}
				}
			}
			if (!inDuel) {
				int itmAmt = itemAmount;
				if (Item.itemStackable[playerItems[itemSlot] - 1]
						|| Item.itemIsNote[playerItems[itemSlot] - 1]) {
					for (int i = 0; i < duelItems.length; i++) {
						if (duelItems[i] == 0) {
							duelItems[i] = itemId + 1;
							duelItemsN[i] = itemAmount;
							if (Server.s.playerHandler.players[duelWith] != null) {
								Server.s.playerHandler.players[duelWith].otherDuelItems[i] = itemId + 1;
								Server.s.playerHandler.players[duelWith].otherDuelItemsN[i] = itemAmount;
							}
							break;
						}
					}
				} else {
					for (int i = 0; i < duelItems.length; i++) {
						if (duelItems[i] == 0 && itmAmt > 0) {
							if (InvItemAmt(itemId) > 0) {
								itmAmt--;
								duelItems[i] = itemId + 1;
								duelItemsN[i] = 1;
								if (Server.s.playerHandler.players[duelWith] != null) {
									Server.s.playerHandler.players[duelWith].otherDuelItems[i] = itemId + 1;
									Server.s.playerHandler.players[duelWith].otherDuelItemsN[i] = 1;
								}
							} else {
								break;
							}
						}
					}
					// itemAmount -= itemAmount - itmAmt;
				}
			}

			deleteItem(playerItems[itemSlot] - 1, itemSlot, itemAmount);

			duelStatus = 1;
			resetItems(3214);
			resetItems(3322);
			changeText126("", 6684);
			refreshDuelScreen();
			sendFrame248(6575, 3321);

			if (Server.s.playerHandler.players[duelWith] != null) {
				Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
				otherPlr.duelStatus = 1;
				otherPlr.resetItems(3214);
				otherPlr.resetItems(3322);
				otherPlr.refreshDuelScreen();
				otherPlr.changeText126("", 6684);
				otherPlr.sendFrame248(6575, 3321);
			}
			return true;
		}
		return false;
	}

	public boolean fromDuel(int itemId, int itemSlot, int itemAmount) {
		try {
			if (itemAmount <= 0 && itemAmount != -924) {
				itemAmount = 1;
			}

			if (Server.s.playerHandler.players[playerId] == null
					|| disconnected || in == null || out == null) {
				if (combatDelay <= 0 && deathDelay < 0) {
					disconnected = true;
				}
				return false;
			}

			if (itemId + 1 == duelItems[itemSlot]) {
				if (itemAmount > duelItemsN[itemSlot]
						&& (Item.itemStackable[duelItems[itemSlot] - 1] || Item.itemIsNote[duelItems[itemSlot] - 1])
						|| itemAmount == -924) {
					itemAmount = duelItemsN[itemSlot];
				} else {
					int amt2 = 0;
					for (int g = 0; g < duelItems.length; g++) {
						if ((duelItems[g] - 1) == itemId) {
							amt2++;
						}
					}
					if (itemAmount > amt2) {
						itemAmount = amt2;
					}
				}

				if (itemAmount == -924
						&& !Item.itemStackable[duelItems[itemSlot] - 1]
						&& !Item.itemIsNote[duelItems[itemSlot] - 1]) {
					itemAmount = 0;
					for (int f = 0; f < duelItems.length; f++) {
						if (duelItems[f] == itemId + 1) {
							addItem(duelItems[itemSlot] - 1, 1);
							itemAmount++;
						}
					}
				} else {
					addItem(duelItems[itemSlot] - 1, itemAmount);
				}

				if (Item.itemStackable[duelItems[itemSlot] - 1]
						|| Item.itemIsNote[duelItems[itemSlot] - 1]) {
					if (itemAmount == duelItemsN[itemSlot]) {
						duelItems[itemSlot] = 0;
						if (Server.s.playerHandler.players[duelWith] != null) {
							Server.s.playerHandler.players[duelWith].otherDuelItems[itemSlot] = 0;
						}
					} else {
						duelItemsN[itemSlot] -= itemAmount;
						if (Server.s.playerHandler.players[duelWith] != null) {
							Server.s.playerHandler.players[duelWith].otherDuelItemsN[itemSlot] -= itemAmount;
						}
					}
				} else if (!Item.itemStackable[duelItems[itemSlot] - 1]
						&& !Item.itemIsNote[duelItems[itemSlot] - 1]) {
					int itmAmt = itemAmount;
					for (int i = 0; i < duelItems.length; i++) {
						if (duelItems[i] - 1 == itemId && itmAmt > 0) {
							itmAmt--;
							duelItems[i] = 0;
							if (Server.s.playerHandler.players[duelWith] != null) {
								Server.s.playerHandler.players[duelWith].otherDuelItems[i] = 0;
							}
						}
					}
				}

				duelStatus = 1;
				resetItems(3214);
				resetItems(3322);
				refreshDuelScreen();
				changeText126("", 6684);
				sendFrame248(6575, 3321);

				if (Server.s.playerHandler.players[duelWith] != null) {
					Client otherPlr = (Client) Server.s.playerHandler.players[duelWith];
					otherPlr.duelStatus = 1;
					otherPlr.resetItems(3214);
					otherPlr.resetItems(3322);
					otherPlr.refreshDuelScreen();
					otherPlr.changeText126("", 6684);
					otherPlr.sendFrame248(6575, 3321);
				}
				return true;
			}
		} catch (Exception e) {
		}
		return false;
	}

	public void resetDuel() {
		duelWith = 0;
		duelStatus = -1;
		for (int i = 0; i < duelRule.length; i++) {
			duelRule[i] = false;
		}
		for (int i = 0; i < duelItems.length; i++) {
			duelItems[i] = 0;
			otherDuelItems[i] = 0;
			duelItemsN[i] = 0;
			otherDuelItemsN[i] = 0;
		}
	}

	public void resetBank() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(5382);
		outStream.writeWord(playerBankSize);
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(bankItemsN[i]);
			} else {
				outStream.writeByte(bankItemsN[i]);
			}
			if (bankItemsN[i] < 1) {
				bankItems[i] = 0;
			}
			outStream.writeWordBigEndianA(bankItems[i]);
		}
		outStream.endFrameVarSizeWord();
	}

	public void pmstatus(int status) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(221);
		outStream.writeByte(status);
	}

	public boolean isinpm(long l) {
		for (int i = 0; i < friends.length; i++) {
			if (friends[i] != 0) {
				if (l == friends[i]) {
					return true;
				}
			}
		}
		return false;
	}

	public void pmupdate(int pmid, int world) {
		if (handler.players[pmid] == null) {
			return;
		}
		long l = Misc.playerNameToInt64(handler.players[pmid].playerName);
		if (handler.players[pmid].Privatechat == 0) {
			for (int i = 0; i < friends.length; i++) {
				if (friends[i] != 0) {
					if (l == friends[i]) {
						loadpm(l, world);
						return;
					}
				}
			}
		} else if (handler.players[pmid].Privatechat == 1) {
			for (int i1 = 0; i1 < friends.length; i1++) {
				if (friends[i] != 0) {
					if (l == friends[i1]) {
						if (handler.players[pmid].isinpm(Misc
								.playerNameToInt64(playerName))
								&& playerRights > 2
								&& playerRights != 4
								&& playerRights != 5) {
							loadpm(l, world);
							return;
						} else {
							loadpm(l, 0);
							return;
						}
					}
				}
			}
		} else if (handler.players[pmid].Privatechat == 2) {
			for (int i2 = 0; i2 < friends.length; i2++) {
				if (friends[i] != 0) {
					if (l == friends[i2]
							&& (playerRights < 2 || playerRights == 4 || playerRights == 5)) {
						loadpm(l, 0);
						return;
					}
				}
			}
		}
	}

	public void clanMessage(String msg) {
		int myId = Server.s.playerHandler.getClanId(playerName);
		if (muted > 0) {
			sendMessage("You are muted and cannot chat.");
			return;
		}
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				int otherId = Server.s.playerHandler.getClanId(p.playerName);
				if (myId == otherId && myId != -1 && muted == 0) {
					p.sendMessage(playerRights
							+ "["
							+ Server.s.playerHandler.clanName[myId]
									.toLowerCase() + "]" + playerName
							+ ":clan:" + msg);
				}
			}
		}
	}

	public void sendpm(long name, int rights, byte[] chatmessage,
			int messagesize) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		if (muted > 0) {
			sendMessage("You are muted and cannot send a pm.");
			return;
		}
		outStream.createFrameVarSize(196);
		outStream.writeQWord(name);
		outStream.writeDWord(handler.lastchatid++);
		outStream.writeByte(rights);
		outStream.writeBytes(chatmessage, messagesize, 0);
		outStream.endFrameVarSize();
	}

	public void loadpm(long name, int world) {
		if (world != 0) {
			world += 9;
		} else if (world == 0) {
			world += 1;
		}
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null || outStream == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(50);
		outStream.writeQWord(name);
		outStream.writeByte(world);
	}

	public void sendMessage(String s) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSize(253);
		outStream.writeString(s);
		outStream.endFrameVarSize();
	}

	public int FreeSlots() {
		int freeS = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] <= 0) {
				freeS++;
			}
		}
		return freeS;
	}

	public int freeBankSlots() {
		int freeS = 0;
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItems[i] <= 0) {
				freeS++;
			}
		}
		return freeS;
	}

	public int InvItemAmt(int Id) {
		int Amt = 0;
		if (Id < 0) {
			return 25;
		}
		if (CurrentFrame != 5292 && CurrentFrame != 3824) {
			if (Id == 556 && playerEquipment[playerWeapon] == 1381) {
				return 25;
			} else if (Id == 555 && playerEquipment[playerWeapon] == 1383) {
				return 25;
			} else if (Id == 557 && playerEquipment[playerWeapon] == 1385) {
				return 25;
			} else if (Id == 554
					&& (playerEquipment[playerWeapon] == 1387 || playerEquipment[playerWeapon] == 3053)) {
				return 25;
			} else if (Id == 555 && playerEquipment[playerWeapon] == 6563) {
				return 25;
			} else if (Id == 557
					&& (playerEquipment[playerWeapon] == 6563 || playerEquipment[playerWeapon] == 3053)) {
				return 25;
			}
		}
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == Id + 1 && !Item.itemStackable[Id]
					&& !Item.itemIsNote[Id]) {
				Amt++;
			} else if (playerItems[i] == Id + 1
					&& (Item.itemStackable[Id] || Item.itemIsNote[Id])) {
				Amt += playerItemsN[i];
			}
		}
		return Amt;
	}

	public int tradeItemAmt(int Id) {
		int Amt = 0;
		if (Id < 0) {
			return 0;
		}
		for (int i = 0; i < playerTItems.length; i++) {
			if (playerTItems[i] == Id + 1 && !Item.itemStackable[Id]) {
				Amt += 1;
			} else if (playerTItems[i] == Id + 1 && Item.itemStackable[Id]) {
				Amt += playerTItemsN[i];
			}
		}
		return Amt;
	}

	public int BankItemAmt(int Id) {
		int Amt = 0;
		if (Id < 0) {
			return 9999;
		}
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItems[i] == Id + 1) {
				Amt += bankItemsN[i];
			}
		}
		return Amt;
	}

	public int BankSlotItem(int Id) {
		int Amt = 0;
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItems[i] == Id + 1) {
				return i;
			}
		}
		return -1;
	}

	public int InvSlotItem(int Id) {
		int Amt = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == Id + 1) {
				return i;
			}
		}
		return -1;
	}

	public int GetBlankBankSlot() {
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItems[i] <= 0) {
				return i;
			}
		}
		return -1;
	}

	public int GetBlankInvSlot() {
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] <= 0) {
				return i;
			}
		}
		return -1;
	}

	public int BankAndInvItemAmt(int Id) {
		int Amt = 0;
		if (Id < 0) {
			return 9999;
		}
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == Id + 1 && !Item.itemStackable[Id]) {
				Amt += 1;
			} else if (playerItems[i] == Id + 1 && Item.itemStackable[Id]) {
				Amt += playerItemsN[i];
			}
		}
		for (int i = 0; i < playerBankSize; i++) {
			if (bankItems[i] == Id + 1) {
				Amt += bankItemsN[i];
			}
		}
		return Amt;
	}

	public int GetItemSlot(int ItemID) {
		for (int i = 0; i < playerItems.length; i++) {
			if ((playerItems[i] - 1) == ItemID) {
				return i;
			}
		}
		return -1;
	}

	public int untradable[] = { 7987, 7982, 7983, 7984, 7985, 7986, 7987, 7994,
			8004, 8025, 8026, 8037, 8038, 8042, 8043, 8044, 8045, 8075, 7959,
			7960, 7976, 3840, 3842, 3844, 6950, 2412, 2413, 2414, 2415, 2416,
			2417, 8058, 8059, 8060, 8061, 8062, 8063, 2892, 2893, 7454, 7455,
			7456, 7457, 7458, 7459, 7460, 7461, 7462, 8013, 8014, 8015, 8016,
			8017, 8018, 8080, 8081, 8082, 8083, 8084, 8085, 771, 772, 4031,
			1485, 1481, 1482, 1483, 1484, 2572, 2573 };

	public boolean isUntradable(int item) {
		if(item == 2572) {
			return true;
		}
		for(int i : untradable) {
			if (i == item) {
				return true;
			}
		}
		return false;
	}

	public void resetTItems(int WriteFrame) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(WriteFrame);
		outStream.writeWord(playerTItems.length);
		for (int i = 0; i < playerTItems.length; i++) {
			if (playerTItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(playerTItemsN[i]);
			} else {
				outStream.writeByte(playerTItemsN[i]);
			}
			outStream.writeWordBigEndianA(playerTItems[i]);
		}
		outStream.endFrameVarSizeWord();
	}

	public void resetOTItems(int WriteFrame) {
		// misc.debugMes("Ot Items Reset");
		// try {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(WriteFrame);
		outStream.writeWord(playerOTItems.length);
		for (int i = 0; i < playerOTItems.length; i++) {
			if (playerOTItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(playerOTItemsN[i]);
			} else {
				outStream.writeByte(playerOTItemsN[i]);
			}
			outStream.writeWordBigEndianA(playerOTItems[i]);
		}
		outStream.endFrameVarSizeWord();
		// } catch(Exception e) {}
	}

	public boolean deleteItem(int Id, int Slot, int Amount) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			return false;
		}
		if (Id < 0 || Amount < 0) {
			return false;
		}
		if (CurrentFrame != 5292 && CurrentFrame != 3824) {
			if (Id == 556 && playerEquipment[playerWeapon] == 1381) {
				return true;
			} else if (Id == 555 && playerEquipment[playerWeapon] == 1383) {
				return true;
			} else if (Id == 557 && playerEquipment[playerWeapon] == 1385) {
				return true;
			} else if (Id == 554
					&& (playerEquipment[playerWeapon] == 1387 || playerEquipment[playerWeapon] == 3053)) {
				return true;
			} else if (Id == 555 && playerEquipment[playerWeapon] == 6563) {
				return true;
			} else if (Id == 557
					&& (playerEquipment[playerWeapon] == 6563 || playerEquipment[playerWeapon] == 3053)) {
				return true;
			}
		}
		if ((playerItems[Slot] == Id + 1)
				&& (!Item.itemStackable[Id] && !Item.itemIsNote[Id])) {
			if (Amount == 1) {
				playerItems[Slot] = 0;
				playerItemsN[Slot] = 0;
				resetItems(3214);
				return true;
			} else {
				for (int i = 0; i < 28; i++) {
					if (playerItems[i] == Id + 1 && Amount != 0) {
						Amount--;
						playerItems[i] = 0;
						playerItemsN[i] = 0;
						resetItems(3214);
					}
				}
				if (Amount == 0) {
					return true;
				}
			}
		}
		if ((playerItems[Slot] == Id + 1)
				&& (Item.itemStackable[Id] || Item.itemIsNote[Id])) {
			if (playerItemsN[Slot] > Amount) {
				playerItemsN[Slot] -= Amount;
				resetItems(3214);
				return true;
			} else {
				playerItemsN[Slot] = 0;
				playerItems[Slot] = 0;
				resetItems(3214);
				return true;
			}
		}
		return false;
	}

	public boolean addItem(int Id, int Amount) {
		if (Id <= -1 || Amount <= -1) {
			return false;
		}
		if (Amount < 1) {
			Amount = 1;
		}
		if (!Item.itemStackable[Id] && !Item.itemIsNote[Id]) {
			for (int i = 0; i < playerItems.length; i++) {
				int ToSlot = GetBlankInvSlot();
				if (ToSlot >= 0 && Amount != 0) {
					Amount -= 1;
					playerItems[ToSlot] = Id + 1;
					playerItemsN[ToSlot] = 1;
					resetItems(3214);
				}
			}
			if (Amount == 0) {
				return true;
			} else {
				sendMessage("Not enough space in your inventory.");
				return false;
			}
		} else if (Item.itemStackable[Id] || Item.itemIsNote[Id]) {
			if (InvItemAmt(Id) > 0) {
				if ((Amount + InvItemAmt(Id)) <= maxItemAmount) {
					playerItemsN[InvSlotItem(Id)] += Amount;
					resetItems(3214);
					return true;
				} else {
					playerItemsN[InvSlotItem(Id)] = maxItemAmount;
					resetItems(3214);
					return true;
				}
			} else if (InvItemAmt(Id) <= 0) {
				int Slot = GetBlankInvSlot();
				if (Slot >= 0) {
					playerItems[Slot] = Id + 1;
					playerItemsN[Slot] = Amount;
					resetItems(3214);
					return true;
				} else {
					sendMessage("Not enough space in your inventory.");
					return false;
				}
			}
		}
		sendMessage("Unexpected additem() error");
		return false;
	}

	public void CreateProjectile2(int casterY, int casterX, int offsetY,
			int offsetX, int gfxMoving, int StartHeight, int endHeight,
			int AtkIndex) {
		// misc.debugMes("Projectile Created");
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 60)) {
					if (p.heightLevel == heightLevel) {
						if (Server.s.playerHandler.players[i] != null
								&& !Server.s.playerHandler.players[i].disconnected) {
							p.outStream.createFrame(85);
							p.outStream
									.writeByteC((casterY - (p.mapRegionY * 8)) - 2);
							p.outStream
									.writeByteC((casterX - (p.mapRegionX * 8)) - 3);
							p.outStream.createFrame(117);
							p.outStream.writeByte(50);
							p.outStream.writeByte(offsetY);
							p.outStream.writeByte(offsetX);
							p.outStream.writeWord(AtkIndex);
							p.outStream.writeWord(gfxMoving);
							p.outStream.writeByte(StartHeight);
							p.outStream.writeByte(endHeight);
							p.outStream.writeWord(51);
							p.outStream.writeWord(95);
							p.outStream.writeByte(16);
							p.outStream.writeByte(64);
						}
					}
				}
			}
		}
	}

	public int magicOnItemY = 0;
	public int magicOnItemId = 0;
	public int magicOnItemX = 0;
	public int magicOnItemSpellId = 0;

	public void magicOnGroundItem() {
		magicOnItemY = inStream.readSignedWordBigEndian();
		magicOnItemId = inStream.readUnsignedWord();
		magicOnItemX = inStream.readSignedWordBigEndian();
		magicOnItemSpellId = inStream.readUnsignedWordA();

		if (magicOnItemSpellId == 1168) {
			if (InvItemAmt(563) >= 1 && InvItemAmt(556) >= 1) {
				if (playerLevel[6] >= 33) {
					if (WithinDistance(magicOnItemX, magicOnItemY, absX, absY,
							18)) {
						stopMovement();
						deleteItem(563, GetItemSlot(563), 1);
						deleteItem(556, GetItemSlot(556), 1);
						startAnimation(729, 0);
						playGraphic(142, 0, 0);
						StillGfx(144, magicOnItemX, magicOnItemY, 95, 0);
						int offsetX = (absX - magicOnItemX) * -1;
						int offsetY = (absY - magicOnItemY) * -1;
						int slot = 0;
						telegrab = 2;
						resetItems(3214);
					}
				} else {
					sendMessage("You need a higher magic level to use this spell.");
				}
			} else {
				sendMessage("You do not have enough runes to cast this spell.");
			}
		}
	}

	public int ItemY = 0;
	public int ItemX = 0;
	public int ItemId = 0;
	public boolean pickupItem = false;

	public void PickupItem() {
		if (!pickupItem) {
			ItemY = inStream.readSignedWordBigEndian();
			ItemId = inStream.readUnsignedWord();
			ItemX = inStream.readSignedWordBigEndian();
		}
		pickupItem = true;
		if (IsDead || NewHp <= 0 || playerLevel[3] <= 0 || teleportToX > 0
				&& teleportToY > 0) {
			pickupItem = false;
			return;
		}
		if (WithinDistance(ItemX, ItemY, absX, absY, 1)) {
			pickupItem = false;
			for (int i = 0; i < Server.s.itemHandler.MaxGroundItems; i++) {
				try {
					if (Server.s.itemHandler.GroundItemId[i] == ItemId) {
						if (Server.s.itemHandler.GroundItemX[i] == ItemX
								&& Server.s.itemHandler.GroundItemY[i] == ItemY) {
							if ((Server.s.itemHandler.isUntradable(itemId) || Server.s.itemHandler.GroundItemTime[i] < 120)
									&& !Server.s.itemHandler.DroppedByName[i]
											.equals(playerName)
									&& Server.s.itemHandler.DroppedByName[i]
											.length() != 0) {
								continue;
							}
							if (addItem(Server.s.itemHandler.GroundItemId[i],
									Server.s.itemHandler.GroundItemAmt[i])) {
								Server.s.itemHandler.RemoveGroundItemAll(
										Server.s.itemHandler.GroundItemId[i],
										Server.s.itemHandler.GroundItemX[i],
										Server.s.itemHandler.GroundItemY[i]);
								Server.s.itemHandler.GroundItemId[i] = -1;
								Server.s.itemHandler.GroundItemAmt[i] = 0;
								Server.s.itemHandler.GroundItemTime[i] = 0;
								Server.s.itemHandler.DroppedBy[i] = 0;
								Server.s.itemHandler.heightLvl[i] = 0;
								Server.s.itemHandler.DroppedByName[i] = "";
								break;
							}
						}
					}
				} catch (Exception error) {
					sendPaliMessage(error.getMessage());
				}
			}
		}
	}

	public int GetRunEmote(int id, String WeaponName) {
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (isNpc && npcId == 1463) {
			return 1419;
		}
		if (id == -1) {
			return 0x338;
		}
		if (id == 4718) {
			return 2563;
		}
		if (id == 4755) {
			return 1831;
		}
		if (id == 4734) {
			return 2077;
		}
		if (id == 4747) {
			return 0x338;
		}
		if (id == 4726) {
			return 1210;
		}
		if (WeaponName.contains("anchor")) {
			return 5868;
		}
		if (WeaponName.contains("bow")) {
			return 0x338;
		}
		if (WeaponName.contains("2h")) {
			return 7039;
		}
		if (WeaponName.endsWith("godsword")) {
			return 7039;
		}
		if (WeaponName.equals("Saradomin sword")) {
			return 7039;
		}
		if (WeaponName.contains("whip")) {
			return 1661;
		}
		if (WeaponName.contains("Spear")) {
			return 1210;
		}
		if (WeaponName.contains("halberd")) {
			return 1210;
		}
		if (id == 4153 || id == 8103) {
			return 1664;
		}
		if (WeaponName.contains("Saradomin staff")
				|| WeaponName.contains("Guthix staff")
				|| WeaponName.contains("Zamorak staff")) {
			return 0x338;
		}
		if (WeaponName.contains("Staff") || WeaponName.contains("staff")) {
			return 1210;
		}
		if (id == 6528) {
			return 2563;
		} else {
			return 0x338;
		}
	}

	public int GetWalkEmote(int id, String WeaponName) {
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (isNpc && npcId == 1463) {
			return 219;
		}
		if (id == -1) {
			return 0x333;
		}
		if (id == 4718) {
			return 2064;
		}
		if (id == 4755) {
			return 2060;
		}
		if (id == 4734) {
			return 2076;
		}
		if (id == 4747) {
			return 0x333;
		}
		if (id == 4726) {
			return 1146;
		}
		if (WeaponName.contains("anchor")) {
			return 5867;
		}
		if (WeaponName.contains("bow")) {
			return 0x333;
		}
		if (WeaponName.contains("2h")) {
			return 7046;
		}
		if (WeaponName.equals("Saradomin sword")) {
			return 7046;
		}
		if (WeaponName.endsWith("godsword")) {
			return 7046;
		}
		if (WeaponName.contains("whip")) {
			return 1660;
		}
		if (WeaponName.contains("Spear")) {
			return 1146;
		}
		if (WeaponName.contains("halberd")) {
			return 1146;
		}
		if (id == 4153 || id == 8103) {
			return 1663;
		}
		if (WeaponName.contains("Saradomin staff")
				|| WeaponName.contains("Guthix staff")
				|| WeaponName.contains("Zamorak staff")) {
			return 0x333;
		}
		if (WeaponName.contains("Staff") || WeaponName.contains("staff")) {
			return 1146;
		}
		if (id == 6528) {
			return 2064;
		} else {
			return 0x333;
		}
	}

	public int GetBlockEmote(String WeaponName) {
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (isNpc && npcId == 1463) {
			return 221;
		}
		if (playerEquipment[playerShield] <= 8063
				&& playerEquipment[playerShield] == 8058
				|| playerEquipment[playerShield] == 7977
				|| playerEquipment[playerShield] == 7978
				|| playerEquipment[playerShield] == 7959
				|| WeaponName.endsWith("defender")) {
			return 4177;
		} else if (playerEquipment[playerShield] >= 3839
				&& playerEquipment[playerShield] <= 3843) {
			return 398;
		} else if (playerEquipment[playerShield] > 0) {
			return 0x484;
		} else if (WeaponName.equals("Dharoks greataxe")
				|| WeaponName.endsWith("Torags hammers")) {
			return 424;
		} else if (WeaponName.endsWith("bow") || WeaponName.endsWith("longbow")
				|| WeaponName.endsWith("crossbow")
				|| WeaponName.endsWith("c'bow")
				|| WeaponName.equals("Seercull")) {
			return 424;
		} else if (WeaponName.equals("Guthans warspear")) {
			return 415;
		} else if (WeaponName.equals("Ahrims staff")) {
			return 2079;
		} else if (WeaponName.endsWith("whip")) {
			return 1659;
		} else if (playerEquipment[playerWeapon] == 4153
				|| playerEquipment[playerWeapon] == 6528
				|| playerEquipment[playerWeapon] == 8103) {
			return 1666;
		} else if (playerEquipment[playerWeapon] == 4755) {
			return 2063;
		} else if (WeaponName.contains("Staff")) {
			return 1429;
		}

		if (WeaponName.contains("anchor")) {
			return 5866;
		}

		else if (WeaponName.contains("staff")) {
			return 1429;
		} else if (WeaponName.endsWith("greataxe")) {
			return 410;
		} else if (WeaponName.contains("2h")
				|| WeaponName.equals("Saradomin sword")
				|| WeaponName.endsWith("godsword")) {
			return 7050;
		} else if (WeaponName.endsWith("battleaxe")
				|| WeaponName.endsWith("dagger")
				|| WeaponName.endsWith("dagger(s)")) {
			return 397;
		} else if (playerEquipment[playerShield] == -1
				&& playerEquipment[playerWeapon] == -1) {
			return 424;
		} else {
			return 398;
		}
	}

	public int GetStandEmote(int id, String WeaponName) {
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (id == -1) {
			return 0x328;
		}
		if (isNpc && npcId == 1463) {
			return 222;
		}
		if (id == 4718) {
			return 2065;
		}
		if (id == 4755) {
			return 2061;
		}
		if (id == 4734) {
			return 2074;
		}
		if (id == 4747) {
			return 0x328;
		}
		if (id == 4726) {
			return 809;
		}
		if (WeaponName.contains("bow")) {
			return 0x328;
		}
		if (WeaponName.contains("2h")) {
			return 7047;
		}
		if (WeaponName.equals("Saradomin sword")) {
			return 7047;
		}
		if (WeaponName.endsWith("godsword")) {
			return 7047;
		}
		if (WeaponName.contains("whip")) {
			return 1832;
		}
		if (WeaponName.contains("anchor")) {
			return 5869;
		}
		if (WeaponName.endsWith("spear")) {
			return 809;
		}
		if (WeaponName.contains("halberd")) {
			return 809;
		}
		if (id == 4153 || id == 8103) {
			return 1662;
		}
		if (id == 1305) {
			return 809;
		}
		if (WeaponName.contains("Saradomin staff")
				|| WeaponName.contains("Guthix staff")
				|| WeaponName.contains("Zamorak staff")) {
			return 0x328;
		}
		if (WeaponName.contains("Staff") || WeaponName.contains("staff")) {
			return 809;
		}
		if (id == 6528 || id == 1319) {
			return 0x811;
		} else {
			return 0x328;
		}
	}

	public int getWepSound() {
		String WeaponName = getItemName(playerEquipment[playerWeapon]);
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (WeaponName.equals("Sovereign blade")) {
			return 5;
		}
		if (WeaponName.equals("Dragon dagger")
				|| WeaponName.equals("Dragon dagger(s)")) {
			return 1;
		}
		if (WeaponName.contains("dagger")) {
			return 1;
		}
		if (WeaponName.equals("Dragon longsword")) {
			return 5;
		}
		if (WeaponName.equals("Abyssal whip")) {
			return 3;
		}
		if (WeaponName.equals("Torags hammers")) {
			return 7;
		}
		if (WeaponName.equals("Dharoks greataxe")) {
			return 8;
		}
		if (WeaponName.equals("Veracs flail")) {
			return 9;
		}
		if (WeaponName.equals("Guthans warspear")) {
			return 10;
		}
		if (WeaponName.equals("Granite maul")) {
			return 2;
		}
		if (WeaponName.contains("shortbow") || WeaponName.contains("Shortbow")) {
			return 6;
		}
		if (WeaponName.contains("longbow") || WeaponName.contains("Longbow")) {
			return 6;
		}
		if (WeaponName.contains("bow") || WeaponName.contains("Bow")) {
			return 6;
		}
		if (WeaponName.contains("Seercull")) {
			return 6;
		}
		if (WeaponName.contains("Toktz-xil-ul")) {
			return 6;
		}
		if (WeaponName.contains("thrownaxe")) {
			return 6;
		}
		if (WeaponName.contains("dart")) {
			return 6;
		}
		if (WeaponName.contains("javelin")) {
			return 6;
		}
		if (WeaponName.contains("knife")) {
			return 6;
		}
		if (WeaponName.contains("crossbow") || WeaponName.contains("Crossbow")
				|| WeaponName.contains("c'bow")) {
			return 6;
		}
		if (!WeaponName.contains("2h") && WeaponName.contains("sword")
				|| !WeaponName.contains("2h")
				&& WeaponName.contains("longsword")
				|| WeaponName.contains("scimitar")) {
			return 5;
		}
		if (WeaponName.contains("Unarmed")) {
			return 21;
		}
		return 5;
	}

	public int getWepSoundDelay() {
		String WeaponName = getItemName(playerEquipment[playerWeapon]);
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (WeaponName.equals("Sovereign blade")) {
			return 1;
		}
		if (WeaponName.equals("Dragon dagger")
				|| WeaponName.equals("Dragon dagger(s)")) {
			return 1;
		}
		if (WeaponName.equals("Dragon longsword")) {
			return 1;
		}
		if (WeaponName.equals("Abyssal whip")) {
			return 0;
		}
		if (WeaponName.equals("Torags hammers")) {
			return 0;
		}
		if (WeaponName.equals("Dharoks greataxe")) {
			return 0;
		}
		if (WeaponName.equals("Veracs flail")) {
			return 0;
		}
		if (WeaponName.equals("Guthans warspear")) {
			return 0;
		}
		if (WeaponName.equals("Granite maul")) {
			return 1;
		}
		if (WeaponName.contains("shortbow") || WeaponName.contains("Shortbow")) {
			return 1;
		}
		if (WeaponName.contains("longbow") || WeaponName.contains("Longbow")) {
			return 1;
		}
		if (WeaponName.contains("bow") || WeaponName.contains("Bow")) {
			return 1;
		}
		if (WeaponName.contains("Seercull")) {
			return 1;
		}
		if (WeaponName.contains("Toktz-xil-ul")) {
			return 1;
		}
		if (WeaponName.contains("thrownaxe")) {
			return 1;
		}
		if (WeaponName.contains("dart")) {
			return 1;
		}
		if (WeaponName.contains("javelin")) {
			return 1;
		}
		if (WeaponName.contains("knife")) {
			return 1;
		}
		if (WeaponName.contains("crossbow") || WeaponName.contains("Crossbow")) {
			return 1;
		}
		if (!WeaponName.contains("2h") && WeaponName.contains("sword")
				|| !WeaponName.contains("2h")
				&& WeaponName.contains("longsword")
				|| WeaponName.contains("scimitar")) {
			return 1;
		}
		return 1;
	}

	public int GetWeaponAtkEmote(String WeaponName, int FightType) {
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (isNpc && npcId == 1463) {
			return 220;
		}
		if (WeaponName.equals("Staff of light")) {
			if (FightType == 2) {
				return 412;
			} else {
				return 440;
			}
		}
		if (WeaponName.equals("Sovereign blade")) {
			return 451;
		} else if (WeaponName.contains("Unarmed")) {
			if (FightType == 2) {
				return 423;
			} else {
				return 422;
			}
		}
		if (WeaponName.contains("2h") || WeaponName.equals("Saradomin sword")
				|| WeaponName.endsWith("godsword")) {

			return 7041;

		} else if (WeaponName.contains("Guthans warspear")) {
			if (FightType == 3) {
				return 2081;
			} else {
				return 2080;
			}
		} else if (WeaponName.contains("Dragon dagger")) {
			if (FightType == 2) {
				return 401;
			} else {
				return 402;
			}
		} else if (WeaponName.contains("Karils crossbow")) {
			return 2075;
		} else if (WeaponName.contains("shortbow")
				|| WeaponName.contains("Shortbow")) {
			return 426;
		} else if (WeaponName.contains("longbow")
				|| WeaponName.contains("Longbow")) {
			return 426;
		} else if (WeaponName.contains("Seercull")) {
			return 426;
		} else if (WeaponName.contains("Toktz-xil-ul")) {
			return 2614;
		} else if (WeaponName.contains("thrownaxe")) {
			return 0x326;
		} else if (WeaponName.contains("dart")) {
			return 0x326;
		} else if (WeaponName.contains("javelin")) {
			return 0x326;
		} else if (WeaponName.contains("knife")) {
			return 0x326;
		} else if (WeaponName.contains("crossbow")
				|| WeaponName.contains("Crossbow")
				|| WeaponName.contains("c'bow")) {
			return 4230;
		} else if (WeaponName.contains("bow") || WeaponName.contains("Bow")) {
			return 426;
		} else if (WeaponName.contains("dagger")
				|| WeaponName.contains("pickaxe")) {
			if (FightType == 2) {
				return 451;
			} else {
				return 412;
			}
		} else if (WeaponName.contains("sword") && !WeaponName.contains("2h")
				|| WeaponName.contains("mace")
				|| WeaponName.contains("longsword")
				&& !WeaponName.contains("2h")
				|| WeaponName.contains("scimitar")) {
			if (FightType == 3) {
				return 412;
			} else {
				return 451;
			}
		} else if (WeaponName.contains("axe")
				&& !WeaponName.contains("greataxe")
				&& !WeaponName.contains("thrownaxe")
				|| WeaponName.contains("battleaxe")) {
			return 1833;
		} else if (WeaponName.contains("halberd")
				|| WeaponName.contains("spear")
				&& !WeaponName.contains("Guthans")
				|| WeaponName.contains("Staff of light")) {
			if (FightType == 2) {
				return 412;
			} else {
				return 440;
			}
		} else if (WeaponName.contains("Tzhaar-ket-om")) {
			return 2661;
		} else if (WeaponName.contains("Barrelchest anchor")) {
			return 5865;
		} else if (WeaponName.contains("Granite maul")) {
			return 1665;
		} else if (WeaponName.contains("greataxe")) {
			if (FightType == 2) {
				return 2067;
			} else {
				return 2066;
			}
		} else if (WeaponName.contains("flail")) {
			return 2062;
		} else if (WeaponName.equals("Abyssal whip")) {
			return 1658;
		} else if (WeaponName.equals("Rune whip")) {
			return 1658;
		} else if (WeaponName.equals("Dragon whip")) {
			return 1658;
		} else if (WeaponName.contains("hammers")) {
			return 2068;
		} else {
			return 451;
		}
	}

	public void setEquipment(int wearID, int amount, int targetSlot) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			return;
		}
		setDuelEquipment(wearID, amount, targetSlot);
		outStream.createFrameVarSizeWord(34);
		outStream.writeWord(1688);
		outStream.writeByte(targetSlot);
		outStream.writeWord((wearID + 1));
		if (amount > 254) {
			outStream.writeByte(255);
			outStream.writeDWord(amount);
		} else {
			outStream.writeByte(amount);
		}
		outStream.endFrameVarSizeWord();
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void resetItems(int frameId) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(frameId);
		outStream.writeWord(playerItems.length);
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(playerItemsN[i]);
			} else {
				outStream.writeByte(playerItemsN[i]);
			}
			outStream.writeWordBigEndianA(playerItems[i]);
		}
		outStream.endFrameVarSizeWord();
	}

	public void SetSmithing(int WriteFrame) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(WriteFrame);
		outStream.writeWord(Item.SmithingItems.length);
		for (int i = 0; i < Item.SmithingItems.length; i++) {
			Item.SmithingItems[i][0] += 1;
			if (Item.SmithingItems[i][1] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(Item.SmithingItems[i][1]);
			} else {
				outStream.writeByte(Item.SmithingItems[i][1]);
			}
			outStream.writeWordBigEndianA(Item.SmithingItems[i][0]);
		}
		outStream.endFrameVarSizeWord();
	}

	public boolean invSpace() {
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == 0) {
				return true;
			}
		}
		return false;
	}

	public boolean memberItem(int itemId) {
		for (int i = 0; i < memberItems.length; i++) {
			if (memberItems[i] == itemId) {
				return true;
			}
		}
		return false;
	}

	public boolean extremeItem(int itemId) {
		for (int i = 0; i < extremeItems.length; i++) {
			if (extremeItems[i] == itemId) {
				return true;
			}
		}
		return false;
	}

	public boolean needEquip = false;

	public void wear(int wearID, int slot, int Unknown) {
		IsAttackingNPC = false;
		attackingPlayer = false;
		needEquip = false;
		int targetSlot = 0;
		int CLAttack = getCLAttack(wearID);
		int CLDefence = getCLDefence(wearID);
		int CLStrength = getCLStrength(wearID);
		int CLMagic = getCLMagic(wearID);
		int CLRanged = getCLRanged(wearID);
		int CLPray = getCLPrayer(wearID);
		int CLHp = getCLHealth(wearID);
		int CLHerb = getCLHerblore(wearID);
		int CLThief = getCLThieving(wearID);
		int CLRuneC = getCLRunecrafting(wearID);
		int CLFish = getCLFishing(wearID);
		int CLCook = getCLCooking(wearID);
		if (CLAttack > getLevelForXP(playerXP[playerAttack])) {
			sendMessage("You need " + CLAttack + " Attack to equip this item.");
			return;
		}
		if (CLDefence > getLevelForXP(playerXP[playerDefence])) {
			sendMessage("You need " + CLDefence
					+ " Defence to equip this item.");
			return;
		}
		if (CLStrength > getLevelForXP(playerXP[playerStrength])) {
			sendMessage("You need " + CLStrength
					+ " Strength to equip this item.");
			return;
		}
		if (CLMagic > getLevelForXP(playerXP[playerMagic])) {
			sendMessage("You need " + CLMagic + " Magic to equip this item.");
			return;
		}
		if (CLRanged > getLevelForXP(playerXP[playerRanged])) {
			sendMessage("You need " + CLRanged + " Ranged to equip this item.");
			return;
		}
		if (CLPray > getLevelForXP(playerXP[playerPrayer])) {
			sendMessage("You need " + CLPray + " Prayer to equip this item.");
			return;
		}
		if (CLHp > getLevelForXP(playerXP[playerHitpoints])) {
			sendMessage("You need " + CLHp + " Hitpoints to equip this item.");
			return;
		}
		if (CLHerb > getLevelForXP(playerXP[playerHerblore])) {
			sendMessage("You need " + CLHerb + " Herblore to equip this item.");
			return;
		}
		if (CLThief > getLevelForXP(playerXP[playerThieving])) {
			sendMessage("You need " + CLThief + " Thieving to equip this item.");
			return;
		}
		if (CLRuneC > getLevelForXP(playerXP[playerRunecrafting])) {
			sendMessage("You need " + CLRuneC
					+ " Runecrafting to equip this item.");
			return;
		}
		if (CLFish > getLevelForXP(playerXP[playerFishing])) {
			sendMessage("You need " + CLFish + " Fishing to equip this item.");
			return;
		}
		if (CLCook > getLevelForXP(playerXP[playerCooking])) {
			sendMessage("You need " + CLCook + " Cooking to equip this item.");
			return;
		}
		if (wearID == 7978 && combatLevel < 126) {
			sendMessage("You need to have 99 in all combat!");
			return;
		}
		if (wearID == 8041 && getLevelForXP(playerXP[playerWoodcutting]) < 99) {
			sendMessage("You need 99 Woodcutting to equip this item.");
			return;
		}
		if (memberItem(wearID) && isMember == 0) {
			sendMessage("This is a premium members only item!");
			return;
		}
		if (extremeItem(wearID) && isExtremeMember == 0) {
			sendMessage("This is an extreme members only item!");
			return;
		}
		if (twoHanded(wearID) && inveSpace() < 1
				&& playerEquipment[playerShield] > 0) {
			sendMessage("Not enough space in your inventory.");
			return;
		}
		if (wearID == 1052 && legendQuest < 3) {
			sendMessage("You need to complete the Legends Quest first!");
			return;
		}
		if (wearID == 8042 && getLevelForXP(playerXP[playerMining]) < 99) {
			sendMessage("You need 99 Mining to equip this item.");
			return;
		}
		if (wearID == 8043 && getLevelForXP(playerXP[playerSmithing]) < 99) {
			sendMessage("You need 99 Smithing to equip this item.");
			return;
		}
		if (wearID == 8044 && getLevelForXP(playerXP[playerFletching]) < 99) {
			sendMessage("You need 99 Fletching to equip this item.");
			return;
		}
		if (wearID == 8045 && getLevelForXP(playerXP[playerCrafting]) < 99) {
			sendMessage("You need 99 Crafting to equip this item.");
			return;
		}
		if (wearID == 8075 && getLevelForXP(playerXP[playerSlayer]) < 99) {
			sendMessage("You need 99 Slayer to equip this item.");
			return;
		}
		if (wearID == 4170 && getLevelForXP(playerXP[playerSlayer]) < 55) {
			sendMessage("You need 55 Slayer to equip this item.");
			return;
		}
		if (slot > -1 && slot < 28 && playerItems[slot] == wearID + 1) {
			resetItems(3214);
			targetSlot = itemType(wearID);
			if (duelRule[5] && targetSlot != playerWeapon
					&& targetSlot != playerArrows) {
				sendMessage("Armour has been disabled this duel.");
				return;
			}
			if (duelRule[4] && targetSlot == playerWeapon) {
				sendMessage("Weapons has been disabled this duel.");
				return;
			}
			int wearAmount = playerItemsN[slot];
			if (wearAmount < 1) {
				return;
			}
			if (slot >= 0 && wearID >= 0) {
				deleteItem(wearID, slot, wearAmount);
				if (playerEquipment[targetSlot] != wearID
						&& playerEquipment[targetSlot] >= 0) {
					addItem(playerEquipment[targetSlot],
							playerEquipmentN[targetSlot]);
					resetItems(3214);
				} else if (Item.itemStackable[wearID]
						&& playerEquipment[targetSlot] == wearID) {
					wearAmount = playerEquipmentN[targetSlot] + wearAmount;
				} else if (playerEquipment[targetSlot] >= 0) {
					addItem(playerEquipment[targetSlot],
							playerEquipmentN[targetSlot]);
					resetItems(3214);
				}
			}
			setEquipment(wearID, wearAmount, targetSlot);
			playerEquipment[targetSlot] = wearID;
			playerEquipmentN[targetSlot] = wearAmount;
			if (targetSlot == playerWeapon) {
				if (twoHanded(wearID)) {
					removeItem(playerEquipment[playerShield], playerShield);
				}
			}
			if (targetSlot == playerShield) {
				if (twoHanded(playerEquipment[playerWeapon])) {
					removeItem(playerEquipment[playerWeapon], playerWeapon);
				}
			}
			if (targetSlot == playerWeapon) {
				SendWeapon((playerEquipment[playerWeapon]),
						getItemName(playerEquipment[playerWeapon]));
			}
			RemoveAllWindows();
			getBonus();
			updateRequired = true;
			appearanceUpdateRequired = true;
			wearID = 0;
			slot = 0;
		}
	}

	public void checkEquipmentLevel() {
		for (int q = 0; q < playerEquipment.length; q++) {
			int wearID = playerEquipment[q];
			int CLAttack = getCLAttack(wearID);
			int CLDefence = getCLDefence(wearID);
			int CLStrength = getCLStrength(wearID);
			int CLMagic = getCLMagic(wearID);
			int CLRanged = getCLRanged(wearID);
			int CLPray = getCLPrayer(wearID);
			int CLHp = getCLHealth(wearID);
			int CLHerb = getCLHerblore(wearID);
			int CLThief = getCLThieving(wearID);
			int CLRuneC = getCLRunecrafting(wearID);
			int CLFish = getCLFishing(wearID);
			int CLCook = getCLCooking(wearID);
			if (CLAttack > getLevelForXP(playerXP[playerAttack])) {
				removeItem(playerEquipment[q], q);
			} else if (CLDefence > getLevelForXP(playerXP[playerDefence])) {
				removeItem(playerEquipment[q], q);
			} else if (CLStrength > getLevelForXP(playerXP[playerStrength])) {
				removeItem(playerEquipment[q], q);
			} else if (CLMagic > getLevelForXP(playerXP[playerMagic])) {
				removeItem(playerEquipment[q], q);
			} else if (CLRanged > getLevelForXP(playerXP[playerRanged])) {
				removeItem(playerEquipment[q], q);
			} else if (CLPray > getLevelForXP(playerXP[playerPrayer])) {
				removeItem(playerEquipment[q], q);
			} else if (CLHp > getLevelForXP(playerXP[playerHitpoints])) {
				removeItem(playerEquipment[q], q);
			} else if (CLHerb > getLevelForXP(playerXP[playerHerblore])) {
				removeItem(playerEquipment[q], q);
			} else if (CLThief > getLevelForXP(playerXP[playerThieving])) {
				removeItem(playerEquipment[q], q);
			} else if (CLRuneC > getLevelForXP(playerXP[playerRunecrafting])) {
				removeItem(playerEquipment[q], q);
			} else if (CLFish > getLevelForXP(playerXP[playerFishing])) {
				removeItem(playerEquipment[q], q);
			} else if (CLCook > getLevelForXP(playerXP[playerCooking])) {
				removeItem(playerEquipment[q], q);
			} else if (wearID == 7978 && combatLevel < 126) {
				removeItem(playerEquipment[q], q);
			} else if (memberItem(wearID) && isMember == 0) {
				removeItem(playerEquipment[q], q);
			} else if (wearID == 1052 && legendQuest < 3) {
				removeItem(playerEquipment[q], q);
			}
			if (wearID == 4031 && monkeyMadnessQuest < 5) {
				removeItem(playerEquipment[q], q);
			}
		}
	}

	public int inveSpace() {
		int space = 0;
		for (int i = 0; i < playerItems.length; i++) {
			if (playerItems[i] == 0) {
				space++;
			}
		}
		return space;
	}

	public boolean twoHanded(int itemId) {
		String wepEquiped = getItemName(itemId);
		wepEquiped.replaceAll("_", " ");
		wepEquiped.trim();
		if (itemId == 7993) {
			return true;
		} else if (itemId == 7958) {
			return true;
		} else if (itemId == 8103) {
			return true;
		} else if (itemId == 8086) {
			return true;
		} else if (itemId == 1345) {
			return true;
		} else if (itemId == 4212) {
			return true;
		} else if (itemId == 4214) {
			return true;
		} else if (wepEquiped.contains("claws")) {
			return true;
		} else if (wepEquiped.contains("2h") || wepEquiped.contains("godsword")) {
			return true;
		} else if (wepEquiped.endsWith("longbow")) {
			return true;
		} else if (wepEquiped.equals("Seercull")) {
			return true;
		} else if (wepEquiped.endsWith("shortbow")) {
			return true;
		} else if (wepEquiped.endsWith("Longbow")) {
			return true;
		} else if (wepEquiped.endsWith("Shortbow")) {
			return true;
		} else if (wepEquiped.endsWith("bow full")) {
			return true;
		} else if (wepEquiped.endsWith("Dark bow")) {
			return true;
		} else if (wepEquiped.endsWith("halberd")) {
			return true;
		} else if (wepEquiped.equals("Granite maul")) {
			return true;
		} else if (wepEquiped.equals("Karils crossbow")) {
			return true;
		} else if (wepEquiped.equals("Torags hammers")) {
			return true;
		} else if (wepEquiped.equals("Veracs flail")) {
			return true;
		} else if (wepEquiped.equals("Dharoks greataxe")) {
			return true;
		} else if (wepEquiped.equals("Guthans warspear")) {
			return true;
		} else if (wepEquiped.equals("Saradomin sword")) {
			return true;
		} else if (wepEquiped.equals("Tzhaar-ket-om")) {
			return true;
		} else {
			return false;
		}
	}

	public boolean clickedObject1 = false;
	public boolean clickedObject2 = false;
	public int objectId = 0;
	public int objectX = 0;
	public int objectY = 0;

	public void ObjectClick2() {
		if (!clickedObject2) {
			objectId = inStream.readUnsignedWordBigEndianA();
			objectY = inStream.readSignedWordBigEndian();
			objectX = inStream.readUnsignedWordA();
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: objectId = " + objectId
						+ ", x = " + objectX + ", y = " + objectY);
			}
		}
		clickedObject2 = true;
		RemoveAllWindows();
		int dis = 2;
		if (objectId == 3044 || objectId == 4304 || objectId == 11666
				|| objectId == 2781 || objectId == 2491 || objectId == 12100) {
			dis = 5;
		}
		if (WithinDistance(objectX, objectY, absX, absY, dis)) {
			clickedObject2 = false;
			objectFace(objectX, objectY);
			if (ObjectClickDelay <= 0) {
				ObjectClickDelay = 4;
				switch (objectId) {
				case 2646:
					addItem(1779, 1);
					startAnimation(897, 0);
					Server.s.worldO.checkIfExists(objectId, objectX, objectY,
							10, 0);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					break;
				case 2644:
					sendMessage("You something you want to spin on this object.");
					break;
				case 625:
					if (playerLevel[playerThieving] >= 5) {
						if (invSpace()) {
							addItem(249, 1);
							sendMessage("You manage to steal a herb.");
							startAnimation(881, 0);
							thiefDelay = 4;
							addSkillXP(16 * thiefXpInc, 17);
						} else {
							sendMessage("Not enough space in your inventory.");
						}
					} else {
						sendMessage("You need atleast 5 Thieving to steal from this stall.");
					}
					break;
				case 4878:
					if (playerLevel[playerThieving] >= 1) {
						if (invSpace()) {
							int steal = Misc.random(30000);
							addItem(995, steal);
							if (steal > 1) {
								sendMessage("You manage to steal " + steal
										+ " coins.");
							} else {
								sendMessage("You couldn't steal any coins.");
							}
							startAnimation(881, 0);
							thiefDelay = 14;
							addSkillXP(160 * thiefXpInc, 17);
						} else {
							sendMessage("Not enough space in your inventory.");
						}
					} else {
						sendMessage("You need atleast 1 Thieving to steal from this stall.");
					}
					break;
				case 2927:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (playerLevel[playerMagic] >= 50) {
						startTele(2775, 9302, 0, 714, 715, 308, 4, 18431);
					} else {
						sendMessage("You need atleast 50 magic to use that teleport!");
					}
					break;
				case 2926:
					walkToPoint(2789, 9296, 2750);
					startAnimation(1115, 0);
					break;
				case 2911:
					changeCoords(2799, 9340, 0);
					break;
				case 2918:
					changeCoords(2795, 9338, 0);
					break;
				case 2912:
				case 2913:
					if (playerLevel[playerThieving] >= 50) {
						startAnimation(2246, 0);
						if (Misc.random(4) >= 3) {
							walkToPoint(2810, 9331, -1);
						} else {
							sendMessage("You fail to pick the lock!");
							hitDiff = 4;
							updateHp(4, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					} else {
						sendMessage("You need atleast 50 Thieving to picklock this door!");
					}
					break;
				case 312:
				case 313:
					sendMessage("You reach into the potatoes...");
					startAnimation(2282, 0);
					sendMessage("And pickup a potato!");
					addItem(1942, 1);
					break;
				case 1161:
					// if (playerLevel[19] >= 25) {
					sendMessage("You reach into the cabbage...");
					startAnimation(2282, 0);
					sendMessage("And rip a cabbage out of the ground!");
					sendMessage("You've got muscles.");
					addItem(1965, 1);
					// } else
					// sendMessage("You need a farming level of 25 to pick these.");
					break;
				case 4705:
				case 4706:
					if (thiefDelay > 0) {
						break;
					}
					for (int n = 0; n < Server.s.npcHandler.maxNPCs; n++) {
						if (Server.s.npcHandler.npcs[n] != null) {
							if (Server.s.npcHandler.npcs[n].NpcType == 560) {
								if (WithinDistance(absX, absY,
										Server.s.npcHandler.npcs[n].absX,
										Server.s.npcHandler.npcs[n].absY, 3)) {
									Server.s.npcHandler.npcs[n].textUpdate = "What do you think you are doing?";
									Server.s.npcHandler.npcs[n].updateRequired = true;
									Server.s.npcHandler.npcs[n].textUpdateRequired = true;
									startAnimation(
											GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
											0);
									playGraphic(80, 0, 100);
									hitDiff = Misc.random(4);
									updateHp(hitDiff, false);
									updateRequired = true;
									hitUpdateRequired = true;
									EntangleDelay = 6;
									thiefDelay = 6;
									break;
								} else {
									if (invSpace()) {
										addItem(379, 1);
										sendMessage("You manage to steal a lobster.");
										startAnimation(881, 0);
										thiefDelay = 4;
										addSkillXP(70, 17);
									} else {
										sendMessage("Not enough space in your inventory.");
									}
									break;
								}
							}
						}
					}
					break;
				case 4278:
					if (playerLevel[playerThieving] < 55) {
						// sendMessage("You need 55 thieving to steal from this stall!");
						showDialogue("You need 55 thieving to steal from this stall!");
						break;
					}
					if (thiefDelay > 0) {
						break;
					}
					for (int n = 0; n < Server.s.npcHandler.maxNPCs; n++) {
						if (Server.s.npcHandler.npcs[n] != null) {
							if (Server.s.npcHandler.npcs[n].NpcType == 1298) {
								if (WithinDistance(absX, absY,
										Server.s.npcHandler.npcs[n].absX,
										Server.s.npcHandler.npcs[n].absY, 3)) {
									Server.s.npcHandler.npcs[n].textUpdate = "Stop right there!";
									Server.s.npcHandler.npcs[n].updateRequired = true;
									Server.s.npcHandler.npcs[n].textUpdateRequired = true;
									hitDiff = Misc.random(15);
									updateHp(hitDiff, false);
									updateRequired = true;
									hitUpdateRequired = true;
									startAnimation(
											GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
											0);
									playGraphic(80, 0, 100);
									EntangleDelay = 6;
									thiefDelay = 6;
									break;
								} else {
									if (invSpace()) {
										addItem(995, 1000);
										sendMessage("You manage to steal some coins.");
										startAnimation(881, 0);
										thiefDelay = 4;
										addSkillXP(750, 17);
									} else {
										sendMessage("Not enough space in your inventory.");
									}
									break;
								}
							}
						}
					}
					break;
				case 4277:
					if (playerLevel[playerThieving] < 75) {
						// sendMessage("You need 75 thieving to steal from this stall!");
						showDialogue("You need 75 thieving to steal from this stall!");
						break;
					}
					if (thiefDelay > 0) {
						break;
					}
					for (int n = 0; n < Server.s.npcHandler.maxNPCs; n++) {
						if (Server.s.npcHandler.npcs[n] != null) {
							if (Server.s.npcHandler.npcs[n].NpcType == 1298) {
								if (WithinDistance(absX, absY,
										Server.s.npcHandler.npcs[n].absX,
										Server.s.npcHandler.npcs[n].absY, 3)) {
									Server.s.npcHandler.npcs[n].textUpdate = "Stop right there!";
									Server.s.npcHandler.npcs[n].updateRequired = true;
									Server.s.npcHandler.npcs[n].textUpdateRequired = true;
									hitDiff = Misc.random(15);
									updateHp(hitDiff, false);
									updateRequired = true;
									hitUpdateRequired = true;
									startAnimation(
											GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
											0);
									playGraphic(80, 0, 100);
									EntangleDelay = 6;
									thiefDelay = 6;
									break;
								} else {
									if (invSpace()) {
										addItem(995, 1000);
										sendMessage("You manage to steal some coins.");
										startAnimation(881, 0);
										thiefDelay = 4;
										addSkillXP(1150, 17);
									} else {
										sendMessage("Not enough space in your inventory.");
									}
									break;
								}
							}
						}
					}
					break;
				case 2816:
					if (InvItemAmt(1436) > 0) {
						sendMessage("You cast a quick ritual, crafting many runes!");
						startAnimation(1168, 0);
						playGraphic(187, 0, 100);
						int ess = InvItemAmt(1436);
						int xpTpAdd = (5 * runeCXpInc) * ess;
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(556, ess * 2);
						if (playerLevel[playerRunecrafting] >= 2) {
							addItem(558, ess * 2);
							xpTpAdd += (6 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 5) {
							addItem(555, ess * 2);
							xpTpAdd += (7 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 9) {
							addItem(557, ess * 2);
							xpTpAdd += (8 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 14) {
							addItem(554, ess * 2);
							xpTpAdd += (9 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 20) {
							addItem(559, ess * 2);
							xpTpAdd += (10 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 35) {
							addItem(562, ess * 2);
							xpTpAdd += (11 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 44) {
							addItem(561, ess * 2);
							xpTpAdd += (12 * runeCXpInc) * ess;
						}
						if (playerLevel[playerRunecrafting] >= 65) {
							addItem(560, ess * 2);
							xpTpAdd += (13 * runeCXpInc) * ess;
						}
						addSkillXP(xpTpAdd, playerRunecrafting);
						sendMessage("You get hit for how many essence you used!");
						hitDiff = ess;
						updateHp(hitDiff, false);
						updateRequired = true;
						hitUpdateRequired = true;
					} else {
						sendMessage("You need essence!");
					}
					break;
				case 2491:
					sendMessage("I wonder what I'll get from this?");
					break;
				case 3044:
				case 4304:
				case 11666:
				case 2781:
				case 12100:
					displayItem246(2405, 150, 2349);
					displayItem246(2406, 150, 2351);
					displayItem246(2407, 150, 2355);
					displayItem246(2409, 150, 2353);
					displayItem246(2410, 150, 2357);
					displayItem246(2411, 150, 2359);
					displayItem246(2412, 150, 2361);
					displayItem246(2413, 150, 2363);
					sendFrame164(2400);
					break;
				case 14367:
				case 11758:
				case 5276:
				case 2213:
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
					break;
				default:
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object2 Id: " + objectId);
					}
					break;
				}
			}
		}
	}

	public void openBank() {
		if (!hasPin() || pinCorrect()) {
			sendFrame248(5292, 5063);
			CurrentFrame = 5292;
			resetItems(5064);
		} else {
			showInterface(7424);
		}
	}

	public void startMageArena() {
		changeStat(playerStrength, playerLevel[playerStrength], 0, false);
		changeStat(playerAttack, playerLevel[playerAttack], 0, false);
		changeStat(playerRanged, playerLevel[playerRanged], 0, false);
		if (mageArenaQuest == 0 || mageArenaQuest == 1) {
			mageArenaQuest = 1;
			Server.s.npcHandler.newNPC(907, 3108, 3939, 0, 0, 0, 0, 0, false,
					playerId);
		} else if (mageArenaQuest == 2) {
			Server.s.npcHandler.newNPC(908, 3108, 3939, 0, 0, 0, 0, 0, false,
					playerId);
		} else if (mageArenaQuest == 3) {
			Server.s.npcHandler.newNPC(909, 3108, 3939, 0, 0, 0, 0, 0, false,
					playerId);
		} else if (mageArenaQuest == 4) {
			Server.s.npcHandler.newNPC(910, 3108, 3939, 0, 0, 0, 0, 0, false,
					playerId);
		} else if (mageArenaQuest == 5) {
			Server.s.npcHandler.newNPC(911, 3108, 3939, 0, 0, 0, 0, 0, false,
					playerId);
		} else if (mageArenaQuest == 6) {
			changeCoords(2538, 4716, 0);
			changeText126("You have completed the Mage Arena Miniquest!", 301);
			showInterface(297);
			updateHp(getLevelForXP(playerXP[3]), true);
			resetAllPrayers();
			specialAmount = 100;
			if (needsSpecBar(playerEquipment[playerWeapon])) {
				specialAttackBar();
			}
			skullTimer = -1;
			SetPkHeadIcon(0);
			EntangleDelay = 0;
			poisonDelay = -1;
			poisonDamage = 0;
			for (int i = 0; i < 21; i++) {
				playerLevel[i] = getLevelForXP(playerXP[i]);
			}
			for (int i = 0; i < 21; i++) {
				setSkillLevel(i);
			}
		}
		loadQuestTab();
	}

	public int pickEmoteId() {
		if (pickInUse() == 0) {
			return 625;
		} else if (pickInUse() == 1) {
			return 626;
		} else if (pickInUse() == 2) {
			return 627;
		} else if (pickInUse() == 3) {
			return 629;
		} else if (pickInUse() == 4) {
			return 628;
		} else if (pickInUse() == 5) {
			return 629;
		} else {
			return 625;
		}
	}

	public int pickInUse() {
		if (playerEquipment[playerWeapon] == 1265) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1267) {
			return 1;
		} else if (playerEquipment[playerWeapon] == 1269) {
			return 2;
		} else if (playerEquipment[playerWeapon] == 1271) {
			return 3;
		} else if (playerEquipment[playerWeapon] == 1273) {
			return 4;
		} else if (playerEquipment[playerWeapon] == 1275) {
			return 5;
		} else if (InvItemAmt(1265) > 0) {
			return 0;
		} else if (InvItemAmt(1267) > 0) {
			return 1;
		} else if (InvItemAmt(1269) > 0) {
			return 2;
		} else if (InvItemAmt(1271) > 0) {
			return 3;
		} else if (InvItemAmt(1273) > 0) {
			return 4;
		} else if (InvItemAmt(1275) > 0) {
			return 5;
		} else {
			return -1;
		}
	}

	public boolean projectileDmgExists() {
		for (int i = 0; i < delayedDmgTime.length; i++) {
			if (delayedDmgTime[i] > 0) {
				return true;
			}
		}
		return false;
	}

	public int ObjectClickDelay = 0;
	public int essDelay = 0;

	public void changeDoor(int objectId, int objectX, int objectY, int faceId,
			int originalX, int originalY) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			Client p = (Client) Server.s.playerHandler.players[i];
			if (p != null) {
				if (WithinDistance(objectX, objectY, p.absX, p.absY, 60)) {
					p.replaceObject(originalX, originalY, -1, -1);
					p.replaceObject2(objectX, objectY, objectId, faceId, 0);
				}
			}
		}
	}

	public void changeDoor(int objectId, int objectX, int objectY, int faceId) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			Client p = (Client) Server.s.playerHandler.players[i];
			if (p != null) {
				if (WithinDistance(objectX, objectY, p.absX, p.absY, 60)) {
					p.replaceObject(objectX, objectY, -1, -1);
					p.replaceObject2(objectX, objectY, objectId, faceId, 0);
				}
			}
		}
	}

	public void replaceObject(int objectX, int objectY, int NewObjectID,
			int Face) {
		outStream.createFrame(85);
		outStream.writeByteC(objectY - (mapRegionY * 8));
		outStream.writeByteC(objectX - (mapRegionX * 8));
		outStream.createFrame(101);
		outStream.writeByteC(0);
		outStream.writeByte(0);
		if (NewObjectID != -1) {
			outStream.createFrame(151);
			outStream.writeByteS(0);
			outStream.writeWordBigEndian(NewObjectID);
			outStream.writeByteA(Face);
		}
	}

	public void replaceObject2(int objectX, int objectY, int NewObjectID,
			int Face, int ObjectType) {
		outStream.createFrame(85);
		outStream.writeByteC(objectY - (mapRegionY * 8));
		outStream.writeByteC(objectX - (mapRegionX * 8));
		outStream.createFrame(101);
		outStream.writeByteC((ObjectType << 2) + (Face & 3));
		outStream.writeByte(0);
		if (NewObjectID != -1) {
			outStream.createFrame(151);
			outStream.writeByteS(0);
			outStream.writeWordBigEndian(NewObjectID);
			outStream.writeByteS((ObjectType << 2) + (Face & 3));
			// FACE: 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
			// ObjectType: 0-3 wall objects, 4-8 wall decoration, 9: diag.
			// walls, 10-11 world objects, 12-21: roofs, 22: floor decoration
		}
	}

	public int logDelay = 0;
	public boolean isWC = false;

	public boolean canUseAxe() {
		if ((InvItemAmt(1351) > 0 || playerEquipment[playerWeapon] == 1351)
				&& getLevelForXP(playerXP[8]) >= 1) {
			return true;
		} else if ((InvItemAmt(1349) > 0 || playerEquipment[playerWeapon] == 1349)
				&& getLevelForXP(playerXP[8]) >= 1) {
			return true;
		} else if ((InvItemAmt(1353) > 0 || playerEquipment[playerWeapon] == 1353)
				&& getLevelForXP(playerXP[8]) >= 6) {
			return true;
		} else if ((InvItemAmt(1361) > 0 || playerEquipment[playerWeapon] == 1361)
				&& getLevelForXP(playerXP[8]) >= 11) {
			return true;
		} else if ((InvItemAmt(1355) > 0 || playerEquipment[playerWeapon] == 1355)
				&& getLevelForXP(playerXP[8]) >= 21) {
			return true;
		} else if ((InvItemAmt(1357) > 0 || playerEquipment[playerWeapon] == 1357)
				&& getLevelForXP(playerXP[8]) >= 31) {
			return true;
		} else if ((InvItemAmt(1359) > 0 || playerEquipment[playerWeapon] == 1359)
				&& getLevelForXP(playerXP[8]) >= 41) {
			return true;
		} else if ((InvItemAmt(6739) > 0 || playerEquipment[playerWeapon] == 6739)
				&& getLevelForXP(playerXP[8]) >= 61) {
			return true;
		} else {
			return false;
		}
	}

	public String HasAxe() {
		if (InvItemAmt(1351) > 0 || playerEquipment[playerWeapon] == 1351) {
			return "Bronze";
		} else if (InvItemAmt(1349) > 0
				|| playerEquipment[playerWeapon] == 1349) {
			return "Iron";
		} else if (InvItemAmt(1353) > 0
				|| playerEquipment[playerWeapon] == 1353) {
			return "Steel";
		} else if (InvItemAmt(1361) > 0
				|| playerEquipment[playerWeapon] == 1361) {
			return "Black";
		} else if (InvItemAmt(1355) > 0
				|| playerEquipment[playerWeapon] == 1355) {
			return "Mithril";
		} else if (InvItemAmt(1357) > 0
				|| playerEquipment[playerWeapon] == 1357) {
			return "Adamant";
		} else if (InvItemAmt(1359) > 0
				|| playerEquipment[playerWeapon] == 1359) {
			return "Rune";
		} else if (InvItemAmt(6739) > 0
				|| playerEquipment[playerWeapon] == 6739) {
			return "Dragon";
		} else {
			return "None";
		}
	}

	public int getWCDelay() {
		int delay = 0;
		String axe = HasAxe();
		// Oak = 6 + r(6); Willow = 8 + r(8); maple = 10 + r(10); yew = 12 +
		// r(12); magic = 14 + r(14);
		switch (objectId) {
		case 1315:
		case 1316:
		case 1278:
		case 1276:
			delay = 4 + Misc.random(2);
			break;
		case 1281:
			delay = 6 + Misc.random(3);
			break;
		case 1308:
		case 5551:
		case 5552:
		case 5553:
			delay = 8 + Misc.random(4);
			break;
		case 1307:
			delay = 10 + Misc.random(5);
			break;
		case 1309:
			delay = 12 + Misc.random(6);
			break;
		case 1306:
			delay = 14 + Misc.random(7);
			break;
		default:
			delay = 0;
			break;
		}
		if (axe.equals("Dragon")) {
			return delay - Misc.random(6);
		} else if (axe.equals("Rune")) {
			return delay - Misc.random(5);
		} else if (axe.equals("Adamant")) {
			return delay - Misc.random(4);
		} else if (axe.equals("Mithril")) {
			return delay - Misc.random(3);
		} else if (axe.equals("Black")) {
			return delay - Misc.random(2);
		} else if (axe.equals("Steel")) {
			return delay - Misc.random(1);
		} else {
			return delay;
		}
	}

	public void resetWC() {
		isWC = false;
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
	}

	public void getLog() {
		if (!isWC) {
			return;
		}
		if (logDelay < 0) {
			logDelay = getWCDelay();
			return;
		}
		if (!canUseAxe()) {
			sendMessage("You don't have a high enough woodcutting level to use this axe.");
			resetWC();
			return;
		}
		if (logDelay != 0) {
			return;
		}
		Server.s.worldO.checkIfExists(objectId, objectX, objectY, 10, 0);
		if (!Server.s.worldO.checkIfAlive(objectId, objectX, objectY)) {
			resetWC();
			return;
		}
		String AxeType = HasAxe();
		if (AxeType != "None") {
			if (!invSpace()) {
				sendMessage("Not enough inventory space!");
				resetWC();
				return;
			}
			if (Misc.random(10) <= 2) {
				Server.s.itemHandler.NpcDropItem(6693, 1, absX, absY, playerId);
			}
			switch (objectId) {
			case 1315:
			case 1316:
			case 1278:
			case 1276:
				if (getLevelForXP(playerXP[8]) >= 1) {
					addSkillXP(25 * woodcutXpInc, playerWoodcutting);
					addItem(1511, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 1 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			case 1307:
				if (getLevelForXP(playerXP[8]) >= 45) {
					addSkillXP(100 * woodcutXpInc, playerWoodcutting);
					addItem(1517, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 45 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			case 1281:
				if (getLevelForXP(playerXP[8]) >= 15) {
					addSkillXP(37 * woodcutXpInc, playerWoodcutting);
					addItem(1521, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 15 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			case 1308:
			case 5551:
			case 5552:
			case 5553:
				if (getLevelForXP(playerXP[8]) >= 30) {
					addSkillXP(67 * woodcutXpInc, playerWoodcutting);
					addItem(1519, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 30 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			case 1309:
				if (getLevelForXP(playerXP[8]) >= 60) {
					addSkillXP(175 * woodcutXpInc, playerWoodcutting);
					addItem(1515, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 60 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			case 1306:
				if (isMember == 0) {
					sendMessage("This feature is premium only.");
					break;
				}
				if (getLevelForXP(playerXP[8]) >= 75) {
					addSkillXP(250 * woodcutXpInc, playerWoodcutting);
					addItem(1513, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetWC();
					}
				} else {
					sendMessage("You need atleast 75 Woocutting to chop this tree.");
					resetWC();
				}
				break;
			}
		} else {
			sendMessage("Get an axe if you want to cut down a tree.");
			resetWC();
			return;
		}
	}

	public int rockDelay = 0;
	public boolean isMining = false;

	public boolean canUsePic() {
		if ((InvItemAmt(1265) > 0 || playerEquipment[playerWeapon] == 1265)
				&& getLevelForXP(playerXP[8]) >= 1) {
			return true;
		} else if ((InvItemAmt(1267) > 0 || playerEquipment[playerWeapon] == 1267)
				&& getLevelForXP(playerXP[8]) >= 1) {
			return true;
		} else if ((InvItemAmt(1269) > 0 || playerEquipment[playerWeapon] == 1269)
				&& getLevelForXP(playerXP[8]) >= 6) {
			return true;
		} else if ((InvItemAmt(1273) > 0 || playerEquipment[playerWeapon] == 1273)
				&& getLevelForXP(playerXP[8]) >= 21) {
			return true;
		} else if ((InvItemAmt(1271) > 0 || playerEquipment[playerWeapon] == 1271)
				&& getLevelForXP(playerXP[8]) >= 31) {
			return true;
		} else if ((InvItemAmt(1275) > 0 || playerEquipment[playerWeapon] == 1275)
				&& getLevelForXP(playerXP[8]) >= 41) {
			return true;
		} else {
			return false;
		}
	}

	public String HasPic() {
		if (InvItemAmt(1265) > 0 || playerEquipment[playerWeapon] == 1265) {
			return "Bronze";
		} else if (InvItemAmt(1267) > 0
				|| playerEquipment[playerWeapon] == 1267) {
			return "Iron";
		} else if (InvItemAmt(1269) > 0
				|| playerEquipment[playerWeapon] == 1269) {
			return "Steel";
		} else if (InvItemAmt(1273) > 0
				|| playerEquipment[playerWeapon] == 1273) {
			return "Mithril";
		} else if (InvItemAmt(1271) > 0
				|| playerEquipment[playerWeapon] == 1271) {
			return "Adamant";
		} else if (InvItemAmt(1275) > 0
				|| playerEquipment[playerWeapon] == 1275) {
			return "Rune";
		} else {
			return "None";
		}
	}

	public int getRockDelay() {
		int delay = 0;
		String pic = HasPic();
		switch (objectId) {
		case 2090:
		case 2091:
		case 2094:
		case 2095:
		case 9708:
		case 9714:
			delay = 2 + Misc.random(1);
			break;
		case 2093:
		case 2092:
		case 9717:
			delay = 4 + Misc.random(2);
			break;
		case 2096:
		case 2097:
		case 14850:
		case 452:
		case 450:
			delay = 6 + Misc.random(3);
			break;
		case 9720:
		case 2098:
		case 2099:
		case 3403:
			delay = 6 + Misc.random(4);
			break;
		case 2103:
		case 2102:
		case 14853:
			delay = 8 + Misc.random(5);
			break;
		case 2104:
		case 2105:
		case 14862:
			delay = 12 + Misc.random(6);
			break;
		case 14859:
		case 14860:
		case 2106:
		case 2107:
			delay = 14 + Misc.random(7);
			break;
		default:
			delay = 0;
			break;
		}
		if (pic.equals("Rune")) {
			return delay - Misc.random(5);
		} else if (pic.equals("Adamant")) {
			return delay - Misc.random(4);
		} else if (pic.equals("Mithril")) {
			return delay - Misc.random(3);
		} else if (pic.equals("Black")) {
			return delay - Misc.random(2);
		} else if (pic.equals("Steel")) {
			return delay - Misc.random(1);
		} else {
			return delay;
		}
	}

	public void resetMining() {
		isMining = false;
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
	}

	public void getRock() {
		if (!isMining) {
			return;
		}
		if (rockDelay < 0) {
			rockDelay = getRockDelay();
			return;
		}
		if (!canUsePic()) {
			sendMessage("You don't have a high enough mining level to use this pickaxe.");
			resetMining();
			return;
		}
		if (rockDelay != 0) {
			return;
		}
		String picType = HasPic();
		Server.s.worldO.checkIfExists(objectId, objectX, objectY, 10, 0);
		if (!Server.s.worldO.checkIfAlive(objectId, objectX, objectY)) {
			resetMining();
			return;
		}
		if (picType != "None") {
			if (!invSpace()) {
				sendMessage("Not enough inventory space!");
				resetMining();
			}
			switch (objectId) {
			case 2094:
			case 2095:
			case 9714:
				if (getLevelForXP(playerXP[14]) >= 1) {
					addSkillXP(17 * mineXpInc, 14);
					addItem(438, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 1 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 2090:
			case 2091:
			case 9708:
				if (getLevelForXP(playerXP[14]) >= 1) {
					addSkillXP(17 * mineXpInc, 14);
					addItem(436, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 1 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 2093:
			case 2092:
			case 9717:
				if (getLevelForXP(playerXP[14]) >= 15) {
					addSkillXP(35 * mineXpInc, 14);
					addItem(440, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 15 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 2096:
			case 2097:
			case 14850:
			case 452:
			case 450:
				if (getLevelForXP(playerXP[14]) >= 30) {
					addSkillXP(50 * mineXpInc, 14);
					addItem(453, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 30 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 9720:
			case 2098:
			case 2099:
				if (getLevelForXP(playerXP[14]) >= 40) {
					addSkillXP(65 * mineXpInc, 14);
					addItem(444, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 40 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 2103:
			case 2102:
			case 14853:
				if (getLevelForXP(playerXP[14]) >= 55) {
					addSkillXP(80 * mineXpInc, 14);
					addItem(447, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 55 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 3403:
				if (getLevelForXP(playerXP[14]) >= 61) {
					addSkillXP(90 * mineXpInc, 14);
					addItem(2892, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 61 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 14862:
			case 2104:
			case 2105:
				if (getLevelForXP(playerXP[14]) >= 70) {
					addSkillXP(95 * mineXpInc, 14);
					addItem(449, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 70 Mining to mine this ore.");
					resetMining();
				}
				break;
			case 14859:
			case 14860:
			case 2106:
			case 2107:
				if (getLevelForXP(playerXP[14]) >= 85) {
					addSkillXP(125 * mineXpInc, 14);
					addItem(451, 1);
					Server.s.worldO.lowerHealth(1, objectId, objectX, objectY);
					if (!Server.s.worldO.checkIfAlive(objectId, objectX,
							objectY)) {
						resetMining();
					}
				} else {
					sendMessage("You need atleast 85 Mining to mine this ore.");
					resetMining();
				}
				break;
			}
		} else {
			sendMessage("Get a pic if you want to mine ore.");
			resetMining();
			return;
		}
	}

	public boolean canOpenDaDoor(int spot) {
		if (spot == 0) {
			if (absX == 2490 && absY == 10164 && checkForPlayer(2490, 10162)) {
				return true;
			} else if (absX == 2490 && absY == 10162
					&& checkForPlayer(2490, 10164)) {
				return true;
			}
		} else if (spot == 1) {
			if (absX == 2490 && absY == 10148 && checkForPlayer(2490, 10146)) {
				return true;
			} else if (absX == 2490 && absY == 10146
					&& checkForPlayer(2490, 10148)) {
				return true;
			}
		} else if (spot == 2) {
			if (absX == 2490 && absY == 10132 && checkForPlayer(2490, 10130)) {
				return true;
			} else if (absX == 2490 && absY == 10130
					&& checkForPlayer(2490, 10132)) {
				return true;
			}
		}
		return false;
	}

	public boolean checkForPlayer(int x, int y) {
		for (int i = 0; i < Server.s.playerHandler.maxPlayers; i++) {
			Player p = Server.s.playerHandler.players[i];
			if (p != null) {
				if (p.absX == x && p.absY == y) {
					return true;
				}
			}
		}
		return false;
	}

	public boolean npcExists(int id) {
		for (int i = 0; i < Server.s.npcHandler.maxNPCs; i++) {
			if (Server.s.npcHandler.npcs[i] != null) {
				if (Server.s.npcHandler.npcs[i].SpawnedFor == playerId) {
					return true;
				}
			}
		}
		return false;
	}

	public void appendHit(int amt) {
		if (hitUpdateRequired) {
			hitDiff2 = amt;
			updateHp(hitDiff2, false);
			hitUpdateRequired2 = true;
			updateRequired = true;
		} else {
			hitDiff = amt;
			updateHp(hitDiff, false);
			hitUpdateRequired = true;
			updateRequired = true;
		}
	}

	public void ObjectClick() {
		if (!clickedObject1) {
			objectX = inStream.readSignedWordBigEndianA();
			objectId = inStream.readUnsignedWord();
			objectY = inStream.readUnsignedWordA();
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: objectId = " + objectId
						+ ", x = " + objectX + ", y = " + objectY);
			}
		}
		int wepId = playerEquipment[playerWeapon];
		RemoveAllWindows();
		clickedObject1 = true;
		int Lvl = playerLevel[playerWoodcutting];
		String AxeType = HasAxe();
		int distance = 2;
		switch (objectId) {
		case 5858: // Leave zombie mini
		case 5859:
			ZombieMinigame.players.remove(playerName);
			teleport(2834, 3336);
			showDialogue("You leave the zombie game!");
			teleBlockDelay = 0;
			break;
		}
		if (objectId == 2491 || objectId == 9356 || objectId == 6702
				|| objectId == 6703 || objectId == 6704 || objectId == 6705
				|| objectId == 6706 || objectId == 6707) {
			distance = 4;
		}
		if (objectId == 2919 || objectId == 2920 || objectId == 2921) {
			distance = 3;
		}
		if (objectId == 4304) {
			distance = 3;
		}
		if (objectId == 1722) {
			distance = 3;
		}
		if (objectId == 1309) {
			distance = 2;
		}
		if (objectId == 1738) {
			distance = 3;
		}
		if (objectId == 1739) {
			distance = 3;
		}
		if (objectId == 5099) {
			distance = 3;
		}
		if (objectId == 2879) {
			distance = 3;
		}
		if (objectId == 3340) {
			distance = 6;
		}
		if (objectId == 3214 || objectId == 2274) {
			distance = 5;
		}
		if (objectId == 10229 || objectId == 3832 || objectId == 5959
				|| objectId == 5960 || objectId == 1815 || objectId == 1814
				|| objectId == 9706 || objectId == 9707 || objectId == 3309
				|| objectId == 3276 || objectId == 12230) {
			distance = 1;
		}
		objectFace(objectX, objectY);
		if (WithinDistance(objectX, objectY, absX, absY, distance)) {
			if (ObjectClickDelay <= 0) {
				clickedObject1 = false;
				ObjectClickDelay = 4;
				switch (objectId) {
				case 12230: // up the rope mole
					sendMessage("You climb up the rope that leads back to home!");
					if (Misc.random(1) == 1) {
						teleport(2827 + randomz.nextInt(2),
								3344 + randomz.nextInt(2));
					} else {
						teleport(2860 + randomz.nextInt(2),
								3373 + randomz.nextInt(2));
					}
					break;
				case 2295:
					addSkillXP(16 * agilityXpInc, playerAgility);
					sendMessage("You balance across the log!");
					WalkTimer(0, -7);
					break;
				case 2285:
					addSkillXP(16 * agilityXpInc, playerAgility);
					sendMessage("You climb your way up to the nets.");
					startAnimation(828, 0);
					heightLevel = 1;
					teleportToX = 2473;
					teleportToY = 3424;
					break;
				case 2313:
					addSkillXP(16 * agilityXpInc, playerAgility);
					sendMessage("You climb up the branch.");
					startAnimation(828, 0);
					heightLevel = 2;
					teleportToX = 2473;
					teleportToY = 3420;
					break;
				case 2312:
					addSkillXP(16 * agilityXpInc, playerAgility);
					sendMessage("You balance across the rope!");
					WalkTimer(6, 0);
					break;
				case 2314:
					addSkillXP(16 * agilityXpInc, playerAgility);
					sendMessage("You climb down the branch.");
					startAnimation(828, 0);
					heightLevel = 0;
					teleportToX = 2487;
					teleportToY = 3421;
					break;
				case 154:
					if (absX == 2484 && absY == 3430) {
						addSkillXP(16 * agilityXpInc, playerAgility);
						sendMessage("You go through the tunnel.");
						heightLevel = 0;
						teleportToX = absX;
						teleportToY = absY + 7;
					}
					if (absX == 2487 && absY == 3430) {
						addSkillXP(16 * agilityXpInc, playerAgility);
						sendMessage("You go through the tunnel.");
						heightLevel = 0;
						teleportToX = absX;
						teleportToY = absY + 7;
					}
					break;
				case 2286:
					addSkillXP(16 * agilityXpInc, playerAgility);
					startAnimation(3063, 0);
					teleportToX = 2486;
					teleportToY = 3427;
					break;
				case 2478:
					if (playerLevel[20] >= 1) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.125);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((5 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(556, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 1 Runecrafting to make this.");
					}
					break;
				case 2479:
					if (playerLevel[20] >= 2) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.095);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((6 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(558, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 2 Runecrafting to make this.");
					}
					break;
				case 2480:
					if (playerLevel[20] >= 5) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.07);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((7 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(555, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 5 Runecrafting to make this.");
					}
					break;
				case 2481:
					if (playerLevel[20] >= 9) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.052);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((8 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(557, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 9 Runecrafting to make this.");
					}
					break;
				case 2482:
					if (playerLevel[20] >= 14) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.04);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((9 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(554, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 14 Runecrafting to make this.");
					}
					break;
				case 2483:
					if (playerLevel[20] >= 20) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = (int) (playerLevel[20] * 0.035);
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((10 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(559, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 20 Runecrafting to make this.");
					}
					break;
				case 2487:
					if (playerLevel[20] >= 35) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = 2;
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((11 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(562, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 35 Runecrafting to make this.");
					}
					break;
				case 2486:
					if (playerLevel[20] >= 44) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = 2;
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((12 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(561, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 44 Runecrafting to make this.");
					}
					break;
				case 2485:
					if (playerLevel[20] >= 54) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							break;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = 2;
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((13 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(563, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 54 Runecrafting to make this.");
					}
					break;
				case 2488:
					if (playerLevel[20] >= 65) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							return;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = 2;
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((14 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(560, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 65 Runecrafting to make this.");
					}
					break;
				case 2490:
					if (playerLevel[20] >= 90) {
						int ess = InvItemAmt(1436);
						if (ess <= 0) {
							sendMessage("You need essence to do this.");
							return;
						}
						startAnimation(791, 0);
						playGraphic(186, 0, 100);
						int runesToCraft = 2;
						if (runesToCraft <= 1) {
							runesToCraft = 2;
						}
						addSkillXP((15 * runeCXpInc) * runesToCraft * ess, 20);
						deleteItem(1436, GetItemSlot(1436), ess);
						addItem(565, runesToCraft * ess);
					} else {
						sendMessage("You need atleast 90 Runecrafting to make this.");
					}
					break;
				case 3268:
					if (playerLevel[playerThieving] < 50) {
						sendMessage("You need atleast 50 thieving to open this door.");
						break;
					}
					if (objectX == 2380 && objectY == 9619) {
						if (Misc.random(2) == 1) {
							walkToPoint(2381, 9619, -1);
						} else {
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2404 && objectY == 9620) {
						if (Misc.random(2) == 1) {
							walkToPoint(2405, 9620, -1);
						} else {
							appendHit(Misc.random(4));
						}
					}
					break;
				case 3276:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2380 && objectY == 9634) {
						if (Misc.random(2) == 1) {
							walkToPoint(2381, 9634, -1);
						} else {
							startTele(2380, 9632, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2387 && objectY == 9631) {
						if (Misc.random(2) == 1) {
							walkToPoint(2388, 9631, -1);
						} else {
							startTele(2388, 9628, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2392 && objectY == 9627) {
						if (Misc.random(2) == 1) {
							walkToPoint(2394, 9627, -1);
						} else {
							startTele(2392, 9625, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2399 && objectY == 9632) {
						if (Misc.random(2) == 1) {
							walkToPoint(2400, 9632, -1);
						} else {
							startTele(2399, 9634, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2406 && objectY == 9632) {
						if (Misc.random(2) == 1) {
							walkToPoint(2405, 9632, -1);
						} else {
							startTele(2406, 9635, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					} else if (objectX == 2406 && objectY == 9637) {
						if (Misc.random(2) == 1) {
							walkToPoint(2407, 9637, -1);
						} else {
							startTele(2406, 9635, 0, 3094, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					}
					break;
				case 3238:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2374 && objectY == 9644) {
						if (absX != 2375 || absY != 9644) {
							break;
						}
						if (Misc.random(2) == 1) {
							startTele(2374, 9638, 0, 3094, -1, -1, 5, 8677);
						} else {
							startTele(2373, 9644, 0, -1, -1, -1, 5, 8677);
							appendHit(Misc.random(4));
						}
					}
					break;
				case 3217:
					if (objectX == 2392 && objectY == 9647) {
						changeCoords(2393, 9651, 0);
					}
					break;
				case 354:
				case 3360:
				case 366:
					addItem(333, 1);
					break;
				case 3307:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2423 && objectY == 9661) {
						startTele(2423, 9673, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 3264:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2416 && objectY == 9674) {
						startTele(2423, 9660, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 3337:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2466 && objectY == 9672) {
						startTele(2464, 9673, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 2274:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2461 && objectY == 9692) {
						startTele(2460, 9693, 0, 828, -1, -1, 5, 8677);
					}
					break;
				case 3241:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2436 && objectY == 9716) {
						startTele(2446, 9716, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 3340:
					if (objectX == 2443 && objectY == 9718) {
						boolean success = false;
						if (wepId >= 800 && wepId <= 876 || wepId >= 4212
								&& wepId <= 4223 || wepId == 4734
								|| wepId == 6724 || wepId == 7958
								|| wepId == 7979 || wepId == 8057
								|| wepId == 6522 || wepId == 8099) {
							success = true;
						}
						if (!success) {
							sendMessage("You must range the rope!");
							break;
						}
						if (playerEquipment[playerArrows] != 2535) {
							sendMessage("You need to use lit fire arrows to cut the rope.");
							break;
						}
						if (absX == 2446 && absY == 9721) {
							startTele(2442, 9717, 0, -1, -1, -1, 5, 8677);
						} else {
							sendMessage("You fail to hit the rope.");
						}
						startAnimation(
								GetWeaponAtkEmote(getItemName(wepId), skillId),
								0);
						DeleteArrow();
					}
					break;
				case 3309:
					if (objectX == 2478 && objectY == 9721) {
						if (absX > objectX) {
							walkToPoint(absX - 2, absY, 2750);
						} else {
							walkToPoint(absX + 2, absY, 2750);
						}
					} else if (objectX == 2485 && objectY == 9721) {
						if (absY > objectY) {
							walkToPoint(absX, absY - 2, 2750);
						} else {
							walkToPoint(absX, absY + 2, 2750);
						}
					} else if (objectX == 2478 && objectY == 9724) {
						if (absX > objectX) {
							walkToPoint(absX - 2, absY, 2750);
						} else {
							walkToPoint(absX + 2, absY, 2750);
						}
					} else if (objectX == 2467 && objectY == 9723) {
						if (absX > objectX) {
							walkToPoint(absX - 2, absY, 2750);
						} else {
							walkToPoint(absX + 2, absY, 2750);
						}
					} else if (objectX == 2482 && objectY == 9679) {
						if (absX > objectX) {
							walkToPoint(absX - 2, absY, 2750);
						} else {
							walkToPoint(absX + 2, absY, 2750);
						}
					} else if (objectX == 2460 && objectY == 9720) {
						if (absY > objectY) {
							walkToPoint(absX, absY - 2, 2750);
						} else {
							walkToPoint(absX, absY + 2, 2750);
						}
					} else if (objectX == 2491 && objectY == 9691) {
						if (absY > objectY) {
							walkToPoint(absX, absY - 2, 2750);
						} else {
							walkToPoint(absX, absY + 2, 2750);
						}
					} else if (objectX == 2480 && objectY == 9713) {
						if (absY > objectY) {
							walkToPoint(absX, absY - 2, 2750);
						} else {
							walkToPoint(absX, absY + 2, 2750);
						}
					} else if (objectX == 2471 && objectY == 9706) {
						if (absX > objectX) {
							walkToPoint(absX - 2, absY, 2750);
						} else {
							walkToPoint(absX + 2, absY, 2750);
						}
					} else if (objectX == 2458 && objectY == 9712) {
						if (absY > objectY) {
							walkToPoint(absX, absY - 2, 2750);
						} else {
							walkToPoint(absX, absY + 2, 2750);
						}
					}
					break;
				case 6282:
					if (playerRights > 0) {
						forceChat("Yay I'm premium - let's soar!");
						teleportToX = 2851;
						teleportToY = 3331;
						travelMagicCarpet(2851, 3310);
					} else {
						showDialogue("You must be a premium member to use this device!");
					}
					break;
				case 4389: // Canownueasy leave Clan Wars
				case 4390:
					if (Server.s.ClanWars.teamBluePlayers.contains(this)) {
						Server.s.ClanWars.removePlayer(this, "Blue");
					} else {
						Server.s.ClanWars.removePlayer(this, "Red");
					}
					break;
				case 3213:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 3230 && objectY == 3193) {
						startTele(2495, 9716, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 3214:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2496 && objectY == 9713) {
						startTele(3230, 3192, 0, 828, -1, -1, 5, 18431);
					}
					break;
				case 4743:
					if (objectX == 2803 && objectY == 2734) {
						changeCoords(2803, 2726, 0);
					}
					break;
				case 4780:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					if (objectX == 2763 && objectY == 2703) {
						startTele(2764, 9103, 0, 828, -1, -1, 5, 8677);
					}
					break;
				case 4781:
					if (objectX == 2763 && objectY == 9103) {
						startTele(2764, 2703, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 4754:
				case 4749:
					addItem(1963, 1);
					break;
				case 4771:
					if (monkeyMadnessQuest == 5) {
						NpcDialogue = 267;
						NpcTalkTo = 1448;
						DialogueSend();
						CurrentFrame = 13901;
					} else if (monkeyMadnessQuest == 6
							&& InvItemAmt(1963) >= 20) {
						NpcDialogue = 274;
						NpcTalkTo = 1448;
						DialogueSend();
						CurrentFrame = 13901;
					} else if (monkeyMadnessQuest == 6 && InvItemAmt(1963) < 20) {
						sendMessage("He asked for 20 bananas!");
					} else {
						sendMessage("He is too royal to talk to you.");
					}
					break;
				case 4799:
					if (objectX == 2771 && objectY == 2795) {
						startAnimation(881, 1);
						if (Misc.random(6) >= 4) {
							walkToPoint(2771, 2796, -1);
						} else {
							sendMessage("You fail to pick the lock.");
							hitDiff = Misc.random(2);
							updateHp(hitDiff, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					}
					break;
				case 4788:
				case 4787:
					for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
						NPC npc = Server.s.npcHandler.npcs[i];
						if (npc != null) {
							if (npc.NpcType == 1457
									&& WithinDistance(absX, absY, npc.absX,
											npc.absY, 12)) {
								npc.playAnimation(1394);
								npc.showText("RAWRG!!!");
								int offsetX = (npc.absX - absX) * -1;
								int offsetY = (npc.absY - absY) * -1;
								createProjectile(npc.absY, npc.absX, offsetY,
										offsetX, 10, 43, 31, 70, -playerId - 1);
								npc.TurnNpcTo(absX, absY);
							}
						}
					}
					startTele(2772, 2794, 0, 2304, -1, -1, 5, 8677);
					break;
				case 2406:
					if (lostCityQuest >= 4) {
						if (playerEquipment[playerWeapon] == 772) {
							if (lostCityQuest != 5) {
								lostCityQuest = 5;
								changeText126(
										"You have completed the Lost City Quest!",
										301);
								showInterface(297);
								loadQuestTab();
							}
							changeCoords(2452, 4473, 0);
						} else {
							sendMessage("Nothing happens.");
						}
					}
					break;
				case 12094:
					if (objectX == 2452 && objectY == 4473) {
						changeCoords(3201, 3169, 0);
					}
				case 1292:
					if (lostCityQuest >= 3) {
						if (!npcExists(655)) {
							Server.s.npcHandler.newNPC(655, absX, absY + 5, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							sendMessage("You are already fighting a tree spirit!");
						}
					} else {
						sendMessage("Nothing happens.");
					}
					break;
				case 2639:
				case 2693:
				case 5276:
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
					break;
				case 1757:
					changeCoords(3190, 3356, 0);
					break;
				case 10558:
					changeCoords(2893, 9907, 0);
					break;
				case 1734:
					changeCoords(3061, 3376, 0);
					break;
				case 1733:
					changeCoords(3058, 9776, 0);
					break;
				case 2113:
					changeCoords(3021, 9739, 0);
					break;
				case 2112:
					deletethatobject(3046, 9756);
					break;
				case 3266:
					// case 1533:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 11616:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 12045:
				case 12047:
					changeDoor(objectId, objectX, objectY, 1);
					break;
				case 82:
					deletethatobject(2606, 3152);
					break;
				case 1533:
					if (objectX == 3194 && objectY == 3357) {
						changeDoor(objectId, objectX + 1, objectY, 1, objectX,
								objectY);
					} else if (objectX == 3195 && objectY == 3357) {
						changeDoor(objectId, objectX - 1, objectY, 2, objectX,
								objectY);
					} else {
						changeDoor(objectId, objectX, objectY, 0);
					}
					break;
				case 2644:
					sendMessage("Use something you want to spin on this object.");
					break;
				case 12987:
				case 12986:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 1765:
					changeCoords(3067, 10256, 0);
					break;
				case 1766:
					changeCoords(3017, 3850, 0);
					break;
				case 1817:
					if (teleBlockDelay <= 0) {
						startTele(3067, 10256, 0, 714, 715, 308, 4, 18431);
					} else {
						sendMessage("You are teleBlocked!");
					}
					break;
				case 3203:
					if (duelStatus <= 0) {
						changeCoords(3371, 3269, 0);
					}
					break;
				case 3195:
					addItem(2518, 1);
					break;
				case 2641:
					if (objectX == 3057 && objectY == 3483) {
						changeCoords(3058, 3483, 1);
					} else if (objectX == 3046 && objectY == 3483) {
						changeCoords(3045, 3483, 1);
					}
					break;
				case 1746:
					if (objectX == 3057 && objectY == 3483) {
						changeCoords(3058, 3483, 0);
					}
					if (objectX == 3046 && objectY == 3483) {
						changeCoords(3045, 3483, 0);
					}
					break;
				case 2873:
					if (mageArenaQuest == 6) {
						mageArenaQuest = 7;
						Server.s.itemHandler.NpcDropItem(2415, 1, absX, absY,
								playerId);
						Server.s.itemHandler.NpcDropItem(2412, 1, absX, absY,
								playerId);
						loadQuestTab();
					} else {
						sendMessage("You have already gotten your cape & staff!");
					}
					break;
				case 2875:
					if (mageArenaQuest == 6) {
						mageArenaQuest = 7;
						Server.s.itemHandler.NpcDropItem(2416, 1, absX, absY,
								playerId);
						Server.s.itemHandler.NpcDropItem(2413, 1, absX, absY,
								playerId);
						loadQuestTab();
					} else {
						sendMessage("You have already gotten your cape & staff!");
					}
					break;
				case 2874:
					if (mageArenaQuest == 6) {
						mageArenaQuest = 7;
						Server.s.itemHandler.NpcDropItem(2417, 1, absX, absY,
								playerId);
						Server.s.itemHandler.NpcDropItem(2414, 1, absX, absY,
								playerId);
						loadQuestTab();
					} else {
						sendMessage("You have already gotten your cape & staff!");
					}
					break;
				case 2878:
					if (mageArenaQuest >= 6) {
						changeCoords(2509, 4690, 0);
					} else {
						sendMessage("You can't go in there!");
					}
					break;
				case 2879:
					if (mageArenaQuest >= 6) {
						changeCoords(2538, 4716, 0);
					} else {
						sendMessage("You can't go in there!");
					}
					break;
				case 4629:
				case 4633:
					if (objectX == 2207 && objectY == 4946) {
						changeDoor(objectId, objectX, objectY - 1, 0, objectX,
								objectY);
					} else if (objectX == 2207 && objectY == 4945) {
						changeDoor(objectId, objectX, objectY + 1, 3, objectX,
								objectY);
					} else if (objectX == 2208 && objectY == 4946) {
						changeDoor(objectId, objectX, objectY - 1, 2, objectX,
								objectY);
					} else if (objectX == 2208 && objectY == 4945) {
						changeDoor(objectId, objectX, objectY + 1, 3, objectX,
								objectY);
					} else if (objectX == 2207 && objectY == 4943
							|| objectX == 2208 && objectY == 4943) {
						if (meleeFightStatus == 1) {
							sendMessage("You can't leave while in a fight!");
							break;
						}
						sendMessage("Please head west to the challenge room.");
					}
					break;
				case 1948:
					ObjectClickDelay = 8;
					NpcDialogue = 114;
					DialogueSend();
					CurrentFrame = 13901;
					break;
				case 4647:
					if (objectX == 2231 && objectY == 4952) {
						if (InvItemAmt(7774) >= 100) {
							changeCoords(2230, 4952, 1);
						} else {
							sendMessage("You need atleast 100 tokens to climb up this ladder.");
						}
					}
					break;
				case 4648:
					if (objectX == 2231 && objectY == 4952) {
						changeCoords(2230, 4952, 0);
					}
					break;
				case 5084:
					changeCoords(3085, 3272, 0);
					break;
				case 6434:
					changeCoords(2713, 9564, 0);
					break;
				case 5107:
					if (objectX == 2694 && objectY == 9482) {
						if (absX <= 2693) {
							walkToPoint(2695, 9482, -1);
						} else {
							walkToPoint(2693, 9482, -1);
						}
					}
					break;
				case 5106:
					if (objectX == 2675 && objectY == 9479) {
						if (absX >= 2676) {
							walkToPoint(2674, 9479, -1);
						} else {
							walkToPoint(2676, 9479, -1);
						}
					}
					break;
				case 5099:
					if (objectX == 2698 && objectY == 9498) {
						walkToPoint(2698, 9492, -1);
					}
					if (objectX == 2698 && objectY == 9493) {
						walkToPoint(2698, 9500, -1);
					}
					break;
				case 5110:
					if (objectX == 2649 && objectY == 9561) {
						changeCoords(2647, 9557, 0);
					}
					break;
				case 5111:
					if (objectX == 2647 && objectY == 9558) {
						changeCoords(2649, 9562, 0);
					}
					break;
				case 5088:
					if (objectX == 2683 && objectY == 9506) {
						walkToPoint(2687, 9506, -1);
					}
					break;
				case 5090:
					if (objectX == 2686 && objectY == 9506) {
						walkToPoint(2682, 9506, -1);
					}
					break;
				case 5105:
					if (AxeType.equalsIgnoreCase("None")) {
						sendMessage("You need an axe to cut through this!");
						break;
					}
					if (objectX == 2673 && objectY == 9499) {
						if (absX <= 2672) {
							walkToPoint(2674, 9499, -1);
						} else {
							walkToPoint(2672, 9499, -1);
						}
					}
					break;
				case 5103:
					if (AxeType.equalsIgnoreCase("None")) {
						sendMessage("You need an axe to cut through this!");
						break;
					}
					if (objectX == 2690 && objectY == 9564) {
						if (absX >= 2691) {
							walkToPoint(2689, 9564, -1);
						} else {
							walkToPoint(2691, 9564, -1);
						}
					}
					break;
				case 2147:
					if (objectX == 3104 && objectY == 3162) {
						changeCoords(3104, 9576, 0);
					}
					break;
				case 2148:
					if (objectX == 3103 && objectY == 9576) {
						changeCoords(3105, 3162, 0);
					}
					break;
				case 1738:
					if (objectX == 3204 && objectY == 3207) {
						changeCoords(3205, 3209, 1);
					}
					break;
				case 1739:
					if (objectX == 3204 && objectY == 3207) {
						changeCoords(3205, 3209, 0);
					}
					break;
				case 5946:
					if (objectX == 3169 && objectY == 9572) {
						changeCoords(3169, 3171, 0);
					}
					break;
				case 2465:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					startTele(2987, 3293, 0, 714, 715, 308, 4, 18431);
					break;
				case 2466:
					if (teleBlockDelay > 0) {
						sendMessage("You are teleBlocked.");
						break;
					}
					startTele(2981, 3512, 0, 714, 715, 308, 4, 18431);
					break;
				case 2467:
					startTele(3185, 3163, 0, 714, 715, 308, 4, 18431);
					break;
				case 2468:
					startTele(3306, 3472, 0, 714, 715, 308, 4, 18431);
					break;
				case 2469:
					startTele(3312, 3253, 0, 714, 715, 308, 4, 18431);
					break;
				case 2470:
					startTele(3053, 3443, 0, 714, 715, 308, 4, 18431);
					break;
				case 2474:
					startTele(3060, 3589, 0, 714, 715, 308, 4, 18431);
					break;
				case 2473:
					startTele(3185, 3216, 0, 714, 715, 308, 4, 18431);
					break;
				case 2472:
					startTele(2464, 4818, 0, 714, 715, 308, 4, 18431);
					break;
				case 2475:
					startTele(3269, 3961, 0, 714, 715, 308, 4, 18431);
					break;
				case 1722:
					if (objectX == 3188 && objectY == 3355) {
						if (absX != 3187 && (absY != 3355 && absY != 3356)) {
							if (legendQuest == 3) {
								changeCoords(3188, 3354, 1);
							}
						}
					}
					break;
				case 1723:
					if (objectX == 3188 && objectY == 3355) {
						if (legendQuest == 3) {
							changeCoords(3189, 3358, 0);
						}
					}
					break;
				case 453:
					if (Misc.random(10) >= 7) {
						startTele(2792, 9324, 0, 714, 715, 308, 4, 18431);
						playerLevel[playerPrayer] = 0;
						setSkillLevel(5);
						Server.s.npcHandler.newNPC(677, 2797, 9332, 0, 0, 0, 0,
								0, false, playerId);
						sendMessage("You get teleported!");
					}
					break;
				case 1805:
					if (objectX == 3191 && objectY == 3363) {
						if (legendQuest == 3) {
							if (absY > 3362) {
								walkToPoint(3191, 3362, -1);
							} else {
								walkToPoint(3191, 3363, -1);
							}
						} else {
							sendMessage("You must complete the Legens Miniquest first!");
						}
					}
					break;
				case 2923:
				case 2922:
					if (playerLevel[playerStrength] >= 50) {
						startAnimation(1263, 0);
						if (Misc.random(4) >= 3) {
							walkToPoint(2809, 9313, -1);
						} else {
							sendMessage("You fail to push the door open!");
							sendMessage("Your strength is lowered!");
							changeStat(playerStrength, 2, 0, false);
						}
					} else {
						sendMessage("Your current Strength total must be atleast 50!");
					}
					break;
				case 2919:
					if (playerLevel[playerMining] >= 50) {
						if (HasPic().equals("None")) {
							sendMessage("You need a pickaxe to do that!");
							break;
						}
						startAnimation(625, 0);
						if (Misc.random(4) >= 3) {
							walkToPoint(2809, 9326, 839);
						} else {
							sendMessage("You fail to mine the rock!");
							hitDiff = 2;
							updateHp(2, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					} else {
						sendMessage("You need atleast 50 mining to mine this rock.");
					}
					break;
				case 2920:
					if (playerLevel[playerMining] >= 50) {
						startAnimation(625, 0);
						if (Misc.random(4) >= 3) {
							walkToPoint(2809, 9322, 839);
						} else {
							sendMessage("You fail to mine the rock!");
							hitDiff = 2;
							updateHp(2, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					} else {
						sendMessage("You need atleast 50 mining to mine this rock.");
					}
					break;
				case 2921:
					if (playerLevel[playerMining] >= 50) {
						startAnimation(625, 0);
						if (Misc.random(4) >= 3) {
							walkToPoint(2809, 9318, 839);
						} else {
							sendMessage("You fail to mine the rock!");
							hitDiff = 2;
							updateHp(2, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					} else {
						sendMessage("You need atleast 50 mining to mine this rock.");
					}
					break;
				case 2927:
					hitDiff = 6;
					updateHp(6, false);
					updateRequired = true;
					hitUpdateRequired = true;
					sendMessage("Cast the teleport don't use it!");
					break;
				case 2912:
				case 2913:
					hitDiff = 10;
					updateHp(10, false);
					updateRequired = true;
					hitUpdateRequired = true;
					sendMessage("You can't just open the door!");
					break;
				case 10:
					if (objectX == 2981 && objectY == 3461) {
						if (playerLevel[playerWoodcutting] >= 50) {
							changeCoords(2772, 9341, 0);
						} else {
							sendMessage("Don't try to cheat!");
						}
					}
					break;
				case 3044:
				case 4304:
				case 11666:
				case 2781:
				case 12100:
					displayItem246(2405, 150, 2349);
					displayItem246(2406, 150, 2351);
					displayItem246(2407, 150, 2355);
					displayItem246(2409, 150, 2353);
					displayItem246(2410, 150, 2357);
					displayItem246(2411, 150, 2359);
					displayItem246(2412, 150, 2361);
					displayItem246(2413, 150, 2363);
					sendFrame164(2400);
					break;
				case 881:
					changeCoords(2884, 9798, 0);
					break;
				case 6552:
					playerLevel[5] = getLevelForXP(playerXP[5]);
					setSkillLevel(5);
					startAnimation(645, 0);
					if (ancQuest != 4) {
						sendMessage("You must unlock Ancients first!");
						break;
					}
					sendMessage("You magic converts!");
					if (spellSet == 0) {
						spellSet = 1;
					} else {
						spellSet = 0;
					}
					if (spellSet == 1) {
						SetSidebar(6, 12855);
					} else {
						SetSidebar(6, 1151);
					}
					break;
				case 1815:
					if (teleBlockDelay <= 0) {
						// startTele(3079, 3489, 0, 714, 715, 308, 4, 18431);
						leverTele(3079, 3489, 798);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 4, 0);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else {
						sendMessage("You are teleBlocked!");
					}
					break;
				case 1816:
					if (teleBlockDelay <= 0) {
						// startTele(2271, 4680, 0, 714, 715, 308, 4, 18431);
						leverTele(2271, 4680, 798);
					} else {
						sendMessage("You are teleBlocked!");
					}
					break;
				case 1814:
					if (teleBlockDelay <= 0) {
						// startTele(3153, 3923, 0, 714, 715, 308, 4, 18431);
						leverTele(3153, 3923, 798);
						// Server.s.worldO.checkIfExists(1814, objectX, objectY,
						// 4, 3);
						// Server.s.worldO.lowerHealth(1, objectId, objectX,
						// objectY);
					} else {
						sendMessage("You are teleBlocked!");
					}
					break;
				case 160:
					if (teleBlockDelay <= 0) {
						// startTele(3153, 3923, 0, 714, 715, 308, 4, 18431);
						leverTele(3153, 3923, 798);
					} else {
						sendMessage("You are teleBlocked!");
					}
					break;
				case 2491:
					if (pickInUse() != -1) {
						if (essDelay <= 0) {
							essDelay = 1 + Misc.random(2);
						}
						startAnimation(pickEmoteId(), 0);
					} else {
						sendMessage("You need a pickaxe to mine essence!");
					}
					break;
				case 2995:
					if (objectX == 2621 && objectY == 3896) {
						showDialogue("The chest teleports you!");
						changeCoords(3565, 3308, 0);
					} else {
						sendMessage("You find some loose change.");
						addItem(995, 1000);
					}
					break;
				case 4150:
					if (objectX == 2627 && objectY == 5091) {
						if (teleBlockDelay <= 0) {
							changeCoords(2622, 3873, 0);
						} else {
							sendMessage("You are teleBlocked!");
						}
					} else if (objectX == 3257 && objectY == 3452) {
						if (teleBlockDelay <= 0) {
							changeCoords(3565, 3308, 0);
						} else {
							sendMessage("You are teleBlocked!");
						}
					} else {
						changeCoords(3257, 3451, 0);
					}
					break;
				case 4677:
				case 4678:
					sendMessage("You reach into the plants...");
					startAnimation(2282, 0);
					sendMessage("And you find a vial sticking out of the ground.");
					addItem(3408, 1);
					break;
				case 7133:
					// Nature Altar
					startTele(2400, 4835, 0, 714, 715, 308, 4, 18431);
					break;
				case 7129:
					// Fire Altar
					startTele(2575, 4850, 0, 714, 715, 308, 4, 18431);
					break;
				case 7130:
					// Earth Altar
					startTele(2655, 4830, 0, 714, 715, 308, 4, 18431);
					break;
				case 7131:
					// Body Altar
					startTele(2523, 4824, 0, 714, 715, 308, 4, 18431);
					break;
				case 7140:
					// Mind Altar
					startTele(2792, 4827, 0, 714, 715, 308, 4, 18431);
					break;
				case 7139:
					// Air Altar
					startTele(2842, 4828, 0, 714, 715, 308, 4, 18431);
					break;
				case 7137:
					// Water Altar
					startTele(2726, 4832, 0, 714, 715, 308, 4, 18431);
					break;
				case 7132:
					// Cosmic
					break;
				case 7136:
					// Death
					startTele(2208, 4830, 0, 714, 715, 308, 4, 18431);
					break;
				case 7141:
					// Blood
					startTele(3269, 3961, 0, 714, 715, 308, 4, 18431);
					break;
				case 7138:
					// Soul
					break;
				case 7135:
					// Law
					startTele(2464, 4818, 0, 714, 715, 308, 4, 18431);
					break;
				case 7134:
					// Chaos Altar
					startTele(2281, 4837, 0, 714, 715, 308, 4, 18431);
					break;
				case 2095:
				case 2090:
				case 2091:
				case 9708:
				case 2094:
				case 9714:
				case 2093:
				case 9717:
				case 2096:
				case 2097:
				case 2092:
				case 14850:
				case 452:
				case 450:
				case 2103:
				case 2102:
				case 14853:
				case 2104:
				case 2105:
				case 14862:
				case 14859:
				case 14860:
				case 9720:
				case 2098:
				case 2099:
				case 2106:
				case 2107:
					SetStandEmote(3291);
					isMining = true;
					break;
				case 3403:
					if (lunarQuest < 2 || isMember == 0) {
						sendMessage("You can't mine this.");
						break;
					}
					SetStandEmote(625);
					isMining = true;
					break;
				case 1315:
				case 1316:
				case 1307:
				case 1281:
				case 1308:
				case 5551:
				case 5552:
				case 5553:
				case 1309:
				case 1306:
				case 1278:
				case 1276:
					SetStandEmote(875);
					isWC = true;
					break;
				case 8987:
					changeCoords(3083, 3249, 0);
					break;
				case 2318:
					startTele(2442, 10146, 0, 827, -1, -1, 5, 8677); // 2900,
																		// 4449
					break;
				case 9359:
					changeCoords(2862, 9572, 0);
					break;
				case 2816:
					changeCoords(2576, 3844, 0);
					break;
				case 10229:
				case 4413:
					if (heightLevel == 4) {
						changeCoords(2820, 3373, 0);
					} else {
						startTele(1910, 4367, 0, 828, -1, -1, 5, 8677);
					}
					break;
				case 8966:
					if (objectX == 2440 && objectY == 10146) {
						if (Misc.random(1) == 1) {
							startTele(2827 + randomz.nextInt(2),
									3344 + randomz.nextInt(2), 0, 828, -1, -1,
									5, 18431);
						} else {
							startTele(2860 + randomz.nextInt(2),
									3373 + randomz.nextInt(2), 0, 828, -1, -1,
									5, 18431);
						}
					}
					break;
				case 8958:
					if (objectX == 2491 && objectY == 10162) {
						if (canOpenDaDoor(0)) {
							Server.s.worldO.checkIfExists(objectId, objectX,
									objectY, 10, 1);
							Server.s.worldO.lowerHealth(1, objectId, objectX,
									objectY);
						}
					}
					break;
				case 8959:
					if (objectX == 2491 && objectY == 10146) {
						if (canOpenDaDoor(1)) {
							Server.s.worldO.checkIfExists(objectId, objectX,
									objectY, 10, 1);
							Server.s.worldO.lowerHealth(1, objectId, objectX,
									objectY);
						}
					}
					break;
				case 8960:
					if (objectX == 2491 && objectY == 10130) {
						if (canOpenDaDoor(2)) {
							Server.s.worldO.checkIfExists(objectId, objectX,
									objectY, 10, 1);
							Server.s.worldO.lowerHealth(1, objectId, objectX,
									objectY);
						}
					}
					break;
				case 10177:
					if (objectX == 2546 && objectY == 10143) {
						startTele(1827, 4362, 1, 828, -1, -1, 5, 8677);
					}
					break;
				case 10210:
					if (objectX == 1827 && objectY == 4362) {
						startTele(2545, 10143, 0, 828, -1, -1, 5, 8677);
					}
					break;
				case 10211:
					if (objectX == 1863 && objectY == 4371) {
						startTele(1864, 4390, 1, 828, -1, -1, 5, 8677);
					}
					break;
				case 10214:
					if (objectX == 1864 && objectY == 4389) {
						startTele(1863, 4371, 1, 827, -1, -1, 5, 8677);
					}
					break;
				case 10215:
					if (objectX == 1890 && objectY == 4407) {
						startTele(1890, 4407, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 10216:
					if (objectX == 1890 && objectY == 4408) {
						startTele(1890, 4409, 1, 828, -1, -1, 5, 8677);
					}
					break;
				case 10230:
					if (objectX == 1911 && objectY == 4367) {
						startTele(2900, 4449, 0, 827, -1, -1, 5, 8677);
					}
					break;
				case 9357:
					changeCoords(2438, 5168, 0);
					sendMessage("Come back to the fight caves soon!");
					killMyNPCs();
					KilledTz = 0;
					NeededKills = 0;
					tzWave = -1;
					WaveDelay = 0;
					break;
				case 9356:
					changeCoords(2413, 5117, getHeightForTzhaar());
					sendMessage("You enter the fight cave!");
					sendFrame200(4883, 591);
					changeText126(getNpcName(2619), 4884);
					changeText126("You're on your own, fight for your life!",
							4885);
					changeText126("Click here to continue", 4886);
					sendFrame75(2619, 4883);
					sendFrame164(4882);
					tzWave = 1;
					WaveDelay = 20;
					KilledTz = 0;
					NeededKills = 0;
					break;
				case 9358:
					changeCoords(2480, 5175, 0);
					break;
				case 12602:
					changeCoords(2856, 9570, 0);
					break;
				case 1764:
					changeCoords(2920, 2721, 0);
					break;
				case 2883:
				case 2882:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 4640:
				case 4638:
					if (objectX == 2191 && objectY == 4950) {
						changeDoor(objectId, objectX + 1, objectY, 3, objectX,
								objectY);
					} else if (objectX == 2192 && objectY == 4950) {
						changeDoor(objectId, objectX - 1, objectY, 2, objectX,
								objectY);
					} else if (objectX == 2191 && objectY == 4969) {
						changeDoor(objectId, objectX + 1, objectY, 3, objectX,
								objectY);
					} else if (objectX == 2192 && objectY == 4969) {
						changeDoor(objectId, objectX - 1, objectY, 2, objectX,
								objectY);
					} else if (objectX == 2217 && objectY == 4976) {
						changeDoor(objectId, objectX, objectY - 1, 2, objectX,
								objectY);
					} else if (objectX == 2217 && objectY == 4977) {
						changeDoor(objectId, objectX, objectY + 1, 3, objectX,
								objectY);
					} else if (objectX == 2224 && objectY == 4958) {
						changeDoor(objectId, objectX - 1, objectY, 1, objectX,
								objectY);
					} else if (objectX == 2223 && objectY == 4958) {
						changeDoor(objectId, objectX + 1, objectY, 0, objectX,
								objectY);
					} else if (objectX == 2191 && objectY == 4958) {
						if (heightLevel == 0) {
							knightWavesGame = 1;
							resetAllPrayers();
							changeCoords(2191, 4958, getHeightForTzhaar());
							Server.s.npcHandler.newNPC(239, 2187, 4954,
									heightLevel, 0, 0, 0, 0, false, playerId);
						} else {
							killMyNPCs();
							changeCoords(2192, 4958, 0);
							knightWavesGame = 0;
						}
					}
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object1 Id: " + objectId
								+ ", X: " + objectX + ", Y: " + objectY);
					}
					break;
				case 4631:
				case 4632:
					if (objectX == 2194 && objectY == 4959) {
						changeDoor(objectId, objectX - 1, objectY, 3, objectX,
								objectY);
					} else if (objectX == 2193 && objectY == 4959) {
						changeDoor(objectId, objectX + 1, objectY, 0, objectX,
								objectY);
					} else if (objectX == 2194 && objectY == 4960) {
						changeDoor(objectId, objectX - 1, objectY, 1, objectX,
								objectY);
					} else if (objectX == 2193 && objectY == 4960) {
						changeDoor(objectId, objectX + 1, objectY, 0, objectX,
								objectY);
					} else if (objectX == 2207 && objectY == 4973) {
						changeDoor(objectId, objectX, objectY - 1, 0, objectX,
								objectY);
					} else if (objectX == 2207 && objectY == 4972) {
						changeDoor(objectId, objectX, objectY + 1, 1, objectX,
								objectY);
					} else if (objectX == 2208 && objectY == 4973) {
						changeDoor(objectId, objectX, objectY - 1, 2, objectX,
								objectY);
					} else if (objectX == 2208 && objectY == 4972) {
						changeDoor(objectId, objectX, objectY + 1, 1, objectX,
								objectY);
					}
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object1 Id: " + objectId
								+ ", X: " + objectX + ", Y: " + objectY);
					}
					break;
				case 1536:
					if (objectX == 3215 && objectY == 3211) {
						changeDoor(objectId, objectX, objectY + 1, 0, objectX,
								objectY);
					} else if (objectX == 3215 && objectY == 3212) {
						changeDoor(objectId, objectX, objectY - 1, 1, objectX,
								objectY);
					} else if (objectX == 3207 && objectY == 3222) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 3207 && objectY == 3214) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 3128 && objectY == 3246) {
						changeDoor(objectId, objectX, objectY, 0);
					} else if (objectX == 3219 && objectY == 3472) {
						changeDoor(objectId, objectX, objectY, 1);
					}
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object1 Id: " + objectId
								+ ", X: " + objectX + ", Y: " + objectY);
					}
					break;
				case 11993:
					if (objectX == 3109 && objectY == 3167) {
						changeDoor(objectId, objectX, objectY, 0);
					} else if (objectX == 3111 && objectY == 3162) {
						changeDoor(objectId, objectX, objectY, 0);
					} else if (objectX == 3107 && objectY == 3162) {
						if (absY > 3162) {
							walkToPoint(3106, 3161, -1);
						} else {
							walkToPoint(3108, 3163, -1);
						}
					}
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object1 Id: " + objectId
								+ ", X: " + objectX + ", Y: " + objectY);
					}
					break;
				case 1558:
				case 1557:
					if (objectY == 9910 && (objectX == 2909 || objectX == 2910)) {
						changeDoor(objectId, objectX, objectY, 0);
					} else {
						changeDoor(objectId, objectX, objectY, -1);
					}
					break;
				case 1530:
					if (absY >= 3485 && absY <= 3493) {
						changeDoor(objectId, objectX, objectY, 0);
					} else {
						changeDoor(objectId, objectX, objectY, -1);
					}
					break;
				case 1553:
					changeDoor(objectId, objectX, objectY, -3);
					break;
				case 1551:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 4696:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 1519:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 1516:
					changeDoor(objectId, objectX, objectY, -3);
					break;
				case 3198:
				case 3197:
					changeDoor(objectId, objectX, objectY, -3);
					break;
				case 10284:
					int moveX = 0;
					int moveY = 0;
					if (Misc.random(2) == 1) {
						moveX = 3552;
						moveY = 9698;
					} else if (Misc.random(2) == 1) {
						moveX = 3548;
						moveY = 9695;
					} else if (Misc.random(2) == 1) {
						moveX = 3555;
						moveY = 9694;
					} else {
						moveX = 3552;
						moveY = 9691;
					}
					if (hiddenBarrowBro == 0) {
						if (dharokSummoned == 0) {
							dharokSummoned = 1;
							Server.s.npcHandler.newNPC(2026, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Dharok at a time!");
						}
					} else if (hiddenBarrowBro == 1) {
						if (ahrimSummoned == 0) {
							ahrimSummoned = 1;
							Server.s.npcHandler.newNPC(2025, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Ahrim at a time!");
						}
					} else if (hiddenBarrowBro == 2) {
						if (guthanSummoned == 0) {
							guthanSummoned = 1;
							Server.s.npcHandler.newNPC(2027, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Guthan at a time!");
						}
					} else if (hiddenBarrowBro == 3) {
						if (karilSummoned == 0) {
							karilSummoned = 1;
							Server.s.npcHandler.newNPC(2028, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Karil at a time!");
						}
					} else if (hiddenBarrowBro == 4) {
						if (toragSummoned == 0) {
							toragSummoned = 1;
							Server.s.npcHandler.newNPC(2029, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Torag at a time!");
						}
					} else if (hiddenBarrowBro == 5) {
						if (veracSummoned == 0) {
							veracSummoned = 1;
							Server.s.npcHandler.newNPC(2030, moveX, moveY, 0,
									0, 0, 0, 0, false, playerId);
						} else {
							showDialogue("One Verac at a time!");
						}
					}
					break;
				case 6744:
				case 6725:
				case 6720:
				case 6739:
				case 6743:
				case 6724:
				case 6746:
				case 6727:
					changeCoords(3565, 3297, 0);
					if (hiddenBarrowBro == 0) {
						if (dharokSummoned != 2 && dharokSummoned != 0) {
							killMyNPCs();
							dharokSummoned = 0;
						}
					} else if (hiddenBarrowBro == 1) {
						if (ahrimSummoned != 2 && ahrimSummoned != 0) {
							killMyNPCs();
							ahrimSummoned = 0;
						}
					} else if (hiddenBarrowBro == 2) {
						if (guthanSummoned != 2 && guthanSummoned != 0) {
							killMyNPCs();
							guthanSummoned = 0;
						}
					} else if (hiddenBarrowBro == 3) {
						if (karilSummoned != 2 && karilSummoned != 0) {
							killMyNPCs();
							karilSummoned = 0;
						}
					} else if (hiddenBarrowBro == 4) {
						if (toragSummoned != 2 && toragSummoned != 0) {
							killMyNPCs();
							toragSummoned = 0;
						}
					} else if (hiddenBarrowBro == 5) {
						if (veracSummoned != 2 && veracSummoned != 0) {
							killMyNPCs();
							veracSummoned = 0;
						}
					}
					break;
				case 1512:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 1596:
				case 1597:
					if (objectX == 3008 && (objectY == 3850 || objectY == 3849)) {
						changeDoor(objectId, objectX, objectY, -1);
					} else {
						changeDoor(objectId, objectX, objectY, 0);
					}
					break;
				case 2640:
				case 10638:
				case 411:
				case 61:
					playerLevel[5] = getLevelForXP(playerXP[5]);
					setSkillLevel(5);
					startAnimation(645, 0);
					sendMessage("Your prayer gets restored.");
					if (lunarQuest == 3 && objectX == 2853 && objectY == 3348
							&& isMember == 1) {
						NpcDialogue = 149;
						DialogueSend();
						CurrentFrame = 13901;
					}
					break;
				case 4300:
					if (Misc.random(2) == 1) {
						addItem(995, 5000);
					}
					sendMessage("It's a box, what do you expect?");
					break;
				case 6771:
					if (hiddenBarrowBro == 0) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (dharokSummoned == 0) {
						dharokSummoned = 1;
						Server.s.npcHandler.newNPC(2026, 3551, 9713, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Dharok at a time!");
					}
					break;
				case 6773:
					if (hiddenBarrowBro == 2) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (guthanSummoned == 0) {
						guthanSummoned = 1;
						Server.s.npcHandler.newNPC(2027, 3541, 9706, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Guthan at a time!");
					}
					break;
				case 6821:
					if (hiddenBarrowBro == 1) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (ahrimSummoned == 0) {
						ahrimSummoned = 1;
						Server.s.npcHandler.newNPC(2025, 3552, 9701, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Ahrim at a time!");
					}
					break;
				case 6823:
					if (hiddenBarrowBro == 5) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (veracSummoned == 0) {
						veracSummoned = 1;
						Server.s.npcHandler.newNPC(2030, 3576, 9708, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Verac at a time!");
					}
					break;
				case 6772:
					if (hiddenBarrowBro == 4) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (toragSummoned == 0) {
						toragSummoned = 1;
						Server.s.npcHandler.newNPC(2029, 3567, 9686, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Torag at a time!");
					}
					break;
				case 6822:
					if (hiddenBarrowBro == 3) {
						sendMessage("You fall in!");
						changeCoords(3552, 9692, 0);
					} else if (karilSummoned == 0) {
						karilSummoned = 1;
						Server.s.npcHandler.newNPC(2028, 3547, 9681, -1, 0, 0,
								0, 0, false, playerId);
					} else {
						showDialogue("One Karil at a time!");
					}
					break;
				case 6703:
					if (dharokSummoned != 2 && dharokSummoned != 0) {
						killMyNPCs();
						dharokSummoned = 0;
					}
					changeCoords(3574, 3297, 0);
					break;
				case 6704:
					if (guthanSummoned != 2 && guthanSummoned != 0) {
						killMyNPCs();
						guthanSummoned = 0;
					}
					changeCoords(3576, 3281, 0);
					break;
				case 6702:
					if (ahrimSummoned != 2 && ahrimSummoned != 0) {
						killMyNPCs();
						ahrimSummoned = 0;
					}
					changeCoords(3564, 3289, 0);
					break;
				case 6707:
					if (veracSummoned != 2 && veracSummoned != 0) {
						killMyNPCs();
						veracSummoned = 0;
					}
					changeCoords(3556, 3297, 0);
					break;
				case 6706:
					if (toragSummoned != 2 && toragSummoned != 0) {
						killMyNPCs();
						toragSummoned = 0;
					}
					changeCoords(3553, 3283, 0);
					break;
				case 6705:
					if (karilSummoned != 2 && karilSummoned != 0) {
						killMyNPCs();
						karilSummoned = 0;
					}
					changeCoords(3565, 3276, 0);
					break;
				case 3828:
					startTele(3484, 9509, 2, 827, -1, -1, 5, 8677);
					break;
				case 3829:
					if (Misc.random(1) == 1) {
						startTele(2827 + randomz.nextInt(2),
								3344 + randomz.nextInt(2), 0, 828, -1, -1, 5,
								18431);
					} else {
						startTele(2860 + randomz.nextInt(2),
								3373 + randomz.nextInt(2), 0, 828, -1, -1, 5,
								18431);
					}
					break;
				case 3832:
					startTele(3510, 9496, 2, 828, -1, -1, 5, 18431);
					break;
				case 7144:
					if (AxeType != "None") {
						changeCoords(3031, 4820, 0);
					} else {
						sendMessage("You need an axe!");
					}
					break;
				case 2813:
					changeCoords(2956, 3945, 0);
					break;
				case 10595:
					changeCoords(2630, 3690, 0);
					break;
				case 14314:
					pcStatus = 0;
					changeCoords(2657, 2639, 0);
					SetWalkableFrame(4535);
					break;
				case 14315:
					pcStatus = 1;
					changeCoords(2661, 2639, 0);
					SetWalkableFrame(14310);
					break;
				case 14306:
					changeCoords(3277, 3213, 0);
					break;
				case 14235:
					if (objectX == 2670 && objectY == 2593) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 2643 && objectY == 2592) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 2657 && objectY == 2585) {
						changeDoor(objectId, objectX, objectY, 0);
					}
					break;
				case 14233:
					if (objectX == 2670 && objectY == 2592) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 2643 && objectY == 2593) {
						changeDoor(objectId, objectX, objectY, -1);
					} else if (objectX == 2656 && objectY == 2585) {
						changeDoor(objectId, objectX, objectY, 0);
					}
					break;
				case 4311:
				case 4312:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 4483:
				case 3193:
				case 2213:
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
					break;
				case 409:
				case 4859:
					playerLevel[5] = getLevelForXP(playerXP[5]);
					setSkillLevel(5);
					startAnimation(645, 0);
					sendMessage("Your prayer gets restored.");
					break;
				case 14367:
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
					break;
				case 2492:
					if (teleBlockDelay <= 0) {
						startTele(3253, 3398, 0, 714, 715, 308, 4, 18431);
					} else {
						sendMessage("A magical force does not allow you to teleport.");
					}
					break;
				case 9707:
					if (teleBlockDelay <= 0) {
						startTele(3105, 3955, 0, 714, 715, 308, 4, 18431);
					} else {
						sendMessage("A magical force does not allow you to teleport.");
					}
					break;
				case 9706:
					if (mageArenaQuest < 6) {
						sendMessage("You cannot go in here.");
						break;
					}
					if (teleBlockDelay <= 0) {
						startTele(3105, 3951, 0, 714, 715, 308, 4, 18431);
					} else {
						sendMessage("A magical force does not allow you to teleport.");
					}
					break;
				case 5959:
					if (leverDelay > 0) {
						break;
					}
					if (teleBlockDelay <= 0) {
						leverTele(2539, 4712, 798);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 4, 0);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else {
						sendMessage("A magical force does not allow you to teleport.");
					}
					break;
				case 5960:
					if (leverDelay > 0) {
						break;
					}
					if (teleBlockDelay <= 0) {
						leverTele(3090, 3956, 798);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 4, 3);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else {
						sendMessage("A magical force does not allow you to teleport.");
					}
					break;
				case 733:
					startAnimation(
							GetWeaponAtkEmote(
									getItemName(playerEquipment[playerWeapon]),
									skillId), 0);
					if (Misc.random(10) < 6) {
						sendMessage("You fail to cut the web.");
						break;
					}
					if (objectX == 3105 && objectY == 3958) {
						// createGlobalObject(objectX, objectY, 734, -1, 10);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 10, -1);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else if (objectX == 3106 && objectY == 3958) {
						// createGlobalObject(objectX, objectY, 734, -1, 10);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 10, -1);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else if (objectX == 3095 && objectY == 3957) {
						// createGlobalObject(objectX, objectY, 734, 0, 10);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 10, 0);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else if (objectX == 3093 && objectY == 3957) {
						// createGlobalObject(objectX, objectY, 734, 0, 10);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 10, 0);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					} else if (objectX == 3158 && objectY == 3951) {
						// createGlobalObject(objectX, objectY, 734, -3, 10);
						Server.s.worldO.checkIfExists(objectId, objectX,
								objectY, 10, -3);
						Server.s.worldO.lowerHealth(1, objectId, objectX,
								objectY);
					}
					break;
				case 2623:
					changeDoor(objectId, objectX, objectY, -1);
					break;
				case 4148:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 11707:
					changeDoor(objectId, objectX, objectY, 0);
					break;
				case 11758:
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
					break;
				case 1755:
					if (objectX == 2884 && objectY == 9797) {
						changeCoords(3237, 3457, 0);
					}
					if (objectX == 3097 && objectY == 9867) {
						changeCoords(3096, 3468, 0);
					}
					if (objectX == 3020 && objectY == 9739) {
						changeCoords(3021, 3339, 0);
					}
					break;
				case 5947:
					if (objectX == 3169 && objectY == 3172) {
						changeCoords(3169, 9571, 0);
					}
					break;
				case 1568:
					if (objectX == 3097 && objectY == 3468) {
						changeCoords(3097, 9868, 0);
					}
					break;
				case 2408:
					if (objectX == 2820 && objectY == 3374) {
						if (lostCityQuest >= 5) {
							changeCoords(2515, 4632, 4);
						} else {
							changeCoords(2822, 9771, 0);
						}
					}
					break;
				case 2407:
					changeCoords(2820, 3373, 0);
					break;
				case 2414:
					changeCoords(3277, 3213, 0);
					break;
				/**
				 * Fight pits by Canownueasy
				 */
				case 9369: // Enter waiting room
					if (absY < 5176) {
						// remove players
						FightPits.players.remove(playerName);
						FightPits.waiters.remove(playerName);
						showDialogue("You leave Fight Pits!");
						changeCoords(2399, 5177, 0);
						teleBlockDelay = 0;
					} else {
						// add players
						FightPits.players.add(playerName);
						FightPits.waiters.add(playerName);
						showDialogue("You enter Fight Pits!");
						if (Misc.random(1) == 1) {
							changeCoords(2396, 5172, 0);
						} else {
							changeCoords(2402, 5172, 0);
						}
						teleBlockDelay = 9999;
					}
					break;
				case 9368: // Leave in-game
					if (FightPits.fighters.contains(playerName)) {
						FightPits.removeFromGame(this);
						showDialogue("You leave the game.");
						if (Misc.random(1) == 1) {
							changeCoords(2396, 5172, 0);
						} else {
							changeCoords(2402, 5172, 0);
						}
					} else {
						showDialogue("You can only leave the game through this vent.");
					}
				default:
					if (playerName.equalsIgnoreCase("Mrquarter")) {
						System.out.println("[CLIENT]: Object1 Id: " + objectId
								+ ", X: " + objectX + ", Y: " + objectY);
					}
					// Server.s.serverConsole.addMessToServer("Object(1) "+objectId+" has not been added.");
					break;
				}
			}
		}
	}

	public int walkResetdelay = 0;

	public void walkToPoint(int x, int y, int emote) {
		if (EntangleDelay > 0) {
			return;
		}
		showInterface(18431);
		if (emote != -1) {
			playerSEW = emote;
			playerSER = emote;
			appearanceUpdateRequired = true;
			updateRequired = true;
		}
		walkResetdelay = 4;
		newWalkCmdSteps = 0;
		if (++newWalkCmdSteps > walkingQueueSize) {
			newWalkCmdSteps = 0;
		}
		int firstStepX = x;
		int firstStepY = y;
		firstStepX -= mapRegionX * 8;
		firstStepY -= mapRegionY * 8;
		newWalkCmdX[0] = newWalkCmdY[0] = 0;
		for (i = 0; i < newWalkCmdSteps; i++) {
			newWalkCmdX[i] += firstStepX;
			newWalkCmdY[i] += firstStepY;
		}
		isRunning = true;
		isRunning2 = true;
		newWalkCmdIsRunning = true;
	}

	public void startTele(int x, int y, int h, int startEmote, int endEmote,
			final int gfxId, int time, int interfaceId) {
		if (teleBlockDelay > 0) {
			sendMessage("A magical force stops you from teleporting.");
			return;
		}
		if (teleX > 0 && teleY > 0) {
			return;
		}

		showInterface(interfaceId);
		if (interfaceId == 8677) {
			minimap(2);
		} else {
			minimap(1);
		}

		startAnimation(8939, 0);
		final int gfxHeight = 100;
		playGraphic(1576, 0, 0);

		heightLvl = h;
		teleX = x;
		teleY = y;
		doTeleDelay = 3;
		endTeleEmote = 8941;
	}

	public void finishTele() {
		if (playerId <= 0 || Server.s.playerHandler.players[playerId] == null) {
			return;
		}
		changeCoords(teleX, teleY, heightLvl);
		startAnimation(endTeleEmote, 0);
		if (endTeleEmote == -1) {
			resetEmotes();
		}
		minimap(0);
		teleX = -1;
		teleY = -1;
		playGraphic(1577, 0, 0);
		endTeleEmote = 0;
		RemoveAllWindows();
	}

	public void minimap(int i1)// 0 = unlock 1 = black above 2 = locked
	{
		outStream.createFrame(99);
		outStream.writeByte(i1);
	}

	public void leverTele(int x, int y, int emote) {
		heightLevel = 0;
		leverX = x;
		leverY = y;
		leverDelay = 4;
		startAnimation(emote, 0);
	}

	public int leverX = 0;
	public int leverY = 0;
	public int leverDelay = 0;

	public void changeCoords(int x, int y, int height) {
		heightLevel = height;
		teleportToX = x;
		teleportToY = y;
		updateRequired = true;
		appearanceUpdateRequired = true;
		didTeleport = true;
	}

	public void attemptCoordSet(int x, int y, int height) {
		if (teleportToX > 0 && teleportToY > 0) {
			return;
		}
		heightLevel = height;
		teleportToX = x;
		teleportToY = y;
		updateRequired = true;
		appearanceUpdateRequired = true;
		if (x != absX || y != absY) {
			didTeleport = true;
		}
	}

	public boolean getsDrop = true;

	public void resetBonus() {
		for (int i = 0; i < playerBonus.length; i++) {
			playerBonus[i] = 0;
		}
	}

	public void getBonus() {
		playerSW = GetWalkEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon]));
		resetBonus();
		for (int i = 0; i < playerEquipment.length; i++) {
			if (playerEquipment[i] > -1) {
				for (int j = 0; j < 8000; j++) {
					try {
						if (Server.s.itemHandler.ItemList[j] != null) {
							if (Server.s.itemHandler.ItemList[j].itemId == playerEquipment[i]) {
								for (int k = 0; k < playerBonus.length; k++) {
									playerBonus[k] += Server.s.itemHandler.ItemList[j].Bonuses[k];
								}
								break;
							}
						}
					} catch (Exception e) {
					}
				}
			}
		}
		writeBonus();
	}

	public void writeBonus() {
		int offset = 0;
		String send = "";
		for (int i = 0; i < playerBonus.length; i++) {
			if (playerBonus[i] >= 0) {
				send = BonusName[i] + ": +" + playerBonus[i];
			} else {
				send = BonusName[i] + ": -"
						+ java.lang.Math.abs(playerBonus[i]);
			}
			if (i == 10) {
				offset = 1;
			}
			changeText126(send, (1675 + i + offset));
		}
	}

	public void DropItem() {
		int ItemId = inStream.readUnsignedWordA();
		int Unknown = inStream.readUnsignedByte() + inStream.readUnsignedByte();
		int Slot = inStream.readUnsignedWordA();
		if (!isUntradable(ItemId) && playerRights == 2) {
			if (playerItems[Slot] - 1 == ItemId) {
				Server.s.itemHandler.PlayerDropItem(ItemId, playerItemsN[Slot],
						absX, absY, Slot, playerId);
			}
			RemoveAllWindows();
		} else {
			DestroyItem = ItemId;
			changeText126(getItemName(DestroyItem), 14184);
			frame34(DestroyItem, 14171);
			CurrentFrame = 14170;
			sendFrame164(14170);
		}
	}

	public void frame34(int itemId, int frameId) {
		outStream.createFrameVarSizeWord(34);
		outStream.writeWord(frameId);
		outStream.writeByte(0);
		outStream.writeWord(itemId + 1);
		outStream.writeByte(255);
		outStream.writeDWord(1);
		outStream.endFrameVarSizeWord();
	}

	public int DestroyItem = -1;

	public void resetShop(int ShopID) {
		int TotalItems = 0;
		for (int i = 0; i < Server.s.shopHandler.MaxShopItems; i++) {
			if (Server.s.shopHandler.ShopItems[ShopID][i] > 0) {
				TotalItems++;
			}
		}
		if (TotalItems > Server.s.shopHandler.MaxShopItems) {
			TotalItems = Server.s.shopHandler.MaxShopItems;
		}
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(3900);
		outStream.writeWord(TotalItems);
		int TotalCount = 0;
		for (int i = 0; i < Server.s.shopHandler.ShopItems.length; i++) {
			if (Server.s.shopHandler.ShopItems[ShopID][i] > 0
					|| i <= Server.s.shopHandler.ShopItemsStandard[ShopID]) {
				if (Server.s.shopHandler.ShopItemsN[ShopID][i] > 254) {
					outStream.writeByte(255);
					outStream
							.writeDWord_v2(Server.s.shopHandler.ShopItemsN[ShopID][i]);
				} else {
					outStream
							.writeByte(Server.s.shopHandler.ShopItemsN[ShopID][i]);
				}
				outStream
						.writeWordBigEndianA(Server.s.shopHandler.ShopItems[ShopID][i]);
				TotalCount++;
			}
			if (TotalCount >= TotalItems) {
				break;
			}
		}
		outStream.endFrameVarSizeWord();
	}

	public String BonusName[] = { "Stab", "Slash", "Crush", "Magic", "Range",
			"Stab", "Slash", "Crush", "Magic", "Range", "Strength", "Prayer" };

	public void playSound(int id) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p.WithinDistance(absX, absY, p.absX, p.absY, 3)) {
					if (p.heightLevel == heightLevel) {
						if (p.soundEffects) {
							p.sendMessage(id + ":playsound:");
						}
					}
				}
			}
		}
	}

	public void frame106(int i1) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(106);
		outStream.writeByteC(i1);
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void changeText126(String s, int id) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(126);
		outStream.writeString(s);
		outStream.writeWordA(id);
		outStream.endFrameVarSizeWord();
	}

	public void sendQuest(String s, int id) {
		try {
			outStream.createFrameVarSizeWord(126);
			outStream.writeString(s);
			outStream.writeWordA(id);
			outStream.endFrameVarSizeWord();
		} catch (Exception e) {
		}
	}

	public void sendFrame126(String s, int id) {
		outStream.createFrameVarSizeWord(126);
		outStream.writeString(s);
		outStream.writeWordA(id);
		outStream.endFrameVarSizeWord();
		flushOutStream();
	}

	public int getXPForLevel(int level) {
		int points = 0;
		int output = 0;

		for (int lvl = 1; lvl <= level; lvl++) {
			points += Math.floor((double) lvl + 300.0
					* Math.pow(2.0, (double) lvl / 7.0));
			if (lvl >= level) {
				return output;
			}
			output = (int) Math.floor(points / 4);
		}
		return 0;
	}

	public void sendFrame248(int MainFrame, int SubFrame) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		if (MainFrame == 5292) {
			minimap(1);
		}
		outStream.createFrame(248);
		outStream.writeWordA(MainFrame);
		outStream.writeWord(SubFrame);
	}

	public void sendFrame200(int MainFrame, int SubFrame) {
		// misc.debugMes("sendFrame200() Method");
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(200);
		outStream.writeWord(MainFrame);
		outStream.writeWord(SubFrame);
	}

	public void sendFrame75(int MainFrame, int SubFrame) {
		// misc.debugMes("sendFrame75() Method");
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(75);
		outStream.writeWordBigEndianA(MainFrame);
		outStream.writeWordBigEndianA(SubFrame);
	}

	public void sendFrame164(int Frame) {
		// misc.debugMes("sendFrame164() Method");
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(164);
		outStream.writeWordBigEndian_dup(Frame);
	}

	public void displayItem246(int MainFrame, int SubFrame, int SubFrame2) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(246);
		outStream.writeWordBigEndian(MainFrame);
		outStream.writeWord(SubFrame);
		outStream.writeWord(SubFrame2);
	}

	public void flushOutStream() {
		if (disconnected || !runStream) {
			outStream.currentOffset = 0;
			return;
		}
		if (readyBuffer != null || outStream.currentOffset == 0) {
			return;
		}
		try {
			readyBuffer = new byte[outStream.currentOffset];
			System.arraycopy(outStream.buffer, 0, readyBuffer, 0,
					outStream.currentOffset);
			outStream.currentOffset = 0;
			synchronized (this) {
				notify();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fillInStream(int forceRead) {
		try {
			in.read(inStream.buffer, 0, forceRead);
			inStream.currentOffset = 0;
		} catch (Exception e) {
			disconnected = true;
		}
	}

	public void destruct() {
		try {
			if (playerId != 0 && !playerName.equalsIgnoreCase("null")
					&& playerRights != 2)
				SQL.saveHighScore(this);
		} catch (Exception e) {

		}
		AntiDupe.onlineNames.remove(playerName);
		disconnected = true;
		runStream = false;
		System.out.println("[" + this.playerName
				+ "]: Sucessfully disconnected.");
		try {
			in.close();
			out.close();
			in = null;
			out = null;
		} catch (java.io.IOException ioe) {
		}
		try {
			socket.close();
			socket = null;
		} catch (java.io.IOException ioe) {
		}
		PlayerIp = "0.0.0.0";
		playerListSize = 0;
		npcListSize = 0;
		try {
			resetWalkingQueue();
			teleportToX = teleportToY = -1;
		} catch (Exception e) {
		}
		absX = absY = -1;
		mapRegionX = mapRegionY = -1;
		currentX = currentY = 0;
	}

	public Client(Socket s, int _playerId) {
		super(_playerId);
		socket = s;
		playerId = _playerId;
		try {
			in = s.getInputStream();
			out = s.getOutputStream();
			socket.setSoTimeout(25000);
		} catch (IOException ioe) {
			disconnected = true;
		}
		try {
			outStream = new stream(new byte[bufferSize]);
			outStream.currentOffset = 0;
			inStream = new stream(new byte[2000]);
			inStream.currentOffset = 0;
		} catch (Exception error) {
			disconnected = true;
		}
	}

	public Socket socket = null;

	public void initialize() {
		try {
			outStream.createFrame(249);
			outStream.writeByteA(1);
			outStream.writeWordBigEndianA(playerId);
			outStream.createFrame(107);
			UpdateAll();
		} catch (Exception error) {
		}
	}

	public void LoadChangedText() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		changeText126("Name: ", 14184);
		changeText126("Clicking yes will permanently delete this item.", 14182);
		changeText126("If you want to keep this item click no.", 14183);
		changeText126("Level 19 : Hawk Eye", 694);
		changeText126("Increases your range accuracy", 5679);
		changeText126("Level 22 : Mystic Lore", 695);
		changeText126("Increases your magic accuracy", 5683);
		changeText126("We hope you enjoyed", 2450);
		changeText126("Playing InnovationX", 2451);
		changeText126("Please return soon.", 2452);
		changeText126("Click here to logout", 2458);
		changeText126("Home Teleport", 1300);
		changeText126("Teleport Home", 1301);
		changeText126("Pking Teleport", 1325);
		changeText126("Fight Players Here", 1326);
		changeText126("Training Teleport", 1350);
		changeText126("Become Powerfull Today", 1351);
		changeText126("Skilling Teleport", 1382);
		changeText126("Train Non-Combat Skills Here", 1383);
		changeText126("Monster Teleport", 1415);
		changeText126("Battle Different Monsters", 1416);
		changeText126("Minigames Teleport", 1454);
		changeText126("Try Out MiniGames", 1455);
		changeText126("Activities Teleport", 7457);
		changeText126("Visit The Games", 7458);
		changeText126("God Wars Teleport", 18472);
		changeText126("Kill The Bosses Here", 18473);
		changeText126("Home Teleport", 13037);
		changeText126("Teleport Home", 13038);
		changeText126("Pking Teleport", 13047);
		changeText126("Fight Players Here", 13048);
		changeText126("Training Teleport", 13055);
		changeText126("Become Powerfull Today", 13056);
		changeText126("Skilling Teleport", 13063);
		changeText126("Train Non-Combat Skills Here", 13064);
		changeText126("Monster Teleport", 13071);
		changeText126("Battle Different Monsters", 13072);
		changeText126("MiniGames Teleport", 13081);
		changeText126("Try Out MiniGames", 13082);
		changeText126("Games Teleport", 13089);
		changeText126("Visit The Games", 13090);
		changeText126("God Wars Teleport", 13097);
		changeText126("Kill The Bosses Here", 13098);
		changeText126("The Bank of InnovationX", 5383);
		changeText126("Bank of InnovationX", 14923);
		changeText126("Please enter your PIN using the buttons below.", 14920);
		changeText126("First click the FIRST digit", 15313);
		changeText126("1", 14883);
		changeText126("2", 14884);
		changeText126("3", 14885);
		changeText126("4", 14886);
		changeText126("5", 14887);
		changeText126("6", 14888);
		changeText126("7", 14889);
		changeText126("8", 14890);
		changeText126("9", 14891);
		changeText126("0", 14892);
		changeText126("I don't know it.", 14921);
		changeText126("Exit", 14922);
		changeText126("", 15075);
		changeText126("", 15076);
		changeText126("", 15176);
		changeText126("", 15171);
		changeText126("", 15079);
		changeText126("", 15080);
		if (bankPin != -1) {
			changeText126("@gre@Set", 15105);
		} else {
			changeText126("@red@NONE", 15105);
		}
		changeText126("", 15107);
		changeText126("Set Pin", 15078);
		changeText126("Delete Pin", 15082);
		buildClanInterface();
	}

	public void showDialogue(String line) {
		changeText126(line, 357);
		sendFrame164(356);
	}

	public void Frame171(int id, int type) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(171);
		outStream.writeByte(type);
		outStream.writeWord(id);
	}

	public void Frame70(int id1, int id2, int id3) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(70);
		outStream.writeWord(id1);
		outStream.writeWordBigEndian(id2);
		outStream.writeWordBigEndian(id3);
	}

	public void specialAttackBar() {
		SwordBar();
	}

	public void toggleSpec() {
		UsingSpecial = UsingSpecial ? false : true;
		specialAttackBar();
	}

	public void twoHandBar() {
		setSpec(UsingSpecial);
	}

	public void WhipBar() {
		setSpec(UsingSpecial);
	}

	public void maulBar() {
		setSpec(UsingSpecial);
	}

	public void daggerBar() {
		setSpec(UsingSpecial);
	}

	public void SwordBar() {
		setSpec(UsingSpecial);
	}

	public void BowBar() {
		setSpec(UsingSpecial);
	}

	public void HalberdAndSpearBar() {
		setSpec(UsingSpecial);
	}

	public void AxeBar() {
		setSpec(UsingSpecial);
	}

	public boolean needsSpecBar(int Id) {
		String Name = getItemName(Id);
		Name = Name.replaceAll("_", " ");
		Name = Name.trim();
		if (Name.startsWith("Dragon")) {
			return true;
		}
		if (Id == 805) {
			return true;
		}
		if (Name.endsWith("godsword")) {
			return true;
		} else if (Id == 8922) {
			return true;
		} else if (Id == 7777) {
			return true;
		} else if (Name.equals("Staff of light")) {
			return true;
		} else if (Name.contains("Statius")) {
			return true;
		} else if (Name.contains("Vesta")) {
			return true;
		} else if (Name.equals("Saradomin sword")) {
			return true;
		} else if (Name.equals("Magic longbow")) {
			return true;
		} else if (Name.equals("Magic shortbow")) {
			return true;
		} else if (Name.equals("Dark bow")) {
			return true;
		} else if (Name.equals("Seercull")) {
			return true;
		} else if (Name.equals("Abyssal whip")) {
			return true;
		} else if (Name.equals("Granite maul")) {
			return true;
		} else if (Name.equals("Barrelchest anchor")) {
			return true;
		} else {
			return false;
		}
	}

	public void GetThisBar(int Id) {
		String Name = getItemName(Id);
		Name = Name.replaceAll("_", " ");
		Name = Name.trim();
		if (Id == 4151) {
			WhipBar();
		} else if (Name.endsWith("dagger") || Name.endsWith("dagger(s)")) {
			specialAttackBar();
		} else if (Name.endsWith("godsword") || Name.contains("2h")
				|| Name.equals("Saradomin sword")) {
			twoHandBar();
		} else if (Name.endsWith("sword") || Name.endsWith("longsword")) {
			SwordBar();
		} else if (Name.equals("Granite maul")) {
			maulBar();
		} else if (Name.contains("scimitar")) {
			SwordBar();
		} else if (Name.contains("longbow")) {
			BowBar();
		} else if (Name.contains("shortbow")) {
			BowBar();
		} else if (Name.contains("bow")) {
			BowBar();
		} else if (Name.contains("Seercull")) {
			BowBar();
		} else if (Name.contains("spear")) {
			HalberdAndSpearBar();
		} else if (Name.contains("halberd")) {
			HalberdAndSpearBar();
		} else if (Name.contains("axe")) {
			AxeBar();
		} else if (Name.contains("battleaxe")) {
			AxeBar();
		} else {
			SwordBar();
		}
	}

	public int ReturnPlayerSpecGfx(int Id) {
		if (Id == 5698) {
			return 252;
		} else if (Id == 1305) {
			return 248;
		} else if (Id == 8103) {
			return 465;
		} else if (Id == 7158) {
			return 559;
		} else if (Id == 1434) {
			return 251;
		} else if (Id == 7993) {
			return 620;
		} else if (Id == 8086) {
			return 640;// gorgok1
		} else if (Id == 4587) {
			return 347;
		} else if (Id == 861) {
			return 256;
		} else if (Id == 7958) {
			return 1111;
		} else if (Id == 859) {
			return 250;
		} else if (Id == 6724) {
			return 472;
		} else if (Id == 3204) {
			return 285;
		} else if (Id == 4153) {
			return 340;
		} else if (Id == 1249) {
			return 253;
		} else if (Id == 6739) {
			return 479;
		} else {
			return -1;
		}
	}

	public int ReturnOtherGfx(int Id) {
		if (Id == 4151) {
			return 341;
		} else if (Id == 1249) {
			return 254;
		} else if (Id == 8039) {
			return 631;
		} else if (Id == 8040) {
			return 632;
		} else if (Id == 8087) {
			return 369;
		} else if (Id == 6724) {
			return 474;
		} else {
			return -1;
		}
	}

	public void StartSpecEmote(int Id) {
		if (Id == 5698) {
			startAnimation(1062, 0);
		} else if (Id == 4151) {
			startAnimation(1658, 0);
		} else if (Id == 8103) {
			startAnimation(3496, 0);
		} else if (Id == 7158) {
			startAnimation(3157, 0);
		} else if (Id == 1305) {
			startAnimation(1058, 0);
		} else if (Id == 1434) {
			startAnimation(1060, 0);
		} else if (Id == 4587) {
			startAnimation(1872, 0);
		} else if (Id == 7993) {
			startAnimation(7019, 0);
		} else if (Id == 8907) {
			startAnimation(6502, 0);
		} else if (Id == 8916) {
			startAnimation(6505, 0);
		} else if (Id == 8908) {
			startAnimation(6502, 0);
		} else if (Id == 8922) {
			startAnimation(7009, 0);
		} else if (Id == 8086) {
			startAnimation(7022, 0);
			// startAnimation(1003, 0);
		} else if (Id == 8087) {
			startAnimation(7020, 0);
		} else if (Id == 8039) {
			startAnimation(1335, 0);
		} else if (Id == 8040) {
			startAnimation(7021, 0);
		} else if (Id == 861) {
			startAnimation(1074, 0);
		} else if (Id == 7958) {
			startAnimation(426, 0);
		} else if (Id == 859) {
			startAnimation(426, 0);
		} else if (Id == 6724) {
			startAnimation(426, 0);
		} else if (Id == 4153) {
			startAnimation(1667, 0);
		} else if (Id == 3204) {
			startAnimation(1203, 0);
		} else if (Id == 1249) {
			startAnimation(405, 0);
		} else if (Id == 6739) {
			startAnimation(2876, 0);
		} else if (Id == 805) {
			startAnimation(0x326, 0);
		}
	}

	public int ReturnSpecHeightOther() {
		if (playerEquipment[playerWeapon] == 7993) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1434) {
			return 80;
		} else if (playerEquipment[playerWeapon] == 8087) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 6724) {
			return 0;
		} else {
			return 100;
		}
	}

	public int ReturnSpecHeight() {
		if (playerEquipment[playerWeapon] == 5698) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 8103) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4151) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 7158) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1305) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 7958) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 1434) {
			return 80;
		} else if (playerEquipment[playerWeapon] == 4587) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 861) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 859) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 6724) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 4153) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 3204) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 1249) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 7993) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 8086) {
			return 0;
		} else {
			return 100;
		}
	}

	public int ReturnSpecDelay() {
		if (playerEquipment[playerWeapon] == 5698) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4151) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 7158) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 7958) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1305) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1434) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4587) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 861) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 859) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 6724) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4153) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 3204) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1249) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 8086) {
			return 0;
		} else {
			return 0;
		}
	}

	public int ReturnSpecOtherDelay() {
		if (playerEquipment[playerWeapon] == 5698) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4151) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 7158) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 7993) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 7958) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1305) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1434) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4587) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 861) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 859) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 6724) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 4153) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 3204) {
			return 0;
		} else if (playerEquipment[playerWeapon] == 1249) {
			return 0;
		} else {
			return 0;
		}
	}

	public boolean CheckIfDoubleHitter() {
		if (playerEquipment[playerWeapon] == 5698) {
			return true;
		} else if (playerEquipment[playerWeapon] == 7958) {
			return true;
		} else if (playerEquipment[playerWeapon] == 8039) {
			return true;
		} else if (playerEquipment[playerWeapon] == 861) {
			return true;
		} else if (playerEquipment[playerWeapon] == 3204) {
			NPC npc = Server.s.npcHandler.npcs[attacknpc];
			if (npc == null || npc.size < 2) {
				return false;
			}
			return true;
		} else {
			return false;
		}
	}

	public int SpecDrainAmount() {
		if (playerEquipment[playerWeapon] == 5698) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 4151) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 7958) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 7993) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 8086) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 7777) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 8916) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 8922) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 8907) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 8908) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 7158) {
			return 55;
		} else if (playerEquipment[playerWeapon] == 8103) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 1305) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 1434) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 4587) {
			return 60;
		} else if (playerEquipment[playerWeapon] == 861) {
			return 55;
		} else if (playerEquipment[playerWeapon] == 859) {
			return 35;
		} else if (playerEquipment[playerWeapon] == 6724) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 4153) {
			return 50;
		} else if (playerEquipment[playerWeapon] == 3204) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 1249) {
			return 25;
		} else if (playerEquipment[playerWeapon] == 8039) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 6739) {
			return 100;
		} else if (playerEquipment[playerWeapon] == 805) {
			return 100;
		} else {
			return 50;
		}
	}

	public void deleteEquipment(int slot) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		playerEquipment[slot] = -1;
		playerEquipmentN[slot] = 0;
		outStream.createFrame(34);
		outStream.writeWord(6);
		outStream.writeWord(1688);
		outStream.writeByte(slot);
		outStream.writeWord(0);
		outStream.writeByte(0);
		getBonus();
		if (slot == playerWeapon) {
			UsingSpecial = false;
			HasSecondHit = false;
			SendWeapon(-1, "Unarmed");
			autocastSpell = false;
		}
		setDuelEquipment(-1, 0, slot);
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public int SpecIncreaseDelay = 7;
	public boolean UsingSpecial = false;

	public void Recoil() {
		RecoilRing -= 1;
		if (RecoilRing == 0) {
			deleteEquipment(playerRing);
			sendMessage("Your ring crumbles to dust...");
		}
	}

	public int removeBar(int removeID) {
		if (removeID == 1205 || removeID == 1351 || removeID == 1103
				|| removeID == 1139 || removeID == 819 || removeID == 1277
				|| removeID == 1422 || removeID == 1075 || removeID == 1155
				|| removeID == 39 || removeID == 1321 || removeID == 1337
				|| removeID == 1087 || removeID == 1173 || removeID == 864
				|| removeID == 1291 || removeID == 1375 || removeID == 1117
				|| removeID == 1189 || removeID == 1307 || removeID == 3095
				|| removeID == 4819) {
			return 2349;
		}
		if (removeID == 1203 || removeID == 1349 || removeID == 1420
				|| removeID == 1137 || removeID == 1279 || removeID == 820
				|| removeID == 4820 || removeID == 1323 || removeID == 40
				|| removeID == 1293 || removeID == 1153 || removeID == 863
				|| removeID == 1175 || removeID == 1335 || removeID == 1363
				|| removeID == 1101 || removeID == 4540 || removeID == 1191
				|| removeID == 3096 || removeID == 1309 || removeID == 1067
				|| removeID == 1081 || removeID == 1115) {
			return 2351;
		}
		if (removeID == 1207 || removeID == 3097 || removeID == 1353
				|| removeID == 1424 || removeID == 1141 || removeID == 1281
				|| removeID == 1325 || removeID == 1295 || removeID == 1157
				|| removeID == 1177 || removeID == 1339 || removeID == 1365
				|| removeID == 1105 || removeID == 1193 || removeID == 1069
				|| removeID == 1083 || removeID == 1311 || removeID == 1119
				|| removeID == 1539 || removeID == 821 || removeID == 41
				|| removeID == 2 || removeID == 2370 || removeID == 865
				|| removeID == 4544) {
			return 2353;
		}
		// Mith
		if (removeID == 1209 || removeID == 3099 || removeID == 1355
				|| removeID == 1428 || removeID == 1143 || removeID == 1285
				|| removeID == 1329 || removeID == 1299 || removeID == 1159
				|| removeID == 1181 || removeID == 1343 || removeID == 1369
				|| removeID == 1109 || removeID == 1197 || removeID == 1071
				|| removeID == 1085 || removeID == 1315 || removeID == 1121
				|| removeID == 822 || removeID == 4822 || removeID == 42
				|| removeID == 42 || removeID == 866) {
			return 2359;
		}
		// Addy
		if (removeID == 1211 || removeID == 3100 || removeID == 1430
				|| removeID == 1145 || removeID == 1287 || removeID == 1331
				|| removeID == 1301 || removeID == 1161 || removeID == 1183
				|| removeID == 1371 || removeID == 1111 || removeID == 1073
				|| removeID == 1091 || removeID == 1317 || removeID == 1123
				|| removeID == 823 || removeID == 4823 || removeID == 43
				|| removeID == 867 || removeID == 1199) {
			return 2361;
		}
		// Rune
		if (removeID == 1213 || removeID == 3101 || removeID == 1432
				|| removeID == 1147 || removeID == 1289 || removeID == 1333
				|| removeID == 1303 || removeID == 1163 || removeID == 1185
				|| removeID == 1347 || removeID == 1373 || removeID == 1113
				|| removeID == 1201 || removeID == 1079 || removeID == 1093
				|| removeID == 1319 || removeID == 1127 || removeID == 824
				|| removeID == 4824 || removeID == 44 || removeID == 868) {
			return 2363;
		}
		return 0;
	}

	public int barsNeeded(int slot, int column) {
		if (column == 1119) {
			if (slot == 0 || slot == 1) {
				return 1;
			}
			if (slot == 2 || slot == 3) {
				return 2;
			}
			if (slot == 4) {
				return 3;
			}
		}
		if (column == 1120) {
			if (slot == 0 || slot == 1) {
				return 1;
			}
			if (slot == 2 || slot == 3) {
				return 3;
			}
			if (slot == 4) {
				return 2;
			}
		}
		if (column == 1121) {
			if (slot == 0 || slot == 1 || slot == 2) {
				return 3;
			}
			if (slot == 3) {
				return 5;
			}
			if (slot == 4) {
				return 1;
			}
		}
		if (column == 1122) {
			if (slot == 0 || slot == 4) {
				return 1;
			}
			if (slot == 1 || slot == 2) {
				return 2;
			}
			if (slot == 3) {
				return 3;
			}
		}
		if (column == 1123) {
			if (slot == 0 || slot == 1 || slot == 2 || slot == 3 || slot == 4) {
				return 1;
			}
		}
		return 0;
	}

	public int barsNeeded2(int slot, int column) {
		if (column == 1119) {
			if (slot == 0 || slot == 1) {
				return 5;
			}
			if (slot == 2 || slot == 3) {
				return 10;
			}
			if (slot == 4) {
				return 15;
			}
		}
		if (column == 1120) {
			if (slot == 0 || slot == 1) {
				return 5;
			}
			if (slot == 2 || slot == 3) {
				return 15;
			}
			if (slot == 4) {
				return 10;
			}
		}
		if (column == 1121) {
			if (slot == 0 || slot == 1 || slot == 2) {
				return 15;
			}
			if (slot == 3) {
				return 25;
			}
			if (slot == 4) {
				return 5;
			}
		}
		if (column == 1122) {
			if (slot == 0 || slot == 4) {
				return 5;
			}
			if (slot == 1 || slot == 2) {
				return 10;
			}
			if (slot == 3) {
				return 15;
			}
		}
		if (column == 1123) {
			if (slot == 0 || slot == 1 || slot == 2 || slot == 3 || slot == 4) {
				return 5;
			}
		}
		return 0;
	}

	public int barsNeeded3(int slot, int column) {
		if (column == 1119) {
			if (slot == 0 || slot == 1) {
				return 10;
			}
			if (slot == 2 || slot == 3) {
				return 20;
			}
			if (slot == 4) {
				return 30;
			}
		}
		if (column == 1120) {
			if (slot == 0 || slot == 1) {
				return 10;
			}
			if (slot == 2 || slot == 3) {
				return 30;
			}
			if (slot == 4) {
				return 20;
			}
		}
		if (column == 1121) {
			if (slot == 0 || slot == 1 || slot == 2) {
				return 30;
			}
			if (slot == 3) {
				return 50;
			}
			if (slot == 4) {
				return 10;
			}
		}
		if (column == 1122) {
			if (slot == 0 || slot == 4) {
				return 10;
			}
			if (slot == 1 || slot == 2) {
				return 20;
			}
			if (slot == 3) {
				return 30;
			}
		}
		if (column == 1123) {
			if (slot == 0 || slot == 1 || slot == 2 || slot == 3 || slot == 4) {
				return 10;
			}
		}
		return 0;
	}

	public int smithXP(int barType, int barAmount, int itemId) {
		String itemName = getItemName(itemId);
		itemName = itemName.replaceAll("_", " ");
		itemName = itemName.trim();
		if (barType == 2349) {
			if (itemName.endsWith("dagger")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 13 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("wire")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 13 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 63 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		if (barType == 2351) {
			if (itemName.endsWith("dagger")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 25 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 25 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 125 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		if (barType == 2353) {
			if (itemName.endsWith("dagger")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 38 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 112 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 187 * barAmount;
			} else if (itemName.endsWith("cannonball")) {
				return 26 * barAmount;
			} else if (itemName.endsWith("studs")) {
				return 38 * barAmount;
			} else if (itemName.endsWith("lantern")) {
				return 38 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		if (barType == 2359) {
			if (itemName.endsWith("dagger")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 50 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 50 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 100 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 250 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		if (barType == 2361) {
			if (itemName.endsWith("dagger")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 63 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 63 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 125 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 188 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 313 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		if (barType == 2363) {
			if (itemName.endsWith("dagger")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("axe")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("mace")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("med helm")) {
				return 75 * barAmount;
			} else if (itemName.endsWith(" sword")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("dart tip")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("nails")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("arrowtips")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("scimitar")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("spear")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("longsword")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("full helm")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("knife")) {
				return 75 * barAmount;
			} else if (itemName.endsWith("sq shield")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("warhammer")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("battleaxe")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("chainbody")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("kiteshield")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("claws")) {
				return 150 * barAmount;
			} else if (itemName.endsWith("2h sword")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("plateskirt")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("platelegs")) {
				return 225 * barAmount;
			} else if (itemName.endsWith("platebody")) {
				return 375 * barAmount;
			} else {
				sendMessage("Smith Error: " + itemName);
			}
			return 1;
		}
		return 1;
	}

	public boolean canSmith(int item) {
		if (item == 1205 || item == 1351 && playerLevel[13] >= 1) {
			return true;
		}
		if (item == 1422 && playerLevel[13] >= 2) {
			return true;
		}
		if (item == 1139 && playerLevel[13] >= 3) {
			return true;
		}
		if (item == 1277 || item == 819 && playerLevel[13] >= 4) {
			return true;
		}
		if (item == 1321 || item == 39 && playerLevel[13] >= 5) {
			return true;
		}
		if (item == 1291 && playerLevel[13] >= 6) {
			return true;
		}
		if (item == 1155 || item == 864 && playerLevel[13] >= 7) {
			return true;
		}
		if (item == 1173 && playerLevel[13] >= 8) {
			return true;
		}
		if (item == 1337 && playerLevel[13] >= 9) {
			return true;
		}
		if (item == 1375 && playerLevel[13] >= 10) {
			return true;
		}
		if (item == 1103 && playerLevel[13] >= 11) {
			return true;
		}
		if (item == 1189 && playerLevel[13] >= 12) {
			return true;
		}
		if (item == 3095 && playerLevel[13] >= 13) {
			return true;
		}
		if (item == 1307 && playerLevel[13] >= 14) {
			return true;
		}
		if (item == 1203 && playerLevel[13] >= 15) {
			return true;
		}
		if (item == 1087 || item == 1075 || item == 1349
				&& playerLevel[13] >= 16) {
			return true;
		}
		if (item == 1420 && playerLevel[13] >= 17) {
			return true;
		}
		if (item == 1117 || item == 1137 && playerLevel[13] >= 18) {
			return true;
		}
		if (item == 1279 || item == 820 || item == 4820
				&& playerLevel[13] >= 19) {
			return true;
		}
		if (item == 1323 || item == 40 && playerLevel[13] >= 20) {
			return true;
		}
		if (item == 1293 && playerLevel[13] >= 21) {
			return true;
		}
		if (item == 1153 || item == 863 && playerLevel[13] >= 22) {
			return true;
		}
		if (item == 1175 && playerLevel[13] >= 23) {
			return true;
		}
		if (item == 1335 && playerLevel[13] >= 24) {
			return true;
		}
		if (item == 1363 && playerLevel[13] >= 25) {
			return true;
		}
		if (item == 1101 || item == 4540 && playerLevel[13] >= 26) {
			return true;
		}
		if (item == 1191 && playerLevel[13] >= 27) {
			return true;
		}
		if (item == 3096 && playerLevel[13] >= 28) {
			return true;
		}
		if (item == 1309 && playerLevel[13] >= 29) {
			return true;
		}
		if (item == 1207 && playerLevel[13] >= 30) {
			return true;
		}
		if (item == 1067 || item == 1081 || item == 1353
				&& playerLevel[13] >= 31) {
			return true;
		}
		if (item == 1424 && playerLevel[13] >= 32) {
			return true;
		}
		if (item == 1115 || item == 1141 && playerLevel[13] >= 33) {
			return true;
		}
		if (item == 1281 || item == 1539 || item == 821
				&& playerLevel[13] >= 34) {
			return true;
		}
		if (item == 1325 || item == 41 && playerLevel[13] >= 35) {
			return true;
		}
		if (item == 1295 || item == 2370 && playerLevel[13] >= 36) {
			return true;
		}
		if (item == 1157 || item == 865 && playerLevel[13] >= 37) {
			return true;
		}
		if (item == 1177 && playerLevel[13] >= 38) {
			return true;
		}
		if (item == 1339 && playerLevel[13] >= 39) {
			return true;
		}
		if (item == 1365 && playerLevel[13] >= 40) {
			return true;
		}
		if (item == 1105 && playerLevel[13] >= 41) {
			return true;
		}
		if (item == 1193 && playerLevel[13] >= 42) {
			return true;
		}
		if (item == 3097 && playerLevel[13] >= 43) {
			return true;
		}
		if (item == 1311 && playerLevel[13] >= 44) {
			return true;
		}
		if (item == 1069 || item == 1083 && playerLevel[13] >= 46) {
			return true;
		}
		if (item == 1119 && playerLevel[13] >= 48) {
			return true;
		}
		if (item == 4544 && playerLevel[13] >= 49) {
			return true;
		}
		if (item == 1209 && playerLevel[13] >= 50) {
			return true;
		}
		if (item == 1355 && playerLevel[13] >= 51) {
			return true;
		}
		if (item == 1428 && playerLevel[13] >= 52) {
			return true;
		}
		if (item == 1143 && playerLevel[13] >= 53) {
			return true;
		}
		if (item == 1285 || item == 822 || item == 4822
				&& playerLevel[13] >= 54) {
			return true;
		}
		if (item == 1329 || item == 42 && playerLevel[13] >= 55) {
			return true;
		}
		if (item == 1299 && playerLevel[13] >= 56) {
			return true;
		}
		if (item == 1159 || item == 866 && playerLevel[13] >= 57) {
			return true;
		}
		if (item == 1181 && playerLevel[13] >= 58) {
			return true;
		}
		if (item == 1343 && playerLevel[13] >= 59) {
			return true;
		}
		if (item == 1369 && playerLevel[13] >= 60) {
			return true;
		}
		if (item == 1109 && playerLevel[13] >= 61) {
			return true;
		}
		if (item == 1197 && playerLevel[13] >= 62) {
			return true;
		}
		if (item == 3099 && playerLevel[13] >= 63) {
			return true;
		}
		if (item == 1315 && playerLevel[13] >= 64) {
			return true;
		}
		if (item == 1071 || item == 1085 && playerLevel[13] >= 66) {
			return true;
		}
		if (item == 1121 && playerLevel[13] >= 68) {
			return true;
		}
		if (item == 1211 && playerLevel[13] >= 70) {
			return true;
		}
		if (item == 1430 && playerLevel[13] >= 72) {
			return true;
		}
		if (item == 1145 && playerLevel[13] >= 73) {
			return true;
		}
		if (item == 1287 || item == 823 || item == 4823
				&& playerLevel[13] >= 74) {
			return true;
		}
		if (item == 1331 || item == 43 && playerLevel[13] >= 75) {
			return true;
		}
		if (item == 1301 && playerLevel[13] >= 76) {
			return true;
		}
		if (item == 1161 || item == 867 && playerLevel[13] >= 77) {
			return true;
		}
		if (item == 1183 && playerLevel[13] >= 78) {
			return true;
		}
		if (item == 1371 && playerLevel[13] >= 79) {
			return true;
		}
		if (item == 1111 && playerLevel[13] >= 81) {
			return true;
		}
		if (item == 1199 && playerLevel[13] >= 82) {
			return true;
		}
		if (item == 3100 && playerLevel[13] >= 83) {
			return true;
		}
		if (item == 1317 && playerLevel[13] >= 84) {
			return true;
		}
		if (item == 1213 && playerLevel[13] >= 85) {
			return true;
		}
		if (item == 1073 || item == 1091 || item == 1359
				&& playerLevel[13] >= 86) {
			return true;
		}
		if (item == 1432 && playerLevel[13] >= 87) {
			return true;
		}
		if (item == 1123 || item == 1147 && playerLevel[13] >= 88) {
			return true;
		}
		if (item == 1289 || item == 824 || item == 4824
				&& playerLevel[13] >= 89) {
			return true;
		}
		if (item == 1333 || item == 44 && playerLevel[13] >= 90) {
			return true;
		}
		if (item == 1303 && playerLevel[13] >= 91) {
			return true;
		}
		if (item == 1163 || item == 868 && playerLevel[13] >= 92) {
			return true;
		}
		if (item == 1185 && playerLevel[13] >= 93) {
			return true;
		}
		if (item == 1347 && playerLevel[13] >= 94) {
			return true;
		}
		if (item == 1373 && playerLevel[13] >= 95) {
			return true;
		}
		if (item == 1113 && playerLevel[13] >= 96) {
			return true;
		}
		if (item == 1201 && playerLevel[13] >= 97) {
			return true;
		}
		if (item == 3101 && playerLevel[13] >= 98) {
			return true;
		}
		if (item == 1319 && playerLevel[13] >= 99) {
			return true;
		}
		if (item == 1079 && playerLevel[13] >= 99) {
			return true;
		}
		if (item == 1079 || item == 1093 || item == 1319 || item == 1127
				&& playerLevel[13] >= 99) {
			return true;
		} else {
			return false;
		}
		// return false;
	}

	public void addItemToSmith(int id, int slot, int column, int amount) {
		outStream.createFrameVarSizeWord(34); // init item to smith screen
		outStream.writeWord(column); // Column Across Smith Screen
		outStream.writeByte(4); // Total Rows?
		outStream.writeDWord(slot); // Row Down The Smith Screen
		outStream.writeWord(id + 1); // item
		outStream.writeByte(amount); // how many there are?
		outStream.endFrameVarSizeWord();

	}

	public void initSmithing(int barType) {
		outStream.createFrame(97);
		outStream.writeWord(994);
		if (InvItemAmt(barType) < 5) {
			changeText126("@red@5bars@red@", 1112);
		} else {
			changeText126("@gre@5bars@gre@", 1112);
		}
		if (InvItemAmt(barType) < 3) {
			changeText126("@red@3bars@red@", 1109);
			changeText126("@red@3bars@red@", 1110);
			changeText126("@red@3bars@red@", 1118);
			changeText126("@red@3bars@red@", 1111);
			changeText126("@red@3bars@red@", 1095);
			changeText126("@red@3bars@red@", 1115);
			changeText126("@red@3bars@red@", 1090);
		} else {
			changeText126("@gre@3bars@gre@", 1109);
			changeText126("@gre@3bars@gre@", 1110);
			changeText126("@gre@3bars@gre@", 1118);
			changeText126("@gre@3bars@gre@", 1111);
			changeText126("@gre@3bars@gre@", 1095);
			changeText126("@gre@3bars@gre@", 1115);
			changeText126("@gre@3bars@gre@", 1090);
		}
		if (InvItemAmt(barType) < 2) {
			changeText126("@red@2bars@red@", 1113);
			changeText126("@red@2bars@red@", 1116);
			changeText126("@red@2bars@red@", 1114);
			changeText126("@red@2bars@red@", 1089);
			changeText126("@red@2bars@red@", 8428);
		} else {
			changeText126("@gre@2bars@gre@", 1113);
			changeText126("@gre@2bars@gre@", 1116);
			changeText126("@gre@2bars@gre@", 1114);
			changeText126("@gre@2bars@gre@", 1089);
			changeText126("@gre@2bars@gre@", 8428);
		}
		if (InvItemAmt(barType) < 1) {
			changeText126("@red@1bar@red@", 1125);
			changeText126("@red@1bar@red@", 1126);
			changeText126("@red@1bar@red@", 1127);
			changeText126("@red@1bar@red@", 1124);
			changeText126("@red@1bar@red@", 1128);
			changeText126("@red@1bar@red@", 1129);
			changeText126("@red@1bar@red@", 1130);
			changeText126("@red@1bar@red@", 13357);
			changeText126("@red@1bar@red@", 1131);
			changeText126("@red@1bar@red@", 11459);
		} else {
			changeText126("@gre@1bar@gre@", 1125);
			changeText126("@gre@1bar@gre@", 1126);
			changeText126("@gre@1bar@gre@", 1127);
			changeText126("@gre@1bar@gre@", 1124);
			changeText126("@gre@1bar@gre@", 1128);
			changeText126("@gre@1bar@gre@", 1129);
			changeText126("@gre@1bar@gre@", 1130);
			changeText126("@gre@1bar@gre@", 13357);
			changeText126("@gre@1bar@gre@", 1131);
			changeText126("@gre@1bar@gre@", 11459);
		}
		if (barType == 2349) { // Bronze
			if (playerLevel[13] < 18) {
				changeText126("@bla@Plate body@bla@", 1101);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
			}
			if (playerLevel[13] < 16) {
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
			} else {
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
			}
			if (playerLevel[13] < 14) {
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 13) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 12) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 11) {
				changeText126("@bla@Chain body@bla@", 1098);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
			}
			if (playerLevel[13] < 10) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 9) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 8) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 7) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 6) {
				changeText126("@bla@Long sword@bla@", 1086);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
			}
			if (playerLevel[13] < 5) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 4) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 3) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 2) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 1) {
				changeText126("@bla@Dagger@bla@", 1094);
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
				changeText126("@whi@Axe@whi@", 1091);
			}
			addItemToSmith(1205, 0, 1119, 1);
			addItemToSmith(1351, 0, 1120, 1);
			addItemToSmith(1103, 0, 1121, 1);
			addItemToSmith(1139, 0, 1122, 1);
			addItemToSmith(819, 0, 1123, 10);
			addItemToSmith(1277, 1, 1119, 1);
			addItemToSmith(1422, 1, 1120, 1);
			addItemToSmith(1075, 1, 1121, 1);
			addItemToSmith(1155, 1, 1122, 1);
			addItemToSmith(39, 1, 1123, 15);
			addItemToSmith(1321, 2, 1119, 1);
			addItemToSmith(1337, 2, 1120, 1);
			addItemToSmith(1087, 2, 1121, 1);
			addItemToSmith(1173, 2, 1122, 1);
			addItemToSmith(864, 2, 1123, 5);
			addItemToSmith(1291, 3, 1119, 1);
			addItemToSmith(1375, 3, 1120, 1);
			addItemToSmith(1117, 3, 1121, 1);
			addItemToSmith(1189, 3, 1122, 1);
			// addItemToSmith(0,3,1123);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1307, 4, 1119, 1);
			addItemToSmith(3095, 4, 1120, 1);
			// addItemToSmith(1307,4,1121);
			changeText126("", 11459);
			changeText126("", 11461);
			addItemToSmith(4819, 4, 1122, 1);
			// addItemToSmith(1307,4,1123);
			changeText126("", 1135);
			changeText126("", 1134);
		}
		if (barType == 2351) { // Iron
			if (playerLevel[13] < 33) {
				changeText126("@bla@Plate body@bla@", 1101);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
			}
			if (playerLevel[13] < 31) {
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
			} else {
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
			}
			if (playerLevel[13] < 29) {
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 28) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 27) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 26) {
				changeText126("@bla@Chain body@bla@", 1098);
				changeText126("@bla@Oil lantern frame@bla@", 11461);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
				changeText126("@whi@Oil lantern frame@whi@", 11461);
			}
			if (playerLevel[13] < 25) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 24) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 23) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 22) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 21) {
				changeText126("@bla@Long sword@bla@", 1086);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
			}
			if (playerLevel[13] < 20) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 19) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 18) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 17) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 16) {
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Axe@whi@", 1091);
			}
			if (playerLevel[13] < 15) {
				changeText126("@bla@Dagger@bla@", 1094);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
			}
			addItemToSmith(1203, 0, 1119, 1);
			addItemToSmith(1349, 0, 1120, 1);
			addItemToSmith(1101, 0, 1121, 1);
			addItemToSmith(1137, 0, 1122, 1);
			addItemToSmith(820, 0, 1123, 10);
			addItemToSmith(1279, 1, 1119, 1);
			addItemToSmith(1420, 1, 1120, 1);
			addItemToSmith(1067, 1, 1121, 1);
			addItemToSmith(1153, 1, 1122, 1);
			addItemToSmith(40, 1, 1123, 15);
			addItemToSmith(1323, 2, 1119, 1);
			addItemToSmith(1335, 2, 1120, 1);
			addItemToSmith(1081, 2, 1121, 1);
			addItemToSmith(1175, 2, 1122, 1);
			addItemToSmith(863, 2, 1123, 5);
			addItemToSmith(1293, 3, 1119, 1);
			addItemToSmith(1363, 3, 1120, 1);
			addItemToSmith(1115, 3, 1121, 1);
			addItemToSmith(1191, 3, 1122, 1);
			// addItemToSmith(0,3,1123);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1309, 4, 1119, 1);
			addItemToSmith(3096, 4, 1120, 1);
			addItemToSmith(4540, 4, 1121, 1);
			addItemToSmith(4820, 4, 1122, 1);
			// addItemToSmith(1307,4,1123);
			changeText126("", 1135);
			changeText126("", 1134);
		}
		if (barType == 2353) { // Steel
			if (playerLevel[13] < 49) {
				changeText126("@bla@Bullseye lantern@bla@", 11461);
			} else {
				changeText126("@whi@Bullseye lantern@whi@", 11461);
			}
			if (playerLevel[13] < 48) {
				changeText126("@bla@Plate body@bla@", 1101);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
			}
			if (playerLevel[13] < 46) {
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
			} else {
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
			}
			if (playerLevel[13] < 44) {
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 43) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 42) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 41) {
				changeText126("@bla@Chain body@bla@", 1098);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
			}
			if (playerLevel[13] < 40) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 39) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 38) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 37) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 36) {
				changeText126("@bla@Long sword@bla@", 1086);
				changeText126("@bla@Studs@bla@", 1134);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
				changeText126("@whi@Studs@whi@", 1134);
			}
			if (playerLevel[13] < 35) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 34) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 33) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 32) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 31) {
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Axe@whi@", 1091);
			}
			if (playerLevel[13] < 30) {
				changeText126("@bla@Dagger@bla@", 1094);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
			}
			addItemToSmith(1207, 0, 1119, 1);
			addItemToSmith(1353, 0, 1120, 1);
			addItemToSmith(1105, 0, 1121, 1);
			addItemToSmith(1141, 0, 1122, 1);
			addItemToSmith(821, 0, 1123, 10);
			addItemToSmith(1281, 1, 1119, 1);
			addItemToSmith(1424, 1, 1120, 1);
			addItemToSmith(1069, 1, 1121, 1);
			addItemToSmith(1157, 1, 1122, 1);
			addItemToSmith(41, 1, 1123, 15);
			addItemToSmith(1325, 2, 1119, 1);
			addItemToSmith(1339, 2, 1120, 1);
			addItemToSmith(1083, 2, 1121, 1);
			addItemToSmith(1177, 2, 1122, 1);
			addItemToSmith(865, 2, 1123, 5);
			addItemToSmith(1295, 3, 1119, 1);
			addItemToSmith(1365, 3, 1120, 1);
			addItemToSmith(1119, 3, 1121, 1);
			addItemToSmith(1193, 3, 1122, 1);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1311, 4, 1119, 1);
			addItemToSmith(3097, 4, 1120, 1);
			addItemToSmith(4544, 4, 1121, 1);
			addItemToSmith(1539, 4, 1122, 1);
			addItemToSmith(2370, 4, 1123, 1);
			if (InvItemAmt(barType) < 1) {
				changeText126("@red@1bar@red@", 1135);
			} else {
				changeText126("@gre@1bar@gre@", 1135);
			}
		}
		if (barType == 2359) { // Mith
			if (playerLevel[13] < 68) {
				changeText126("@bla@Plate body@bla@", 1101);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
			}
			if (playerLevel[13] < 66) {
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
			} else {
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
			}
			if (playerLevel[13] < 64) {
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 63) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 62) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 61) {
				changeText126("@bla@Chain body@bla@", 1098);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
			}
			if (playerLevel[13] < 60) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 59) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 58) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 57) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 56) {
				changeText126("@bla@Long sword@bla@", 1086);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
			}
			if (playerLevel[13] < 55) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 54) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 53) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 52) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 51) {
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Axe@whi@", 1091);
			}
			if (playerLevel[13] < 50) {
				changeText126("@bla@Dagger@bla@", 1094);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
			}
			addItemToSmith(1209, 0, 1119, 1);
			addItemToSmith(1355, 0, 1120, 1);
			addItemToSmith(1109, 0, 1121, 1);
			addItemToSmith(1143, 0, 1122, 1);
			addItemToSmith(822, 0, 1123, 10);
			addItemToSmith(1285, 1, 1119, 1);
			addItemToSmith(1355, 1, 1120, 1);
			addItemToSmith(1071, 1, 1121, 1);
			addItemToSmith(1159, 1, 1122, 1);
			addItemToSmith(42, 1, 1123, 15);
			addItemToSmith(1329, 2, 1119, 1);
			addItemToSmith(1343, 2, 1120, 1);
			addItemToSmith(1085, 2, 1121, 1);
			addItemToSmith(1181, 2, 1122, 1);
			addItemToSmith(866, 2, 1123, 5);
			addItemToSmith(1299, 3, 1119, 1);
			addItemToSmith(1369, 3, 1120, 1);
			addItemToSmith(1121, 3, 1121, 1);
			addItemToSmith(1197, 3, 1122, 1);
			// addItemToSmith(0,3,1123);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1315, 4, 1119, 1);
			addItemToSmith(3099, 4, 1120, 1);
			// addItemToSmith(4540,4,1121,1);
			addItemToSmith(4822, 4, 1122, 1);
			// addItemToSmith(1307,4,1123);
			changeText126("", 1135);
			changeText126("", 1134);
			changeText126("", 11461);
			changeText126("", 11459);
		}
		if (barType == 2361) { // Addy
			if (playerLevel[13] < 88) {
				changeText126("@bla@Plate body@bla@", 1101);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
			}
			if (playerLevel[13] < 86) {
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
			} else {
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
			}
			if (playerLevel[13] < 84) {
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 83) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 82) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 81) {
				changeText126("@bla@Chain body@bla@", 1098);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
			}
			if (playerLevel[13] < 80) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 79) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 78) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 77) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 76) {
				changeText126("@bla@Long sword@bla@", 1086);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
			}
			if (playerLevel[13] < 75) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 74) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 73) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 72) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 71) {
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Axe@whi@", 1091);
			}
			if (playerLevel[13] < 70) {
				changeText126("@bla@Dagger@bla@", 1094);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
			}
			addItemToSmith(1211, 0, 1119, 1);
			addItemToSmith(1357, 0, 1120, 1);
			addItemToSmith(1111, 0, 1121, 1);
			addItemToSmith(1145, 0, 1122, 1);
			addItemToSmith(823, 0, 1123, 10);
			addItemToSmith(1287, 1, 1119, 1);
			addItemToSmith(1430, 1, 1120, 1);
			addItemToSmith(1073, 1, 1121, 1);
			addItemToSmith(1161, 1, 1122, 1);
			addItemToSmith(43, 1, 1123, 15);
			addItemToSmith(1331, 2, 1119, 1);
			addItemToSmith(1345, 2, 1120, 1);
			addItemToSmith(1091, 2, 1121, 1);
			addItemToSmith(1183, 2, 1122, 1);
			addItemToSmith(867, 2, 1123, 5);
			addItemToSmith(1301, 3, 1119, 1);
			addItemToSmith(1371, 3, 1120, 1);
			addItemToSmith(1123, 3, 1121, 1);
			addItemToSmith(1199, 3, 1122, 1);
			// addItemToSmith(0,3,1123);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1317, 4, 1119, 1);
			addItemToSmith(3100, 4, 1120, 1);
			// addItemToSmith(4540,4,1121,1);
			addItemToSmith(4823, 4, 1122, 1);
			// addItemToSmith(1307,4,1123);
			changeText126("", 1135);
			changeText126("", 1134);
			changeText126("", 11461);
			changeText126("", 11459);
		}
		if (barType == 2363) { // Rune
			if (playerLevel[13] < 99) {
				changeText126("@bla@Plate body@bla@", 1101);
				changeText126("@bla@Plate legs@bla@", 1099);
				changeText126("@bla@Plate skirt@bla@", 1100);
				changeText126("@bla@2 hand sword@bla@", 1088);
			} else {
				changeText126("@whi@Plate body@whi@", 1101);
				changeText126("@whi@Plate legs@whi@", 1099);
				changeText126("@whi@Plate skirt@whi@", 1100);
				changeText126("@whi@2 hand sword@whi@", 1088);
			}
			if (playerLevel[13] < 98) {
				changeText126("@bla@Claws@bla@", 8429);
			} else {
				changeText126("@whi@Claws@whi@", 8429);
			}
			if (playerLevel[13] < 97) {
				changeText126("@bla@Kite shield@bla@", 1105);
			} else {
				changeText126("@whi@Kite shield@whi@", 1105);
			}
			if (playerLevel[13] < 96) {
				changeText126("@bla@Chain body@bla@", 1098);
			} else {
				changeText126("@whi@Chain body@whi@", 1098);
			}
			if (playerLevel[13] < 95) {
				changeText126("@bla@Battle axe@bla@", 1092);
			} else {
				changeText126("@whi@Battle axe@whi@", 1092);
			}
			if (playerLevel[13] < 94) {
				changeText126("@bla@Warhammer@bla@", 1083);
			} else {
				changeText126("@whi@Warhammer@whi@", 1083);
			}
			if (playerLevel[13] < 93) {
				changeText126("@bla@Square shield@bla@", 1104);
			} else {
				changeText126("@whi@Square shield@whi@", 1104);
			}
			if (playerLevel[13] < 92) {
				changeText126("@bla@Full helm@bla@", 1103);
				changeText126("@bla@Throwing knives@bla@", 1106);
			} else {
				changeText126("@whi@Full helm@whi@", 1103);
				changeText126("@whi@Throwing knives@whi@", 1106);
			}
			if (playerLevel[13] < 91) {
				changeText126("@bla@Long sword@bla@", 1086);
			} else {
				changeText126("@whi@Long sword@whi@", 1086);
			}
			if (playerLevel[13] < 90) {
				changeText126("@bla@Scimitar@bla@", 1087);
				changeText126("@bla@Arrowtips@bla@", 1108);
			} else {
				changeText126("@whi@Scimitar@whi@", 1087);
				changeText126("@whi@Arrowtips@whi@", 1108);
			}
			if (playerLevel[13] < 89) {
				changeText126("@bla@Sword@bla@", 1085);
				changeText126("@bla@Dart tips@bla@", 1107);
				changeText126("@bla@Nails@bla@", 13358);
			} else {
				changeText126("@whi@Sword@whi@", 1085);
				changeText126("@whi@Dart tips@whi@", 1107);
				changeText126("@whi@Nails@whi@", 13358);
			}
			if (playerLevel[13] < 88) {
				changeText126("@bla@Medium helm@bla@", 1102);
			} else {
				changeText126("@whi@Medium helm@whi@", 1102);
			}
			if (playerLevel[13] < 87) {
				changeText126("@bla@Mace@bla@", 1093);
			} else {
				changeText126("@whi@Mace@whi@", 1093);
			}
			if (playerLevel[13] < 86) {
				changeText126("@bla@Axe@bla@", 1091);
			} else {
				changeText126("@whi@Axe@whi@", 1091);
			}
			if (playerLevel[13] < 85) {
				changeText126("@bla@Dagger@bla@", 1094);
			} else {
				changeText126("@whi@Dagger@whi@", 1094);
			}
			addItemToSmith(1213, 0, 1119, 1);
			addItemToSmith(1359, 0, 1120, 1);
			addItemToSmith(1113, 0, 1121, 1);
			addItemToSmith(1147, 0, 1122, 1);
			addItemToSmith(824, 0, 1123, 10);
			addItemToSmith(1289, 1, 1119, 1);
			addItemToSmith(1432, 1, 1120, 1);
			addItemToSmith(1079, 1, 1121, 1);
			addItemToSmith(1163, 1, 1122, 1);
			addItemToSmith(44, 1, 1123, 15);
			addItemToSmith(1333, 2, 1119, 1);
			addItemToSmith(1347, 2, 1120, 1);
			addItemToSmith(1093, 2, 1121, 1);
			addItemToSmith(1185, 2, 1122, 1);
			addItemToSmith(868, 2, 1123, 5);
			addItemToSmith(1303, 3, 1119, 1);
			addItemToSmith(1373, 3, 1120, 1);
			addItemToSmith(1127, 3, 1121, 1);
			addItemToSmith(1201, 3, 1122, 1);
			// addItemToSmith(0,3,1123);
			changeText126("", 1132);
			changeText126("", 1096);
			addItemToSmith(1319, 4, 1119, 1);
			addItemToSmith(3101, 4, 1120, 1);
			// addItemToSmith(4540,4,1121,1);
			addItemToSmith(4824, 4, 1122, 1);
			// addItemToSmith(1307,4,1123);
			changeText126("", 1135);
			changeText126("", 1134);
			changeText126("", 11461);
			changeText126("", 11459);
		}
	}

	public void tanHide(int itemId, int amount) {
		RemoveAllWindows();
		switch (itemId) {
		case 1741:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 1000 && InvItemAmt(1739) >= 1) {
						deleteItem(1739, GetItemSlot(1739), 1);
						deleteItem(995, GetItemSlot(995), 1000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1743:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 1000 && InvItemAmt(1739) >= 1) {
						deleteItem(1739, GetItemSlot(1739), 1);
						deleteItem(995, GetItemSlot(995), 1000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1745:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 5000 && InvItemAmt(1753) >= 1) {
						deleteItem(1753, GetItemSlot(1753), 1);
						deleteItem(995, GetItemSlot(995), 2000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2505:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 5000 && InvItemAmt(1751) >= 1) {
						deleteItem(1751, GetItemSlot(1751), 1);
						deleteItem(995, GetItemSlot(995), 2000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2507:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 5000 && InvItemAmt(1749) >= 1) {
						deleteItem(1749, GetItemSlot(1749), 1);
						deleteItem(995, GetItemSlot(995), 2000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2509:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 5000 && InvItemAmt(1747) >= 1) {
						deleteItem(1747, GetItemSlot(1747), 1);
						deleteItem(995, GetItemSlot(995), 2000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs more items!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 8080:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(995) >= 10000 && InvItemAmt(1747) >= 1
							&& InvItemAmt(2893) >= 1 && InvItemAmt(1739) >= 3) {
						deleteItem(1747, GetItemSlot(1747), 1);
						deleteItem(2893, GetItemSlot(2893), 1);
						deleteItem(1739, GetItemSlot(1739), 3);
						deleteItem(995, GetItemSlot(995), 10000);
						addItem(itemId, 1);
						amount--;
					} else {
						sendMessage("The tanner needs 1 black dragonhide, 1 Lunar metal, and 3 cowhides to make this.");
						break;
					}
				} else {
					break;
				}
			}
			break;
		}
	}

	public void craftJewel(int itemId, int amount) {
		RemoveAllWindows();
		startAnimation(899, 0);
		switch (itemId) {
		case 1635:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1) {
						if (playerLevel[12] >= 1) {
							deleteItem(2357, GetItemSlot(2357), 1);
							addItem(itemId, 1);
							addSkillXP(15 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 1 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1637:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1607) >= 1) {
						if (playerLevel[12] >= 20) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1607, GetItemSlot(1607), 1);
							addItem(itemId, 1);
							addSkillXP(40 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 20 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1639:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1605) >= 1) {
						if (playerLevel[12] >= 27) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1605, GetItemSlot(1605), 1);
							addItem(itemId, 1);
							addSkillXP(55 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 27 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1641:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1603) >= 1) {
						if (playerLevel[12] >= 34) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1603, GetItemSlot(1603), 1);
							addItem(itemId, 1);
							addSkillXP(70 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 34 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1643:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1602) >= 1) {
						if (playerLevel[12] >= 43) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1602, GetItemSlot(1602), 1);
							addItem(itemId, 1);
							addSkillXP(85 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 43 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1645:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1592) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1615) >= 1) {
						if (playerLevel[12] >= 55) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1615, GetItemSlot(1615), 1);
							addItem(itemId, 1);
							addSkillXP(100 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 55 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1654:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1) {
						if (playerLevel[12] >= 6) {
							deleteItem(2357, GetItemSlot(2357), 1);
							addItem(itemId, 1);
							addSkillXP(20 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 6 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1656:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1607) >= 1) {
						if (playerLevel[12] >= 22) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1607, GetItemSlot(1607), 1);
							addItem(itemId, 1);
							addSkillXP(55 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 22 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1658:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1605) >= 1) {
						if (playerLevel[12] >= 29) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1605, GetItemSlot(1605), 1);
							addItem(itemId, 1);
							addSkillXP(60 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 29 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1660:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1603) >= 1) {
						if (playerLevel[12] >= 40) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1603, GetItemSlot(1603), 1);
							addItem(itemId, 1);
							addSkillXP(75 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 40 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1662:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1602) >= 1) {
						if (playerLevel[12] >= 56) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1602, GetItemSlot(1602), 1);
							addItem(itemId, 1);
							addSkillXP(90 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 56 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1664:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1597) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1615) >= 1) {
						if (playerLevel[12] >= 72) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1615, GetItemSlot(1615), 1);
							addItem(itemId, 1);
							addSkillXP(105 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 72 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1673:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1) {
						if (playerLevel[12] >= 8) {
							deleteItem(2357, GetItemSlot(2357), 1);
							addItem(itemId, 1);
							addSkillXP(30 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 8 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1675:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1607) >= 1) {
						if (playerLevel[12] >= 24) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1607, GetItemSlot(1607), 1);
							addItem(itemId, 1);
							addSkillXP(65 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 24 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1677:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1605) >= 1) {
						if (playerLevel[12] >= 31) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1605, GetItemSlot(1605), 1);
							addItem(itemId, 1);
							addSkillXP(70 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 31 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1679:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1603) >= 1) {
						if (playerLevel[12] >= 50) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1603, GetItemSlot(1603), 1);
							addItem(itemId, 1);
							addSkillXP(85 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 50 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1681:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1602) >= 1) {
						if (playerLevel[12] >= 70) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1602, GetItemSlot(1602), 1);
							addItem(itemId, 1);
							addSkillXP(100 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 70 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 1683:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(1595) >= 1 && InvItemAmt(2357) >= 1
							&& InvItemAmt(1615) >= 1) {
						if (playerLevel[12] >= 80) {
							deleteItem(2357, GetItemSlot(2357), 1);
							deleteItem(1615, GetItemSlot(1615), 1);
							addItem(itemId, 1);
							addSkillXP(150 * craftXpInc, 12);
							amount--;
						} else {
							sendMessage("You need atleast 80 Crafting to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough items to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		}
	}

	public void smeltItem(int itemId, int amount) {
		RemoveAllWindows();
		startAnimation(899, 0);
		switch (itemId) {
		case 2349:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(436) >= 1 && InvItemAmt(438) >= 1) {
						if (playerLevel[13] >= 1) {
							deleteItem(436, GetItemSlot(436), 1);
							deleteItem(438, GetItemSlot(438), 1);
							addItem(itemId, 1);
							addSkillXP(6 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 1 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2351:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(440) >= 1) {
						if (playerLevel[13] >= 15) {
							if (playerEquipment[playerRing] == 2568
									|| Misc.random(100) <= 50) {
								if (playerEquipment[playerRing] == 2568) {
									forgeRing--;
									if (forgeRing == 0) {
										forgeRing = 280;
										deleteEquipment(playerRing);
										sendMessage("Your ring crumbles to dust...");
									}
								}
								addItem(itemId, 1);
							}
							deleteItem(440, GetItemSlot(440), 1);
							addSkillXP(12 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 15 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2353:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(440) >= 1 && InvItemAmt(453) >= 2) {
						if (playerLevel[13] >= 30) {
							deleteItem(440, GetItemSlot(440), 1);
							deleteItem(453, GetItemSlot(453), 2);
							addItem(itemId, 1);
							addSkillXP(17 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 30 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2357:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(444) >= 1) {
						if (playerLevel[13] >= 40) {
							deleteItem(444, GetItemSlot(444), 1);
							addItem(itemId, 1);
							addSkillXP(23 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 40 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2359:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(447) >= 1 && InvItemAmt(453) >= 4) {
						if (playerLevel[13] >= 50) {
							deleteItem(447, GetItemSlot(447), 1);
							deleteItem(453, GetItemSlot(453), 4);
							addItem(itemId, 1);
							addSkillXP(30 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 50 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2361:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(449) >= 1 && InvItemAmt(453) >= 6) {
						if (playerLevel[13] >= 70) {
							deleteItem(449, GetItemSlot(449), 1);
							deleteItem(453, GetItemSlot(453), 6);
							addItem(itemId, 1);
							addSkillXP(37 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 70 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		case 2363:
			for (int i = 0; i < 28; i++) {
				if (amount > 0) {
					if (InvItemAmt(451) >= 1 && InvItemAmt(453) >= 8) {
						if (playerLevel[13] >= 85) {
							deleteItem(451, GetItemSlot(451), 1);
							deleteItem(453, GetItemSlot(453), 8);
							addItem(itemId, 1);
							addSkillXP(50 * smithXpInc, 13);
							amount--;
						} else {
							sendMessage("You need atleast 85 Smithing to make this!");
							break;
						}
					} else {
						sendMessage("You don't have enough ores to make this!");
						break;
					}
				} else {
					break;
				}
			}
			break;
		}
	}

	public boolean isCrafting = false;
	public int craftType = 0;
	public int craftDelAmt = 0;
	public int craftDelay = 0;
	public int leatherId = 0;
	public boolean dHideCraft = false;

	public void craftMenu(int itmUsed, int usedWith) {
		if (itmUsed == 1733) {
			objectId = usedWith;
		} else if (usedWith == 1733) {
			objectId = itmUsed;
		}
		switch (objectId) {
		case 1741:
			showInterface(2311);
			break;
		case 1745:
			leatherId = 1745;
			dHideCraft = true;
			displayItem246(8883, 250, 1099);
			displayItem246(8884, 200, 1065);
			displayItem246(8885, 200, 1135);
			changeText126("Dragonhide Chaps", 8897);
			changeText126("Dragonhide Vambs", 8893);
			changeText126("Dragonhide Body", 8889);
			sendFrame164(8880);
			break;
		case 2505:
			leatherId = 2505;
			dHideCraft = true;
			displayItem246(8883, 250, 2493);
			displayItem246(8884, 200, 2487);
			displayItem246(8885, 200, 2499);
			changeText126("Dragonhide Chaps", 8897);
			changeText126("Dragonhide Vambs", 8893);
			changeText126("Dragonhide Body", 8889);
			sendFrame164(8880);
			break;
		case 2507:
			leatherId = 2507;
			dHideCraft = true;
			displayItem246(8883, 250, 2495);
			displayItem246(8884, 200, 2489);
			displayItem246(8885, 200, 2501);
			changeText126("Dragonhide Chaps", 8897);
			changeText126("Dragonhide Vambs", 8893);
			changeText126("Dragonhide Body", 8889);
			sendFrame164(8880);
			break;
		case 2509:
			leatherId = 2509;
			dHideCraft = true;
			displayItem246(8883, 250, 2497);
			displayItem246(8884, 200, 2491);
			displayItem246(8885, 200, 2503);
			changeText126("Dragonhide Chaps", 8897);
			changeText126("Dragonhide Vambs", 8893);
			changeText126("Dragonhide Body", 8889);
			sendFrame164(8880);
			break;
		}
	}

	public void craftItem() {
		RemoveAllWindows();
		if (InvItemAmt(leatherId) < craftDelAmt) {
			craftDelAmt = InvItemAmt(leatherId);
		}
		if (craftDelAmt <= 0 || InvItemAmt(leatherId) <= 0 || !isCrafting) {
			isCrafting = false;
			craftDelAmt = 0;
			return;
		}
		craftDelay = 5;
		craftDelAmt--;
		switch (objectId) {
		case 1059:
			if (getLevelForXP(playerXP[12]) >= 1) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1059, 1);
					addSkillXP(14 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 1 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1061:
			if (getLevelForXP(playerXP[12]) >= 7) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1061, 1);
					addSkillXP(16 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 7 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1167:
			if (getLevelForXP(playerXP[12]) >= 9) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1167, 1);
					addSkillXP(18 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 9 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1063:
			if (getLevelForXP(playerXP[12]) >= 11) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1063, 1);
					addSkillXP(22 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 11 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1129:
			if (getLevelForXP(playerXP[12]) >= 14) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1129, 1);
					addSkillXP(27 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 14 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1095:
			if (getLevelForXP(playerXP[12]) >= 18) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1095, 1);
					addSkillXP(27 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 18 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1169:
			if (getLevelForXP(playerXP[12]) >= 38) {
				if (InvItemAmt(1734) > 0) {
					startAnimation(891, 0);
					deleteItem(1741, GetItemSlot(1741), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1169, 1);
					addSkillXP(37 * craftXpInc, 12);
				} else {
					sendMessage("You need thread to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 38 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1099:
			if (getLevelForXP(playerXP[12]) >= 60) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(1745) > 1) {
					startAnimation(891, 0);
					deleteItem(1745, GetItemSlot(1745), 2);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1099, 1);
					addSkillXP(124 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 60 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1135:
			if (getLevelForXP(playerXP[12]) >= 63) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(1745) > 2) {
					startAnimation(891, 0);
					deleteItem(1745, GetItemSlot(1745), 3);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1135, 1);
					addSkillXP(186 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 63 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 1065:
			if (getLevelForXP(playerXP[12]) >= 57) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(1745) > 0) {
					startAnimation(891, 0);
					deleteItem(1745, GetItemSlot(1745), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(1065, 1);
					addSkillXP(62 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 57 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2493:
			if (getLevelForXP(playerXP[12]) >= 68) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2505) > 1) {
					startAnimation(891, 0);
					deleteItem(2505, GetItemSlot(2505), 2);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2493, 1);
					addSkillXP(140 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 68 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2499:
			if (getLevelForXP(playerXP[12]) >= 71) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2505) > 2) {
					startAnimation(891, 0);
					deleteItem(2505, GetItemSlot(2505), 3);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2499, 1);
					addSkillXP(210 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 71 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2487:
			if (getLevelForXP(playerXP[12]) >= 66) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2505) > 0) {
					startAnimation(891, 0);
					deleteItem(2505, GetItemSlot(2505), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2487, 1);
					addSkillXP(70 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 66 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2495:
			if (getLevelForXP(playerXP[12]) >= 75) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2507) > 1) {
					startAnimation(891, 0);
					deleteItem(2507, GetItemSlot(2507), 2);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2495, 1);
					addSkillXP(156 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 75 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2501:
			if (getLevelForXP(playerXP[12]) >= 77) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2507) > 2) {
					startAnimation(891, 0);
					deleteItem(2507, GetItemSlot(2507), 3);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2501, 1);
					addSkillXP(234 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 77 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2489:
			if (getLevelForXP(playerXP[12]) >= 73) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2507) > 0) {
					startAnimation(891, 0);
					deleteItem(2507, GetItemSlot(2507), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2489, 1);
					addSkillXP(78 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 73 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2497:
			if (isMember == 0) {
				sendMessage("This feature is premium only.");
				break;
			}
			if (getLevelForXP(playerXP[12]) >= 82) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2509) > 1) {
					startAnimation(891, 0);
					deleteItem(2509, GetItemSlot(2509), 2);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2497, 1);
					addSkillXP(172 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 82 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2503:
			if (isMember == 0) {
				sendMessage("This feature is premium only.");
				break;
			}
			if (getLevelForXP(playerXP[12]) >= 84) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2509) > 2) {
					startAnimation(891, 0);
					deleteItem(2509, GetItemSlot(2509), 3);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2503, 1);
					addSkillXP(258 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 84 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		case 2491:
			if (isMember == 0) {
				sendMessage("This feature is premium only.");
				break;
			}
			if (getLevelForXP(playerXP[12]) >= 79) {
				if (InvItemAmt(1734) > 0 || InvItemAmt(2509) > 0) {
					startAnimation(891, 0);
					deleteItem(2509, GetItemSlot(2509), 1);
					deleteItem(1734, GetItemSlot(1734), 1);
					addItem(2491, 1);
					addSkillXP(86 * craftXpInc, 12);
				} else {
					sendMessage("You need more items to make this!");
					isCrafting = false;
					craftDelAmt = 0;
					break;
				}
			} else {
				showDialogue("You need atleast 79 Crafting to make this!");
				isCrafting = false;
				craftDelAmt = 0;
				break;
			}
			break;
		}
	}

	public int fletchDelAmt = 0;
	public int fletchType = 0;
	public boolean isFletching = false;
	public int fletchDelay = 0;

	public void fletchMenu(int itmUsed, int usedWith) {
		if (itmUsed == 946) {
			objectId = usedWith;
		} else if (usedWith == 946) {
			objectId = itmUsed;
		}
		RemoveAllWindows();
		switch (objectId) {
		case 1511:
			displayItem246(8883, 250, 50);
			displayItem246(8884, 200, 52);
			displayItem246(8885, 200, 48);
			changeText126("Longbow (u)", 8897);
			changeText126("Arrow Shaft", 8893);
			changeText126("Shortbow (u)", 8889);
			break;
		case 1521:
			displayItem246(8883, 250, 50);
			displayItem246(8884, 200, -1);
			displayItem246(8885, 200, 48);
			changeText126("Oak longbow (u)", 8897);
			changeText126("", 8893);
			changeText126("Oak shortbow (u)", 8889);
			break;
		case 1519:
			displayItem246(8883, 250, 60);
			displayItem246(8884, 200, -1);
			displayItem246(8885, 200, 58);
			changeText126("Willow longbow (u)", 8897);
			changeText126("", 8893);
			changeText126("Willow shortbow (u)", 8889);
			break;
		case 1517:
			displayItem246(8883, 250, 64);
			displayItem246(8884, 200, -1);
			displayItem246(8885, 200, 62);
			changeText126("Maple longbow (u)", 8897);
			changeText126("", 8893);
			changeText126("Maple shortbow (u)", 8889);
			break;
		case 1515:
			displayItem246(8883, 250, 68);
			displayItem246(8884, 200, -1);
			displayItem246(8885, 200, 66);
			changeText126("Yew longbow (u)", 8897);
			changeText126("", 8893);
			changeText126("Yew shortbow (u)", 8889);
			break;
		case 1513:
			displayItem246(8883, 250, 72);
			displayItem246(8884, 200, -1);
			displayItem246(8885, 200, 70);
			changeText126("Magic longbow (u)", 8897);
			changeText126("", 8893);
			changeText126("Magic shortbow (u)", 8889);
			break;
		}
		sendFrame164(8880);
	}

	public void stringItem(int itmUsed, int usedWith) {
		RemoveAllWindows();
		if (itmUsed == 1777) {
			objectId = usedWith;
		} else if (usedWith == 1777) {
			objectId = itmUsed;
		}
		deleteItem(1777, GetItemSlot(1777), 1);
		switch (objectId) {
		case 50:
			if (getLevelForXP(playerXP[9]) > 4) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(841, 1);
				addSkillXP(5 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 5 Fletching to make this!");
			}
			break;
		case 48:
			if (getLevelForXP(playerXP[9]) > 9) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(839, 1);
				addSkillXP(10 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 10 Fletching to make this!");
			}
			break;
		case 54:
			if (getLevelForXP(playerXP[9]) > 19) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(843, 1);
				addSkillXP(16 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 20 Fletching to make this!");
			}
			break;
		case 56:
			if (getLevelForXP(playerXP[9]) > 24) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(845, 1);
				addSkillXP(25 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 25 Fletching to make this!");
			}
			break;
		case 60:
			if (getLevelForXP(playerXP[9]) > 34) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(849, 1);
				addSkillXP(33 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 35 Fletching to make this!");
			}
			break;
		case 58:
			if (getLevelForXP(playerXP[9]) > 39) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(847, 1);
				addSkillXP(41 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 40 Fletching to make this!");
			}
			break;
		case 64:
			if (getLevelForXP(playerXP[9]) > 49) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(853, 1);
				addSkillXP(50 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 50 Fletching to make this!");
			}
			break;
		case 62:
			if (getLevelForXP(playerXP[9]) > 54) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(851, 1);
				addSkillXP(58 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 55 Fletching to make this!");
			}
			break;
		case 68:
			if (getLevelForXP(playerXP[9]) > 64) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(857, 1);
				addSkillXP(67 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 65 Fletching to make this!");
			}
			break;
		case 66:
			if (getLevelForXP(playerXP[9]) > 69) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(855, 1);
				addSkillXP(75 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 70 Fletching to make this!");
			}
			break;
		case 72:
			if (getLevelForXP(playerXP[9]) > 79) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(861, 1);
				addSkillXP(83 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 80 Fletching to make this!");
			}
			break;
		case 70:
			if (getLevelForXP(playerXP[9]) > 84) {
				deleteItem(objectId, GetItemSlot(objectId), 1);
				addItem(859, 1);
				addSkillXP(91 * fletchXpInc, 9);
			} else {
				showDialogue("You need atleast 85 Fletching to make this!");
			}
			break;
		}
	}

	public void fletchItem() {
		// type = 0 shafts, 1 shortbows, 2 longbows
		RemoveAllWindows();
		if (InvItemAmt(objectId) < fletchDelAmt) {
			fletchDelAmt = InvItemAmt(objectId);
		}
		if (fletchDelAmt <= 0 || InvItemAmt(objectId) <= 0 || !isFletching) {
			isFletching = false;
			fletchDelAmt = 0;
			return;
		}
		fletchDelay = 2;
		fletchDelAmt--;
		switch (objectId) {
		case 1511:
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 4) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(50, 1);
						addSkillXP(5 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 5 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 9) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(48, 1);
						addSkillXP(10 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 10 Fletching to make this!");
				}
				break;
			} else if (fletchType == 0) {
				if (getLevelForXP(playerXP[9]) > 0) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(52, 10);
						addSkillXP(10 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 1 Fletching to make this!");
				}
				break;
			}
			break;
		case 1521:
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 19) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(54, 1);
						addSkillXP(16 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 20 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 24) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(56, 1);
						addSkillXP(25 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 25 Fletching to make this!");
				}
				break;
			}
			break;
		case 1519:
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 34) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(60, 1);
						addSkillXP(33 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 35 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 39) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(58, 1);
						addSkillXP(41 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 40 Fletching to make this!");
				}
				break;
			}
			break;
		case 1517:
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 49) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(64, 1);
						addSkillXP(50 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 50 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 54) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(62, 1);
						addSkillXP(58 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 55 Fletching to make this!");
				}
				break;
			}
			break;
		case 1515:
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 64) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(68, 1);
						addSkillXP(67 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 65 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 69) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(66, 1);
						addSkillXP(75 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 70 Fletching to make this!");
				}
				break;
			}
			break;
		case 1513:
			if (isMember == 0) {
				sendMessage("This feature is premium only.");
				break;
			}
			if (fletchType == 1) {
				if (getLevelForXP(playerXP[9]) > 79) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(72, 1);
						addSkillXP(83 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 80 Fletching to make this!");
				}
				break;
			} else if (fletchType == 2) {
				if (getLevelForXP(playerXP[9]) > 84) {
					if (/* invSpace() */true) {
						deleteItem(objectId, GetItemSlot(objectId), 1);
						startAnimation(1248, 0);
						addItem(70, 1);
						addSkillXP(91 * fletchXpInc, 9);
					} else {
						sendMessage("Not enough inventory space.");
						isFletching = false;
						fletchDelAmt = 0;
						break;
					}
				} else {
					showDialogue("You need atleast 85 Fletching to make this!");
				}
				break;
			}
			break;
		}
	}

	public void sendClueReward() {
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6963);
		outStream.writeWord(clueItems.length);
		for (int i = 0; i < clueItems.length; i++) {
			if (clueItemsN[i] > 254) {
				outStream.writeByte(255);
				outStream.writeDWord_v2(clueItemsN[i]);
			} else {
				outStream.writeByte(clueItemsN[i]);
			}
			if (clueItems[i] > 0) {
				outStream.writeWordBigEndianA(clueItems[i] + 1);
			} else {
				outStream.writeWordBigEndianA(0);
			}
		}
		outStream.endFrameVarSizeWord();
		for (int i = 0; i < clueItems.length; i++) {
			clueItems[i] = 0;
			clueItemsN[i] = 0;
		}
	}

	public void addToClue(int itemId, int itemAmt) {
		if (itemId == 3827 || itemId == 3828 || itemId == 3829
				|| itemId == 3831 || itemId == 3832 || itemId == 3833
				|| itemId == 3835 || itemId == 3836 || itemId == 3837) {
			itemAmt = 1;
		}
		for (int i = 0; i < clueItems.length; i++) {
			if (clueItems[i] <= 0) {
				clueItems[i] = itemId;
				clueItemsN[i] = itemAmt;
				break;
			}
		}
	}

	public void giveClueRewards() {
		for (int i = 0; i < clueItems.length; i++) {
			if (clueItems[i] > 0) {
				if (!addItem(clueItems[i], clueItemsN[i])) {
					Server.s.itemHandler.NpcDropItem(clueItems[i],
							clueItemsN[i], absX, absY, playerId);
				}
			}
		}
	}

	public int clueLevel(int clueId) {
		for (int i = 0; i < newClue1.length; i++) {
			if (newClue1[i] == clueId) {
				return 1;
			}
		}
		for (int i = 0; i < newClue2.length; i++) {
			if (newClue2[i] == clueId) {
				return 2;
			}
		}
		for (int i = 0; i < newClue3.length; i++) {
			if (newClue3[i] == clueId) {
				return 3;
			}
		}
		return -1;
	}

	public int[] clueItems = new int[9];
	public int[] clueItemsN = new int[9];
	public int[] newClue1 = { 2677, 2680, 2683, 2686, 2691, 2692, 2695, 2698 };
	public int[] newClue2 = { 2678, 2681, 2684, 2687, 2690, 2693, 2697 };
	public int[] newClue3 = { 2679, 2682, 2685, 2688, 2689, 2694, 2696 };
	public int[] clueRewardExtra = { 554, 555, 556, 557, 558, 559, 560, 561,
			562, 563, 564, 565, 566, 892, 995, 1437, 69, 3827, 3828, 3829,
			3831, 3832, 3833, 3835, 3836, 3837 };
	public int[] clueReward1 = { 2633, 2635, 2637, 2583, 2585, 2587, 2589,
			2591, 2593, 2595, 2597, 7332, 7338, 7344, 7350, 7356, 7386, 7388,
			7390, 7392, 7394, 7396, 7362, 7364, 7366, 7368, 3472, 3473 };
	public int[] clueReward2 = { 3474, 3475, 2599, 2601, 2603, 2605, 2607,
			2609, 2611, 2613, 7334, 7340, 7347, 7352, 7358, 7319, 7321, 7323,
			7325, 7327, 7370, 7372, 7378, 7380, 3827, 3828, 3829, 3831, 3832,
			3833, 3835, 3836, 3837, 2645, 2647, 2649, 2579, 2577, 8099 };
	public int[] clueReward3 = { 6585, 3476, 3477, 2615, 2617, 2619, 2621,
			2623, 2625, 2627, 2629, 2653, 2655, 2657, 2659, 2661, 2663, 2665,
			2667, 2669, 2671, 2673, 2675, 3481, 3483, 3485, 3486, 3488, 7336,
			7342, 7348, 7354, 7360, 8033, 8034, 8035, 8036, 7374, 7376, 7382,
			7384, 2639, 2641, 2643, 7398, 7399, 7400, 3827, 3828, 3829, 3831,
			3832, 3833, 3835, 3836, 3837, 2651, 2581, 7961, 7962, 7963, 7964,
			7965, 7966, 7967, 7968, 7969, 7970, 7971, 7972, 7979 };

	public boolean ClueScrollHint(int Id) {
		ClearFrame8134();
		switch (Id) {
		case 2677:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2677), 8144);
			changeText126("@dbl@There's sand everywhere I look.", 8147);
			changeText126("@dbl@Crafting seems to be this man's hobby,", 8148);
			changeText126("@dbl@I wonder where I might be?", 8149);
			return true;
		case 2678:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2678), 8144);
			changeText126("@dbl@Men in shinning armour surround me,", 8147);
			changeText126("@dbl@Protecting me from evil, as that is the", 8148);
			changeText126("@dbl@Job of a 'Guard'.", 8149);
			return true;
		case 2679:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2679), 8144);
			changeText126(
					"@dbl@I hide in a city known for its guild of warriors.",
					8147);
			changeText126(
					"@dbl@White palace guards live here, and above me is Cassie.",
					8148);
			changeText126("@dbl@Between me is a range and a furnace,", 8149);
			changeText126("@dbl@Although I am much closer to the furnace.",
					8150);
			return true;
		case 2680:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2680), 8144);
			changeText126(
					"@dbl@I am near a home town to many, the minimap marks",
					8147);
			changeText126("@dbl@The spot of a question mark.Little troll like",
					8148);
			changeText126(
					"@dbl@Creatures rome the lands, and are even green coloured.",
					8149);
			return true;
		case 2681:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2681), 8144);
			changeText126(
					"@dbl@I am in a small town, where simple men and women live.",
					8147);
			changeText126("@dbl@Willows sway bellow me and this bank.", 8148);
			changeText126("@dbl@From where I stand I can see two women.", 8149);
			changeText126(
					"@dbl@Rumor has it the Wise Old Man lives here, and some",
					8150);
			changeText126(
					"@dbl@Of the most mighty dragons live in a cave we have",
					8151);
			changeText126("@dbl@An entrance to.", 8152);
			return true;
		case 2682:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2682), 8144);
			changeText126(
					"@dbl@This bridge is very long, I can't even see the end.",
					8147);
			changeText126(
					"@dbl@I see a dark wizard and a tower, a barrel and a crate.",
					8148);
			changeText126("@dbl@Spellcasting is what these people study.", 8149);
			return true;
		case 2683:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2683), 8144);
			changeText126("@dbl@Oddly, there are no monks in this sanctuary.",
					8147);
			changeText126(
					"@dbl@Sleeping in the center, the place looks amazing,",
					8148);
			changeText126(
					"@dbl@And from what I can remember there is a special altar here.",
					8149);
			changeText126(
					"@dbl@A place of fighting solo attracts people to these lands.",
					8150);
			return true;
		case 2684:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2684), 8144);
			changeText126(
					"@dbl@This city is popular for its glorious 1v1 PKing.",
					8147);
			changeText126(
					"@dbl@You can gain slayer tasks here, and there is a", 8148);
			changeText126("@dbl@And there is a bank with 1...2...3 bankers.",
					8149);
			return true;
		case 2685:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2685), 8144);
			changeText126(
					"@dbl@This dungeon is small, filled with a few rats.", 8147);
			changeText126(
					"@dbl@A skill master lives here weilding a 2h sword in 1 hand",
					8148);
			changeText126(
					"@dbl@And likes challeging players to ''assignments.''",
					8149);
			changeText126("@dbl@From my distance I can hardly see the ladder.",
					8150);
			return true;
		case 2686:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2686), 8144);
			changeText126("@dbl@One of the few guilds of InnovationX,", 8147);
			changeText126(
					"@dbl@I hide below it because these men are true legends!",
					8148);
			changeText126(
					"@dbl@The only odd thing I've noticed is that glowing rock.",
					8149);
			return true;
		case 2687:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2687), 8144);
			changeText126("@dbl@Mysteries ruins mark the center,", 8147);
			changeText126("@dbl@While wizards of darkness stand around", 8148);
			changeText126("@dbl@killing inocent citizens who wonder too far.",
					8149);
			changeText126(
					"@dbl@If your lucky though, you can escape to the large",
					8150);
			changeText126("@dbl@City above this area.", 8151);
			return true;
		case 2688:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2688), 8144);
			changeText126("@dbl@These farmers sit around doing nothing,", 8147);
			changeText126(
					"@dbl@This is work to be done, vegetables to be planted.",
					8148);
			changeText126("@dbl@Why did I have to get left with chickens?",
					8149);
			changeText126("@dbl@Atleast I wasn't left with those cows.", 8150);
			return true;
		case 2689:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2689), 8144);
			changeText126("@dbl@I lie and wait near crumbling walls.", 8147);
			changeText126("@dbl@A skull headed man is a few rooms over,", 8148);
			changeText126(
					"@dbl@And keeps peeking his head out giving me creepy looks.",
					8149);
			changeText126(
					"@dbl@Atleast I have Sir Amik Varze at my side in this guild.",
					8150);
			return true;
		case 2690:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2690), 8144);
			changeText126(
					"@dbl@This place is pure green! Even that man, no...", 8147);
			changeText126(
					"@dbl@Ghost is green! This time you won't need a spade",
					8148);
			changeText126("@dbl@To get to me though, as the coffins under me",
					8149);
			changeText126("@dbl@Contain powerful brothers.", 8150);
			return true;
		case 2691:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2691), 8144);
			changeText126("@dbl@This large city is famous for many reasons.",
					8147);
			changeText126("@dbl@My favorite shop sells platebodies and a few",
					8148);
			changeText126("@dbl@Other items of interest and contains an avil.",
					8149);
			changeText126("@dbl@The man with the armour is an awesome fellow,",
					8150);
			changeText126(
					"@dbl@But he always has to compete with the ranged shop.",
					8151);
			return true;
		case 2692:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2692), 8144);
			changeText126("@dbl@Bob my man selling his fine axes is near me,",
					8147);
			changeText126("@dbl@The is where most people originate from,", 8148);
			changeText126("@dbl@And many get revived at.", 8149);
			changeText126(
					"@dbl@Don't be fooled though, I'm smart enough to stay",
					8150);
			changeText126(
					"@dbl@Out of his shop because I'm not buying anything.",
					8151);
			return true;
		case 2693:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2693), 8144);
			changeText126("@dbl@This dungeon is located in...dr...", 8147);
			changeText126("@dbl@Well I don't seem to remember, but at the end",
					8148);
			changeText126("@dbl@Are large fire breathers.", 8149);
			changeText126(
					"@dbl@If they ever do come to close I can run up a few",
					8150);
			changeText126("@dbl@stairs and leave.", 8151);
			return true;
		case 2694:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2694), 8144);
			changeText126(
					"@dbl@Knights of balance keep these lands under control.",
					8147);
			changeText126("@dbl@They constantly travel in a boat to defend",
					8148);
			changeText126(
					"@dbl@one of their own and defeat the portals to leave.",
					8149);
			changeText126("@dbl@The center of the city is where I am at.", 8150);
			return true;
		case 2695:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2695), 8144);
			changeText126("@dbl@Hmm a desert, and women in armour.", 8147);
			changeText126("@dbl@Sarah the nurse will save me if I get hit,",
					8148);
			changeText126(
					"@dbl@As I wait in the center for someone to fight me.",
					8149);
			return true;
		case 2696:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2696), 8144);
			changeText126(
					"@dbl@These black dragons like to take out unsuspecting",
					8147);
			changeText126(
					"@dbl@Wanderers. I am near an oblisk and purple rocks",
					8148);
			changeText126("@dbl@You can mine. Bring a shield for anti flames!",
					8149);
			return true;
		case 2697:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2697), 8144);
			changeText126("@dbl@They are floating... Axes?", 8147);
			changeText126("@dbl@They like to hit me for no reason.", 8148);
			changeText126("@dbl@Take food with you!", 8149);
			changeText126("@dbl@I am near a corner, I think the top...", 8150);
			return true;
		case 2698:
			changeText126("@dre@Clue Hints: Level " + clueLevel(2698), 8144);
			changeText126("@dbl@This barbaric village constantly scares me,",
					8147);
			changeText126("@dbl@They are unfriendly evil people,", 8148);
			changeText126("@dbl@Looking for someone to entertain them.", 8149);
			return true;
		default:
			return false;
		}
	}

	public boolean ClueScrollLocation(int Id) {
		switch (Id) {
		case 2677:
			if (absX == 3320 && absY == 3193) {
				return true;
			}
			break;
		case 2678:
			if (absX == 3213 && absY == 3463) {
				return true;
			}
			break;
		case 2679:
			if (absX == 2979 && absY == 3372) {
				return true;
			}
			break;
		case 2680:
			if (absX == 3230 && absY == 3233) {
				return true;
			}
			break;
		case 2681:
			if (absX == 3092 && absY == 3248) {
				return true;
			}
			break;
		case 2682:
			if (absX == 3115 && absY == 3175) {
				return true;
			}
			break;
		case 2683:
			if (absX == 3052 && absY == 3490) {
				return true;
			}
			break;
		case 2684:
			if (absX == 3093 && absY == 3492) {
				return true;
			}
			break;
		case 2685:
			if (absX == 3098 && absY == 9883) {
				return true;
			}
			break;
		case 2686:
			if (absX == 3191 && absY == 3350) {
				return true;
			}
			break;
		case 2687:
			if (absX == 3228 && absY == 3372) {
				return true;
			}
			break;
		case 2688:
			if (absX == 3230 && absY == 3299) {
				return true;
			}
			break;
		case 2689:
			if (absX == 2207 && absY == 4973) {
				return true;
			}
			break;
		case 2690:
			if (absX == 3565 && absY == 3298) {
				return true;
			}
			break;
		case 2691:
			if (absX == 3229 && absY == 3438) {
				return true;
			}
			break;
		case 2692:
			if (absX == 3235 && absY == 3200) {
				return true;
			}
			break;
		case 2693:
			if (absX == 2703 && absY == 9565) {
				return true;
			}
			break;
		case 2694:
			if (absX == 2659 && absY == 2659) {
				return true;
			}
			break;
		case 2695:
			if (absX == 3370 && absY == 3275) {
				return true;
			}
		case 2696:
			if (absX == 2818 && absY == 9828) {
				return true;
			}
			break;
		case 2697:
			if (absX == 2968 && absY == 9790) {
				return true;
			}
			break;
		case 2698:
			if (absX == 3082 && absY == 3417) {
				return true;
			}
			break;
		default:
			return false;
		}
		return false;
	}

	public void SetStandEmote(int i) {
		playerSE = i;
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void ShowOption(int Slot, String Text) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSize(104);
		outStream.writeByteC(Slot);
		outStream.writeByteA(1);
		outStream.writeString(Text);
		outStream.endFrameVarSize();
	}

	public void SetWalkableFrame(int FrameId) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(208);
		outStream.writeWordBigEndian_dup(FrameId);
	}

	public int iconId = 0;

	public void mainFrame() {
		this.updateQuestTab();
		if (ZombieMinigame.players.contains(playerName)) {
			SetWalkableFrame(15892);
			changeText126("NAZI Zombies", 15894);
			if (ZombieMinigame.players.size() >= 3) {
				if (ZombieMinigame.STARTED) {
					changeText126("Ending game in: ", 15895);
					changeText126(Integer.toString(ZombieMinigame.CYCLE), 15896);
				} else {
					changeText126("Starting game in: ", 15895);
					changeText126(Integer.toString(ZombieMinigame.TIME), 15896);
				}
			} else {
				changeText126("Need 3+ players", 15895);
				changeText126("", 15896);
			}
			changeText126(
					"Total players:        @gre@"
							+ Integer.toString(ZombieMinigame.players.size()),
					15897);
			changeText126(
					"Wave:                    @gre@"
							+ Integer.toString(ZombieMinigame.WAVE), 15898);
			if (ZombieMinigame.STARTED) {
				changeText126(
						"Zombies left:         @gre@"
								+ Integer.toString(ZombieMinigame.ZOMBIES),
						15899);
			} else {
				changeText126("Game not started.", 15899);
			}
			changeText126(
					"Points:                  @gre@"
							+ Integer.toString(zombiePoints), 15900);
			changeText126("", 15901);
			changeText126("", 15902);
			changeText126("", 15903);
			changeText126("", 15904);
			changeText126("", 15905);
			changeText126("", 15906);
			changeText126("", 15907);
			changeText126("", 15908);
			return;
		}
		if (pcStatus > 0) {
			return;
		}
		if (!multiZone() && iconId != 0) {
			iconId = 0;
			outStream.createFrame(61);
			outStream.writeByte(0);
		}
		if (WildArea()) {
			outStream.createFrame(208);
			outStream.writeWordBigEndian_dup(197);
			int wildLvl = (((absY - 3520) / 8) + 1);
			changeText126("Level: " + wildLvl, 199);
			if (multiZone() && iconId != 1) {
				iconId = 1;
				outStream.createFrame(61);
				outStream.writeByte(1);
			}
		} else {
			updateLagMeter();
		}
	}

	public void updateLagMeter() {
		if (IsInFightCave()) {
			changeText126("Wave " + tzWave, 4536);
		} else if (absX >= 3085 && absX <= 3126 && absY >= 3914 && absY <= 3951) {
			changeText126("Kill Count: " + mageArenaKills, 4536);
		} else {
			int lagz = Misc.roundToWhole(Server.s.msLag / 10);
			if (lagz > 100) {
				lagz = 100;
			}
			if (lagz < 1) {
				lagz = 1;
			}
			if (lagz > 70) {
				changeText126("Lag: @red@" + lagz + "@whi@% EXP: x"+getXPMultiplier()+"", 4536);
			} else if (lagz > 30) {
				changeText126("Lag: @yel@" + lagz + "@whi@% EXP: x"+getXPMultiplier()+"", 4536);
			} else {
				changeText126("Lag: @gre@" + lagz + "@whi@% EXP: x"+getXPMultiplier()+"", 4536);
			}
		}
		/* "+Server.s.playerHandler.playerCount+" */
		SetWalkableFrame(4535);
		if (multiZone() && iconId != 2) {
			iconId = 2;
			outStream.createFrame(61);
			outStream.writeByte(2);
		} else if (duelArea() && iconId != 3) {
			iconId = 3;
			outStream.createFrame(61);
			outStream.writeByte(3);
		}
	}

	public void UpdateArea() {
		if (WildArea() || FightPits.fighters.contains(playerName)
				|| Server.s.ClanWars.teamBluePlayers.contains(this)
				|| Server.s.ClanWars.teamRedPlayers.contains(this)) {
			ShowOption(1, "Attack");
		} else if (duelArea()) {
			ShowOption(1, "Challenge");
		} else {
			// ShowOption(1, "Do nothing with");
		}
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void updateHp(int chHp, boolean heal) {
		if (heal) {
			NewHp += chHp;
			if (NewHp > getLevelForXP(playerXP[3])) {
				chHp = NewHp - getLevelForXP(playerXP[3]);
				NewHp = getLevelForXP(playerXP[3]);
			}
			subtractDamage(chHp);
		} else if (!heal) {
			if (teleX <= 0 && teleY <= 0) {
				NewHp -= chHp;
				if (NewHp < 0) {
					NewHp = 0;
				}
			}
		}
		playerLevel[3] = NewHp;
		NewHp = playerLevel[3];
	}

	public void subtractDamage(int dmg) {
		for (int i = 1; i < KilledBy.length; i++) {
			KilledBy[i] -= dmg;
			if (KilledBy[i] < 0) {
				KilledBy[i] = 0;
			}
		}
	}

	public int fishCaughtTimer = -1;
	public int fishId = 0;
	public int fishEmote = 0;
	public int fishXP = 0;
	public int fishDelayFinal = 0;

	public void startToFish(int delayToCatch, int fishType, int emoteId,
			int xpRec) {
		if (isMember == 0) {
			sendMessage("Upgrade to premium for fishing and cooking.");
			return;
		}
		fishCaughtTimer = delayToCatch
				- (Misc.random((int) (playerLevel[playerFishing] * 0.1)));
		if (fishCaughtTimer <= 0) {
			fishCaughtTimer = 1;
		}
		fishId = fishType;
		fishEmote = emoteId;
		fishXP = xpRec;
		SetStandEmote(fishEmote);
		startAnimation(fishEmote, 0);
	}

	public void resetFishing() {
		SetStandEmote(GetStandEmote(playerEquipment[playerWeapon],
				getItemName(playerEquipment[playerWeapon])));
		fishCaughtTimer = -1;
	}

	public void addFish() {
		if ((fishId == 327 || fishId == 345 || fishId == 349)
				&& InvItemAmt(313) <= 0) {
			showDialogue("You need bait to catch this!");
			resetFishing();
			return;
		} else if ((fishId == 335) && InvItemAmt(314) <= 0) {
			showDialogue("You need feathers to catch this!");
			resetFishing();
			return;
		} else if ((fishId == 327 || fishId == 345 || fishId == 349)
				&& InvItemAmt(313) > 0) {
			deleteItem(313, GetItemSlot(313), 1);
		} else if ((fishId == 335) && InvItemAmt(314) > 0) {
			deleteItem(314, GetItemSlot(314), 1);
		} else if (!addItem(fishId, 1)) {
			sendMessage("Not enough space in your inventory.");
			resetFishing();
			return;
		} else {
			addSkillXP(fishXP, playerFishing);
		}
	}

	public int saveDelay = 10;
	public int statTimer = 90;
	public int soundDelay = -1;
	public int emotedelay = 4;
	public int newEmote = 0;
	public int spellHit = 0;
	public boolean acceptedTrade = false;

	public int getMove(int Place1, int Place2) {
		if ((Place1 - Place2) == 0) {
			return 0;
		} else if ((Place1 - Place2) < 0) {
			return 1;
		} else if ((Place1 - Place2) > 0) {
			return -1;
		}
		return 0;
	}

	public int followDistance = 0;

	public void follow(int slot, int type, int distance) {
		if (slot > 0 && slot == followId && type == 1 && followId > 0
				&& followDistance != distance && (useBow || useSpell)) {
			return;
		} else if (slot > 0 && slot == followId2 && type == 0 && followId2 > 0
				&& followDistance >= distance && distance != 1) {
			return;
		}
		// else if (type == 3 && followId2 == 0 && followId == 0)
		// return;
		outStream.createFrame(174);
		if (EntangleDelay > 0) {
			outStream.writeWord(0);
		} else {
			outStream.writeWord(slot);
			if (type == 0) {
				followId = 0;
				followId2 = slot;
				TurnPlayerTo(followId2);
			} else if (type == 1) {
				followId2 = 0;
				followId = slot;
				TurnPlayerTo(32768 + followId);
			} else if (type == 3) {
				followId2 = 0;
				followId = 0;
				followDistance = 0;
				TurnPlayerTo(65535);
			}
			followDistance = distance;
		}
		outStream.writeByte(type);
		outStream.writeWord(distance);
	}

	/*
	 * public void walkTo(int x, int y) { if (EntangleDelay > 0) return;
	 * newWalkCmdSteps = 0; if (++newWalkCmdSteps > walkingQueueSize)
	 * newWalkCmdSteps = 0; int firstStepX = absX + x; firstStepX -= mapRegionX
	 * * 8; newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0; int
	 * firstStepY = absY + y; firstStepY -= mapRegionY * 8; for (i = 0; i <
	 * newWalkCmdSteps; i++) { newWalkCmdX[i] += firstStepX; newWalkCmdY[i] +=
	 * firstStepY; } poimiY = firstStepY; poimiX = firstStepX; isRunning = true;
	 * isRunning2 = true; newWalkCmdIsRunning = true; }
	 */
	public int godSpellDamage(int spellId) {
		int currentDmg = 0;
		int defaultDmg = 20;
		int bonusDmg = 0;
		if (playerEquipment[playerWeapon] == 2415
				&& playerEquipment[playerCape] != 2412) {
			return Misc.random(defaultDmg);
		}
		if (playerEquipment[playerWeapon] == 2416
				&& playerEquipment[playerCape] != 2413) {
			return Misc.random(defaultDmg);
		}
		if (playerEquipment[playerWeapon] == 2417
				&& playerEquipment[playerCape] != 2414) {
			return Misc.random(defaultDmg);
		}
		if (godSpellCharge > 0) {
			bonusDmg = 10;
		}
		if (spellId == 1190) {
			return Misc.random(defaultDmg + bonusDmg);
		} else if (spellId == 1191) {
			currentDmg = Misc.random(defaultDmg + bonusDmg);
			if (currentDmg < 10) {
				currentDmg = Misc.random(defaultDmg + bonusDmg);
			}
		} else if (spellId == 1192) {
			currentDmg = Misc.random(defaultDmg + bonusDmg);
			if (currentDmg < 10) {
				currentDmg = Misc.random(defaultDmg + bonusDmg);
			}
			if (currentDmg < 10) {
				currentDmg = Misc.random(defaultDmg + bonusDmg);
			}
		}
		return currentDmg;
	}

	public void godSpellEffect(int spellId, int dmg, int slot) {
		if (Server.s.playerHandler.players[slot] == null) {
			return;
		}
		Client p = (Client) Server.s.playerHandler.players[slot];
		if (playerEquipment[playerWeapon] == 2415
				&& playerEquipment[playerCape] != 2412) {
			return;
		} else if (playerEquipment[playerWeapon] == 2416
				&& playerEquipment[playerCape] != 2413) {
			return;
		} else if (playerEquipment[playerWeapon] == 2417
				&& playerEquipment[playerCape] != 2414) {
			return;
		} else if (spellId == 1190) {
			double Drained = (dmg * 0.25);
			Drained = Math.round(Drained - 0.5f);
			p.playerLevel[5] -= Drained;
			if (p.playerLevel[5] <= 0) {
				p.playerLevel[5] = 0;
			}
			p.setSkillLevel(5);
		} else if (spellId == 1191) {
			if (p.playerLevel[playerDefence] > (p
					.getLevelForXP(p.playerXP[playerDefence]) - 5)) {
				p.playerLevel[playerDefence] = p
						.getLevelForXP(p.playerXP[playerDefence]) - 5;
				p.setSkillLevel(playerDefence);
			}
		} else if (spellId == 1192) {
			if (p.playerLevel[playerMagic] > (p
					.getLevelForXP(p.playerXP[playerMagic]) - 5)) {
				p.playerLevel[playerMagic] = p
						.getLevelForXP(p.playerXP[playerMagic]) - 5;
				p.setSkillLevel(playerMagic);
			}
		}
	}

	public int displayFrameDelay = 6;

	public int getNPCHp(int type) {
		for (int n = 0; n < Server.s.npcHandler.maxNPCs; n++) {
			if (Server.s.npcHandler.npcs[n] != null) {
				if (Server.s.npcHandler.npcs[n].NpcType == type) {
					return Server.s.npcHandler.npcs[n].CurrentHp;
				}
			}
		}
		return 0;
	}

	public int emoteId = 3997;
	public int delayToEmote = 8;
	public boolean doEmoteTest = false;
	public int damageCoordDelay = 0;
	public int displayFrameDelay2 = 20;
	public long lastResponse = System.currentTimeMillis();

	public void updateQuestTab() {
		if (Server.s.restartTime / 2 / 60 < 60) {
			changeText126("@or1@Uptime: @gre@" + Server.s.restartTime / 2 / 60
					+ " @or1@mins", 663);
		} else {
			int time = Server.s.restartTime;
			int min = 0;
			int hr = 0;
			hr = time / 2 / 60 / 60;
			int miliSecHr = Math.round((time / 2 / 60 / 60) - 0.5f);
			min = (time - (miliSecHr * 2 * 60 * 60)) / 2 / 60;
			changeText126("@or1@Uptime: @gre@" + hr + " @or1@hr @gre@" + min
					+ " @or1@min", 663);
		}
		changeText126("@or1@Players online: @gre@"
				+ Server.s.playerHandler.playerCount, 7332);
	}

	public int clickCount = 0;

	public void process() {
		attemptWield();
		combat.tick();
		if (solDrainWait > 0) {
			if (solDrainWait == 1) {
				solEffect = false;
				sendMessage("Your Staff of light deactivates!");
			}
			solDrainWait--;
		}
		if (xLogDelay > 0)
			xLogDelay--;

		if (healWait > 0) {
			healWait--;
		}
		mainFrame();
		if (firemakingTimer > 0) {
			firemakingTimer--;
		}
		if (firemakingWait > 0) {
			firemakingWait--;
		}
		if (firemakingTimer == 2) {
			firemakingTimer = 0;
			walkToPoint(absX - 1, absY, -1);
			sendMessage("The logs manage to catch on fire!");
			for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (p != null) {
					CreateObject(absX, absY, 2732, 10, 0, heightLevel);
					p.CreateObject(absX, absY, 2732, 10, 0, heightLevel);
				}
			}
		}
		clickCount--;
		changeText126(NewHp + "", 4016);
		damageCoordDelay--;
		packetDelay--;
		axeSpecDelay--;
		emotedelay--;
		leverDelay--;
		telegrab--;
		duelStartDelay--;
		yellDelay--;
		thiefDelay--;
		coordError--;
		doTeleDelay--;
		rockDelay--;
		fishCaughtTimer--;
		essDelay--;
		fletchDelay--;
		godSpellCharge--;
		spellHit--;
		logDelay--;
		eatDelay--;
		drinkDelay--;
		ObjectClickDelay--;
		deathDelay--;
		soundDelay--;
		EntangleDelay--;
		skullTimer--;
		vengenceDelay--;
		spellCastDelay--;
		meleeDelay--;
		teleBlockDelay--;
		combatDelay--;
		WaveDelay--;
		NewAreaUpdate--;
		SpecIncreaseDelay--;
		statTimer--;
		saveDelay--;
		godDelay--;
		cookDelay--;
		craftDelay--;
		defenderDelay--;
		displayFrameDelay--;
		walkResetdelay--;
		displayFrameDelay2--;
		combatProcess();
		if (isWC) {
			getLog();
		}
		if (isMining) {
			getRock();
		}
		if (isFletching && fletchDelay <= 0) {
			fletchItem();
		}
		if (isCrafting && craftDelay <= 0) {
			craftItem();
		}
		if (cookDelay == 0) {
			cookItem(cookItemAmt);
		}
		if (fishCaughtTimer == 0) {
			startToFish(fishDelayFinal, fishId, fishEmote, fishXP);
			addFish();
		}
		if (essDelay == 0) {
			if (invSpace()) {
				sendMessage("You get some Rune Essence.");
				addItem(1436, 1);
				addSkillXP(5 * mineXpInc, playerMining);
				if (essDelay <= 0) {
					essDelay = 1 + Misc.random(2);
				}
				startAnimation(pickEmoteId(), 0);
			} else {
				sendMessage("Not enough space in your inventory.");
			}
		}
		if (useNPCSpell) {
			spellOnNpc();
		}
		if (usedItemOnObject) {
			itemOnObject();
		}
		if (clickedNPC1) {
			FirstClickNpc();
		}
		if (clickedNPC2) {
			SecondClickNpc();
		}
		if (clickedObject1) {
			ObjectClick();
		}
		if (clickedObject2) {
			ObjectClick2();
		}
		if (pickupItem) {
			PickupItem();
		}
		if (itemOnNPC) {
			itemOnNPC();
		}
		if (leverDelay == 0) {
			startTele(leverX, leverY, 0, 714, 715, 308, 4, 18431);
		}
		if (ZombieMinigame.players.contains(playerName)) {
			SetWalkableFrame(15892);
			changeText126("NAZI Zombies", 15894);
			if (ZombieMinigame.players.size() >= 3) {
				if (ZombieMinigame.STARTED) {
					changeText126("Ending game in: ", 15895);
					changeText126(Integer.toString(ZombieMinigame.CYCLE), 15896);
				} else {
					changeText126("Starting game in: ", 15895);
					changeText126(Integer.toString(ZombieMinigame.TIME), 15896);
				}
			} else {
				changeText126("Need 3+ players", 15895);
				changeText126("", 15896);
			}
			changeText126(
					"Total players:        @gre@"
							+ Integer.toString(ZombieMinigame.players.size()),
					15897);
			changeText126(
					"Wave:                    @gre@"
							+ Integer.toString(ZombieMinigame.WAVE), 15898);
			if (ZombieMinigame.STARTED) {
				changeText126(
						"Zombies left:         @gre@"
								+ Integer.toString(ZombieMinigame.ZOMBIES),
						15899);
			} else {
				changeText126("Game not started.", 15899);
			}
			changeText126(
					"Points:                  @gre@"
							+ Integer.toString(zombiePoints), 15900);
			changeText126("", 15901);
			changeText126("", 15902);
			changeText126("", 15903);
			changeText126("", 15904);
			changeText126("", 15905);
			changeText126("", 15906);
			changeText126("", 15907);
			changeText126("", 15908);
			// return;
		}
		if (walkResetdelay == 0) {
			RemoveAllWindows();
			playerSER = GetRunEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			playerSEW = GetWalkEmote(playerEquipment[playerWeapon],
					getItemName(playerEquipment[playerWeapon]));
			updateRequired = true;
			appearanceUpdateRequired = true;
		}
		if (doTeleDelay == 0) {
			finishTele();
		}
		if (WaveDelay <= 0 && tzWave != -1 && IsInFightCave()) {
			WaveDelay = 999999999;
			SpawnNewWave();
		}
		if (pcStatus == 2) {
			int timeRemaining = (Server.s.pc.gameTime / 2 / 60);
			int voidHp = getNPCHp(3782);
			int bluePortal = getNPCHp(3778);
			int redPortal = getNPCHp(3780);
			int yellowPortal = getNPCHp(3779);
			int purplePortal = getNPCHp(3777);
			changeText126("", 20001);
			changeText126("", 20002);
			changeText126("", 20003);
			changeText126("", 20004);
			changeText126("", 20006);
			changeText126("W", 20007);
			changeText126("E", 20008);
			changeText126("SE", 20009);
			changeText126("SW", 20010);
			changeText126("" + purplePortal, 20011);
			changeText126("" + bluePortal, 20012);
			changeText126("" + yellowPortal, 20013);
			changeText126("" + redPortal, 20014);
			changeText126("" + voidHp, 20015);
			changeText126("" + damageDone, 20016);
			changeText126("Time Remaining:", 20017);
			changeText126("" + Server.s.pc.gameTime, 20018);
		}
		if (pcStatus == 1) {
			changeText126("Next Departure: " + Server.s.pc.gameStartDelay,
					14311);
			changeText126("Players Ready: " + Server.s.pc.playersInGame, 14312);
			changeText126("(Need 5 to 25 players)", 14313);
			changeText126("Pest Points: " + pcPoints, 14314);
		}
		if (poisonDelay >= 0) {
			poisonDelay--;
			if (poisonDelay == 0 && poisonDamage > 0) {
				poisonDelay = 100;
				if (hitUpdateRequired) {
					poisonHit2 = true;
					hitDiff2 = poisonDamage;
					updateHp(hitDiff2, false);
					hitUpdateRequired2 = true;
					updateRequired = true;
				} else {
					poisonHit = true;
					hitDiff = poisonDamage;
					updateHp(hitDiff, false);
					hitUpdateRequired = true;
					updateRequired = true;
				}
				poisonDamage--;
				if (poisonDamage == 0) {
					sendMessage("You are healed of your poison.");
					poisonDelay = -1;
				}
			}
		}
		if (specialAmount <= 100 && SpecIncreaseDelay <= 0) {
			specialAmount += 1;
			SpecIncreaseDelay = 8;
			specialAttackBar();
		}
		if (saveDelay <= 0) {
			saveDelay = 120;
			Server.s.playerHandler.SaveChar(this);
			Server.s.playerHandler.SaveMoreInfo(this);
		}
		if (combatWith > 0
				&& Server.s.playerHandler.players[combatWith] == null) {
			combatWith = 0;
		}
		if (combatWith > 0
				&& Server.s.playerHandler.players[combatWith] != null) {
			Client cbPlr = (Client) Server.s.playerHandler.players[combatWith];
			if (cbPlr.meleeDelay <= 0 || cbPlr.attackingPlayerId != playerId) {
				combatWith = 0;
			}
		}
		if (combatWith2 > 0 && Server.s.npcHandler.npcs[combatWith2] == null) {
			combatWith2 = 0;
		}
		if (combatWith2 > 0 && Server.s.npcHandler.npcs[combatWith2] != null) {
			NPC npc = Server.s.npcHandler.npcs[combatWith2];
			if (npc.StartKilling != playerId || !npc.IsUnderAttack
					|| npc.NeedRespawn || npc.ActionTimer < 0 || npc.IsDead) {
				combatWith2 = 0;
			}
		}
		if (IsAttackingNPC && !IsDead) {
			attackNpc();
		}
		if (combatWith <= 0 && combatWith2 <= 0) {
			inCombat = false;
		}
		if (coordError == 0 && (absX <= 0 || absY <= 0)) {
			changeCoords(3226, 3219, 0);
			sendMessage("Your coords have been reset due to a bug.");
		}
		if (skullTimer == 0) {
			SetPkHeadIcon(0);
		}
		if (globalMessage.length() > 0) {
			sendMessage(globalMessage);
			globalMessage = "";
		}
		if (statTimer <= 0) {
			for (int i1 = 0; i1 < playerLevel.length; i1++) {
				int xpLvl = getLevelForXP(playerXP[i1]);
				if (playerLevel[i1] == xpLvl) {
					continue;
				}
				if (playerLevel[i1] < xpLvl) {
					if (i1 != 3) {
						playerLevel[i1]++;
						setSkillLevel(i1);
					} else {
						updateHp(1, true);
					}
				} else if (playerLevel[i1] > xpLvl) {
					if (i1 != 3) {
						playerLevel[i1]--;
						setSkillLevel(i1);
					} else {
						updateHp(1, false);
					}
				}
			}
			statTimer = 90;
		}
		if (CurrentDrain > 0 || CheckIfPray()) {
			DrainDelay--;
			if (DrainDelay == 0 || DrainDelay < 0 && CheckIfPray()) {
				checkDrain();
				playerLevel[5]--;
				if (playerLevel[5] <= 0) {
					playerLevel[5] = 0;
					resetAllPrayers();
					sendMessage("You have run out of prayer points!");
				}
				setSkillLevel(5);
			}
		}
		if (HeadPray == 5) {
			if (NewHp > 0 && NewHp <= getLevelForXP(playerXP[3]) / 10) {
				updateHp(getLevelForXP(playerXP[playerPrayer]) / 25, true);
				playerLevel[5] = 0;
				setSkillLevel(5);
				SetPrayHeadIcon(0);
				playGraphic(436, 0, 0);
				resetAllPrayers();
			}
		}
		if (IsDead || NewHp <= 0 || playerLevel[3] <= 0) {
			NewHp = 0;
			IsDead = true;
			ApplyDead();
		}
		// taskManager.executeTasks();
	}

	public void drawHeadicon(int whatGets, int objId, int x, int y) {
		outStream.createFrame(254);
		outStream.writeByte(whatGets);
		if (whatGets == 1 || whatGets == 10) {
			outStream.writeWord(objId);
			outStream.writeWord(x);
			outStream.writeByte(y);
		} else {
			outStream.writeWord(x);
			outStream.writeWord(y);
			outStream.writeByte(objId);
		}
	}

	public boolean playerPro = false;
	public int NewAreaUpdate = 0;

	public void RemoveAllWindows() {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(219);
	}

	public void removeAllItemsChaosElemental() {
		// weapon, shield, helmet, body, leg, cape, ring
		int stuff[] = { playerEquipment[playerWeapon],
				playerEquipment[playerShield], playerEquipment[playerHat],
				playerEquipment[playerChest], playerEquipment[playerLegs],
				playerEquipment[playerFeet], playerEquipment[playerHands],
				playerEquipment[playerCape], playerEquipment[playerRing] };
		int slotIds[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 };
		for (int armors : stuff) {
			for (int slots : slotIds) {
				if (!attemptRemoveItem(armors, slots)) {
					sendMessage("Not enough inventory space.");
					return;
				}
			}
		}
	}

	public void removeAllItems() {
		for (int i = 0; i < playerItems.length; i++) {
			playerItems[i] = 0;
		}
		for (int i = 0; i < playerItemsN.length; i++) {
			playerItemsN[i] = 0;
		}
		resetItems(3214);
	}

	public int NeededKills = -1;

	public void SpawnNewWave() {
		if (tzWave == 1) {
			Server.s.npcHandler.newNPC(2627, 2380, 5105, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 0;
			NeededKills = 1;
		} else if (tzWave == 2) {
			Server.s.npcHandler.newNPC(2627, 2379, 5070, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2629, 2382, 5107, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 1;
			NeededKills = 5;
		} else if (tzWave == 3) {
			Server.s.npcHandler.newNPC(2627, 2381, 5104, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2629, 2379, 5070, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2631, 2390, 5069, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 5;
			NeededKills = 10;
		} else if (tzWave == 4) {
			Server.s.npcHandler.newNPC(2627, 2381, 5104, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2629, 2379, 5070, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2631, 2390, 5069, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2742, 2382, 5107, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 10;
			NeededKills = 16;
		} else if (tzWave == 5) {
			Server.s.npcHandler.newNPC(2627, 2381, 5104, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2629, 2379, 5070, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2631, 2390, 5069, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2742, 2382, 5107, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2744, 2383, 5069, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 16;
			NeededKills = 23;
		} else if (tzWave == 6) {
			sendFrame200(4883, 591);
			changeText126(getNpcName(2619), 4884);
			changeText126("Get ready, TzTok-Jad will spawn after this wave!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(2619, 4883);
			sendFrame164(4882);
			Server.s.npcHandler.newNPC(2744, 2379, 5072, heightLevel, 0, 0, 0,
					0, false, playerId);
			Server.s.npcHandler.newNPC(2744, 2416, 5081, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 23;
			NeededKills = 25;
		} else if (tzWave == 7) {
			sendFrame200(4883, 591);
			changeText126(getNpcName(2619), 4884);
			changeText126("Look out, here comes TzTok-Jad!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(2619, 4883);
			sendFrame164(4882);
			Server.s.npcHandler.newNPC(2745, 2416, 5081, heightLevel, 0, 0, 0,
					0, false, playerId);
			KilledTz = 25;
			NeededKills = 26;
		}
	}

	public void KilledJad() {
		updateHp(getLevelForXP(playerXP[3]), true);
		for (int i = 0; i < 21; i++) {
			playerLevel[i] = getLevelForXP(playerXP[i]);
		}
		for (int i = 0; i < 21; i++) {
			setSkillLevel(i);
		}
		sendFrame200(4883, 591);
		changeText126(getNpcName(2619), 4884);
		changeText126("You defeated Jad! Please accept this gift.", 4885);
		changeText126("Click here to continue", 4886);
		sendFrame75(2619, 4883);
		sendFrame164(4882);
		if (!addItem(6570, 1)) {
			Server.s.itemHandler.NpcDropItem(6570, 1, 2439, 5169, playerId);
		}
		NeededKills = -1;
		tzWave = 0;
		changeCoords(2439, 5169, 0);
		killMyNPCs();
	}

	public void showInterface(int interfaceid) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(97);
		outStream.writeWord(interfaceid);
	}

	public void ReplaceObject(int objectX, int objectY, int NewObjectID,
			int Face, int ObjectType) {
		outStream.createFrame(85);
		outStream.writeByteC(objectY - (mapRegionY * 8));
		outStream.writeByteC(objectX - (mapRegionX * 8));
		outStream.createFrame(101);
		outStream.writeByteC((ObjectType << 2) + (Face & 3));
		outStream.writeByte(0);
		if (NewObjectID != -1) {
			outStream.createFrame(151);
			outStream.writeByteS(0);
			outStream.writeWordBigEndian(NewObjectID);
			outStream.writeByteS((ObjectType << 2) + (Face & 3));
		}
	}

	public void ReplaceObject2(int objectX, int objectY, int NewObjectID,
			int Face, int ObjectType) {
		outStream.createFrame(85);
		outStream.writeByteC(objectY - (mapRegionY * 8));
		outStream.writeByteC(objectX - (mapRegionX * 8));
		outStream.createFrame(101);
		outStream.writeByteC((ObjectType << 2) + (Face & 3));
		outStream.writeByte(0);
		if (NewObjectID != -1) {
			outStream.createFrame(151);
			outStream.writeByteS(0);
			outStream.writeWordBigEndian(NewObjectID);
			outStream.writeByteS((ObjectType << 2) + (Face & 3));
		}
	}

	public void ReplaceServerObject(int x, int y, int obj, int face, int t) {
		for (int i = 0; i < PlayerHandler.maxPlayers; i++) {
			Client c = (Client) PlayerHandler.players[i];
			if (c == null || c.disconnected) {
				continue;
			}
			c.ReplaceObject2(x, y, obj, face, t);
		}
	}

	public void deletethatobject(int objectX, int objectY) {
		ReplaceObject2(objectX, objectY, 6951, -1, 10);
	}

	public void Deleteobjects() {
		deletethatobject(2862, 3335); // Barrel
		deletethatobject(2861, 3335); // Barrel
		deletethatobject(2859, 3335); // Table
		deletethatobject(2857, 3335); // Stool
		deletethatobject(2851, 3332); // Oak Tree
		deletethatobject(2864, 3338); // Rocking Chair
		deletethatobject(2855, 3332); // Flowers
		deletethatobject(2858, 3333); // Flowers
		deletethatobject(2861, 3334); // Flowers
		deletethatobject(2864, 3334); // Flowers
		deletethatobject(2844, 3340); // Flowers
		deletethatobject(2849, 3333); // Flowers
		deletethatobject(2846, 3342); // Flower
		deletethatobject(2856, 3333); // Flower
		deletethatobject(2857, 3331); // Flower
		deletethatobject(2863, 3334); // Flower
		deletethatobject(2854, 3335); // Flower
		deletethatobject(2862, 3342); // Flower
		deletethatobject(2862, 3333); // Bush
		deletethatobject(2862, 3340); // Bush
		deletethatobject(2846, 3340); // Bush
		deletethatobject(2854, 3339); // Bush
		deletethatobject(2845, 3337); // Crate
		deletethatobject(2844, 3337); // Crate
		deletethatobject(2844, 3338); // Crate
		deletethatobject(2844, 3333); // Bench
		deletethatobject(2845, 3338); // Bench
		deletethatobject(2854, 3332); // Fern
		deletethatobject(2851, 3336); // Fern
		deletethatobject(2851, 3353); // Font
	}

	public void CreateNewObjects() {
		CreateObject(2903, 2732, 1281, 10, 0, 0);// Oak Tree
		CreateObject(2921, 2713, 1281, 10, 0, 0);// Oak Tree
		CreateObject(2917, 2729, 1281, 10, 0, 0);// Oak Tree
		CreateObject(2932, 2720, 1281, 10, 0, 0);// Oak Tree
		CreateObject(2818, 3386, 2318, 10, 0, 0);// Dagannoth Manhole
		CreateObject(2809, 3377, 3828, 10, 0, 0);// Kalphite Tunnel Entrance
		CreateObject(3565, 3309, 4150, 10, 0, 0);// Barrows Portal Out
		CreateObject(3257, 3452, 4150, 10, 0, 0);// Barrows Portal In
		CreateObject(2981, 3462, 9020, 10, 0, 0);// Jungle Tree For Legends
													// Quest
		CreateObject(2982, 3461, 9020, 10, 0, 0);// Jungle Tree For Legends
													// Quest
		CreateObject(2982, 3460, 9020, 10, 0, 0);// Jungle Tree For Legends
													// Quest
		CreateObject(2981, 3461, 10, 10, 0, 0);// Ladder For Legends Quest
		CreateObject(2953, 3218, 4878, 10, 0, 0);// Thieving Stall
		CreateObject(2963, 3211, 2783, 10, 0, 0);// Anvil
		CreateObject(2961, 3219, 11666, 10, 1, 0);// Furnace
		CreateObject(2862, 3340, 7965, 10, 1, 0);// Farming
		CreateObject(3037, 3439, 1307, 10, 0, 0);// Maple Tree
		CreateObject(3041, 3448, 1307, 10, 0, 0);// Maple Tree
		CreateObject(2950, 3197, 1307, 10, 0, 0);// Maple Tree
		CreateObject(3249, 3467, 1309, 10, 0, 0);// Yew Tree
		CreateObject(3044, 3916, 1306, 10, 0, 0);// Magic Tree
		CreateObject(2946, 3197, 1306, 10, 0, 0);// Magic Tree
		CreateObject(2956, 3210, 2091, 10, 0, 0);// Rocks
		CreateObject(2957, 3210, 2094, 10, 0, 0);// Rocks
		CreateObject(2959, 3212, 2093, 10, 0, 0);// Rocks
		CreateObject(2959, 3213, 2097, 10, 0, 0);// Rocks
		CreateObject(2957, 3215, 2103, 10, 0, 0);// Rocks
		CreateObject(2956, 3215, 2105, 10, 0, 0);// Rocks
		CreateObject(3050, 9744, 2105, 10, 0, 0);// Rocks
		CreateObject(2954, 3212, 2107, 10, 0, 0);// Rocks
		CreateObject(2954, 3213, 2107, 10, 0, 0);// Rocks
		CreateObject(3040, 9743, 2107, 10, 0, 0);// Rocks
		CreateObject(3043, 9745, 2107, 10, 0, 0);// Rocks
		CreateObject(3042, 9748, 2107, 10, 0, 0);// Rocks
		CreateObject(3044, 9747, 2107, 10, 0, 0);// Rocks
		CreateObject(3224, 3937, 14859, 10, 0, 0);// Runite Rock
		CreateObject(3220, 3938, 14859, 10, 0, 0);// Runite Rock
		CreateObject(3183, 3218, 2460, 10, 0, 0);// Nature Ruins
		CreateObject(3202, 3348, 2458, 10, 0, 0);// Death Ruins
		CreateObject(3227, 3369, 2459, 10, 0, 0);// Law Ruins
		CreateObject(3267, 3963, 2490, 10, 0, 0);// Blood Altar
		CreateObject(2206, 4958, 4767, 10, 0, 0);// Sacrificial Pyre
		CreateObject(2206, 4961, 83, 10, 0, 0);// Null
		CreateObject(2209, 4961, 83, 10, 0, 0);// Null
		CreateObject(2209, 4958, 83, 10, 0, 0);// Null
		CreateObject(2192, 4973, 824, 10, 0, 0);// Wooden Defence
		CreateObject(2193, 4973, 824, 10, 0, 0);// Wooden Defence
		CreateObject(2206, 4974, 1948, 10, 0, 0);// Crumbling Wall
		CreateObject(2206, 4975, 1948, 10, 0, 0);// Crumbling Wall
		CreateObject(3051, 3498, 6552, 10, 0, 1);// Ancient Altar
		CreateObject(2855, 3351, 6552, 10, 2, 0);// Ancient Altar
		CreateObject(2817, 9829, 3403, 10, 0, 0);// Elemental(Lunar) Rock
		CreateObject(2819, 9831, 3403, 10, 0, 0);// Elemental(Lunar) Rock
		CreateObject(2820, 9825, 3403, 10, 0, 0);// Elemental(Lunar) Rock
		CreateObject(2856, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2857, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2858, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2859, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2860, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2861, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2862, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2863, 3338, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2860, 3334, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2859, 3334, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2858, 3334, 2213, 10, 0, 0);// Bank Booth
		CreateObject(2943, 3286, 2213, 10, 0, 0);// Bank Booth
		// New Test
		CreateObject(2203, 4936, 6951, 10, 0, 0);
		CreateObject(2204, 4937, 6951, 10, 0, 0);
		CreateObject(2206, 4936, 6951, 10, 0, 0);
		CreateObject(2203, 4940, 6951, 10, 0, 0);
		CreateObject(2203, 4943, 6951, 10, 0, 0);
		CreateObject(2203, 4941, 6951, 10, 0, 0);
		CreateObject(2202, 4940, 6951, 10, 0, 0);
		CreateObject(2202, 4941, 6951, 10, 0, 0);
		CreateObject(2202, 4942, 6951, 10, 0, 0);
		CreateObject(2202, 4943, 6951, 10, 0, 0);
		CreateObject(2201, 4939, 6951, 10, 0, 0);
		CreateObject(2200, 4939, 6951, 10, 0, 0);
		CreateObject(2200, 4940, 6951, 10, 0, 0);
		CreateObject(2209, 4936, 6951, 10, 0, 0);
		CreateObject(2212, 4936, 6951, 10, 0, 0);
		CreateObject(2213, 4936, 6951, 10, 0, 0);
		CreateObject(2212, 4937, 6951, 10, 0, 0);
		CreateObject(2215, 4938, 6951, 10, 0, 0);
		CreateObject(2215, 4939, 6951, 10, 0, 0);
		CreateObject(2212, 4941, 6951, 10, 0, 0);
		CreateObject(2207, 4935, 6951, 10, 0, 0);
		CreateObject(3079, 3489, 1814, 4, 3, 0);// Lever
		CreateObject(3095, 3232, 2646, 10, 0, 0);// Flax
		CreateObject(3094, 3234, 2646, 10, 0, 0);// Flax
		CreateObject(3096, 3236, 2646, 10, 0, 0);// Flax
		CreateObject(3098, 3237, 2646, 10, 0, 0);// Flax
		CreateObject(3100, 3236, 2646, 10, 0, 0);// Flax
		CreateObject(3099, 3234, 2646, 10, 0, 0);// Flax
		CreateObject(3098, 3232, 2646, 10, 0, 0);// Flax
		CreateObject(3100, 3231, 2646, 10, 0, 0);// Flax
		CreateObject(3100, 3231, 2646, 10, 0, 0);// Flax
		CreateObject(3100, 3231, 2646, 10, 0, 0);// Flax
		CreateObject(3100, 3232, 2646, 10, 0, 0);// Flax
		CreateObject(3103, 3256, 2644, 10, 2, 0);// Spinning Wheel
		CreateObject(2525, 4637, 1292, 10, 0, 4);// Dramen Tree
		CreateObject(3230, 3193, 3213, 10, 0, 0);// Underground pass entrance
		CreateObject(2852, 3333, 6282, 10, 0, 0);// Teleportation device
		CreateObject(2717, 9823, 4390, 10, 0, 4);// Clan Wars Red
		CreateObject(2717, 9823, 4389, 10, 0, 8);// Clan Wars Blue
	}

	public void slayerNPCKilled(int npcId, int maxHp) {
		if (slayerAmt == 0) {
			return;
		}
		if (slayerId == npcId) {
			slayerAmt--;
			addSkillXP(maxHp * slayerXpInc, 18);
			if (slayerAmt == 0) {
				sendMessage("Slayer task completed!");
				slayerId = 0;
			}
		}
	}

	public void CreateObject(int objectX, int objectY, int NewObjectID,
			int Face, int Ori, int height) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		if (heightLevel != height) {
			return;
		}
		if (WithinDistance(objectX, objectY, absX, absY, 60)) {
			outStream.createFrame(85);
			outStream.writeByteC(objectY - (mapRegionY * 8));
			outStream.writeByteC(objectX - (mapRegionX * 8));
			outStream.createFrame(151);
			outStream.writeByteA(0);
			outStream.writeWordBigEndian(NewObjectID);
			outStream.writeByteS((Face << 2) + (Ori & 3));
		}
	}

	public void createGlobalObject(int x, int y, int typeID, int orientation,
			int tileObjectType) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				Client plr = (Client) Server.s.playerHandler.players[i];
				if (WithinDistance(objectX, objectY, plr.absX, absY, 60)) {
					plr.outStream.createFrame(85);
					plr.outStream.writeByteC(y - (mapRegionY * 8));
					plr.outStream.writeByteC(x - (mapRegionX * 8));
					plr.outStream.createFrame(151);
					plr.outStream.writeByteA(0);
					plr.outStream.writeWordBigEndian(typeID);
					plr.outStream.writeByteS((tileObjectType << 2)
							+ (orientation & 3));
				}
			}
		}
	}

	public boolean clickedNPC1 = false;
	public boolean clickedNPC2 = false;
	public int NpcSlot = 0;

	public void FirstClickNpc() {
		if (!clickedNPC1) {
			NpcSlot = inStream.readSignedWordBigEndian();
		}
		int NpcType = Server.s.npcHandler.npcs[NpcSlot].NpcType;
		int NpcX = Server.s.npcHandler.npcs[NpcSlot].absX;
		int NpcY = Server.s.npcHandler.npcs[NpcSlot].absY;
		TurnPlayerTo(NpcSlot);
		NPC npc = Server.s.npcHandler.npcs[NpcSlot];
		clickedNPC1 = true;
		if (WithinDistance(NpcX, NpcY, absX, absY, 1)) {
			clickedNPC1 = false;
			if (NpcType == 560 || NpcType == 534) {
				NpcDialogue = 5;
				NpcTalkTo = NpcType;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 219) {
				ViewShop(54);
			} else if (NpcType == 643) {
				NpcDialogue = 166;
				NpcTalkTo = 643;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1425) {
				NpcDialogue = 262;
				NpcTalkTo = 1425;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 972) {
				NpcDialogue = 296;
				NpcTalkTo = 972;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1413) {
				if (monkeyMadnessQuest == 1) {
					NpcDialogue = 239;
					NpcTalkTo = 1413;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (monkeyMadnessQuest == 2) {
					sendMessage("Lumo told you to go find Bunkdo.");
					sendMessage("He told you to look south-east of the jail.");
				}
			} else if (NpcType == 212) {
				if (isMember == 0) {
					sendMessage("Only premium members can complete this quest.");
					return;
				}
				if (monkeyMadnessQuest == 0) {
					NpcDialogue = 277;
					NpcTalkTo = 212;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (monkeyMadnessQuest == 7 || monkeyMadnessQuest == 8
						&& BankAndInvItemAmt(4035) == 0) {
					NpcDialogue = 283;
					NpcTalkTo = 212;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("He is busy right now.");
				}
			} else if (NpcType == 1415) {
				if (monkeyMadnessQuest == 2) {
					NpcDialogue = 249;
					NpcTalkTo = 1415;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (monkeyMadnessQuest == 3) {
					sendMessage("Bunkdo told you to go find Carado.");
					sendMessage("He told you to look in the buildings for him.");
				}
			} else if (NpcType == 1417) {
				if (monkeyMadnessQuest == 3) {
					NpcDialogue = 257;
					NpcTalkTo = 1417;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (monkeyMadnessQuest == 4) {
					sendMessage("I need to head into the dungeon now.");
				}
			} else if (NpcType == 652) {
				if (lostCityQuest == 0) {
					NpcDialogue = 231;
					NpcTalkTo = 652;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 237;
					NpcTalkTo = 652;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 649) {
				if (lostCityQuest == 1) {
					NpcDialogue = 233;
					NpcTalkTo = 649;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 237;
					NpcTalkTo = 649;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 651) {
				if (lostCityQuest == 2) {
					NpcDialogue = 235;
					NpcTalkTo = 651;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 237;
					NpcTalkTo = 651;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2399) {
				if (curseZarosQuest == 0) {
					NpcDialogue = 178;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2397) {
				if (curseZarosQuest == 1) {
					NpcDialogue = 187;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2400) {
				if (curseZarosQuest == 2) {
					NpcDialogue = 196;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2401) {
				if (curseZarosQuest == 3) {
					NpcDialogue = 203;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2398) {
				if (curseZarosQuest == 4) {
					NpcDialogue = 211;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 2402) {
				if (curseZarosQuest == 5) {
					NpcDialogue = 219;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 227;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 587) {
				if (getLevelForXP(playerXP[playerHerblore]) >= 99) {
					ViewShop(41);
				} else {
					sendMessage("You need 99 Herblore to view this shop.");
				}
			} else if (NpcType == 567) {
				ViewShop(49);
			} else if (NpcType == 2536) {
				ViewShop(56);
			} else if (NpcType == 2538) {
				ViewShop(57);
			} else if (NpcType == 1078) {
				ViewShop(58);
			} else if (NpcType == 364) {
				ViewShop(59);
			} else if (NpcType == 1450) {
				if (monkeyMadnessQuest >= 9) {
					ViewShop(50);
				}
			} else if (NpcType == 373) {
				if (getLevelForXP(playerXP[playerHitpoints]) >= 99) {
					ViewShop(42);
				} else {
					sendMessage("You need 99 Hitpoints to view this shop.");
				}
			} else if (NpcType == 549) {
				if (getLevelForXP(playerXP[playerSmithing]) < 99
						&& getLevelForXP(playerXP[playerMining]) < 99) {
					ViewShop(22);
				} else {
					ViewShop(36);
				}
			} else if (NpcType == 904) {
				ViewShop(34);
			} else if (NpcType == 2138) {
				ViewShop(39);
			} else if (NpcType == 536) {
				ViewShop(32);
			} else if (NpcType == 548) {
				ViewShop(23);
			} else if (NpcType == 540) {
				ViewShop(27);
			} else if (NpcType == 608) {
				NpcDialogue = 157;
				NpcTalkTo = 608;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 2139) {
				NpcDialogue = 124;
				NpcTalkTo = 2139;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 2802) {
				NpcDialogue = 297;
				NpcTalkTo = 2802;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 218) {
				NpcDialogue = 299;
				NpcTalkTo = 218;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 227) {
				NpcDialogue = 300;
				NpcTalkTo = 227;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1055) {
				NpcDialogue = 301;
				NpcTalkTo = 1055;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1699) {
				NpcDialogue = 298;
				NpcTalkTo = 1699;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 247) {
				NpcDialogue = 150;
				NpcTalkTo = 247;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 905) {
				if (mageArenaQuest < 6) {
					NpcDialogue = 120;
					NpcTalkTo = 905;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("You have already completed this quest!");
				}
			} else if (NpcType == 2253) {
				if (lunarQuest == 0
						&& getLevelForXP(playerXP[playerDefence]) >= 40) {
					NpcDialogue = 127;
					NpcTalkTo = 2253;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (lunarQuest == 1) {
					NpcDialogue = 140;
					NpcTalkTo = 2253;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (lunarQuest == 2 && InvItemAmt(8013) > 0
						&& InvItemAmt(8014) > 0 && InvItemAmt(8015) > 0
						&& InvItemAmt(8016) > 0 && InvItemAmt(8017) > 0
						&& InvItemAmt(8018) > 0 && InvItemAmt(8081) > 0
						&& InvItemAmt(8082) > 0 && InvItemAmt(8083) > 0) {
					NpcDialogue = 145;
					NpcTalkTo = 2253;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (lunarQuest == 2) {
					NpcDialogue = 144;
					NpcTalkTo = 2253;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 142;
					NpcTalkTo = 2253;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 657) {
				if (lunarQuest == 0) {
					if (getLevelForXP(playerXP[playerPrayer]) < 99) {
						NpcDialogue = 141;
						NpcTalkTo = 657;
						DialogueSend();
						CurrentFrame = 13901;
					} else {
						ViewShop(45);
					}
				} else if (lunarQuest == 1) {
					NpcDialogue = 132;
					NpcTalkTo = 657;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (lunarQuest == 2) {
					NpcDialogue = 143;
					NpcTalkTo = 657;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					if (getLevelForXP(playerXP[playerPrayer]) < 99) {
						NpcDialogue = 141;
						NpcTalkTo = 657;
						DialogueSend();
						CurrentFrame = 13901;
					} else {
						ViewShop(45);
					}
				}
			} else if (NpcType == 1597) {
				if (slayerAmt > 0) {
					NpcDialogue = 104;
					NpcTalkTo = 1597;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					if (getLevelForXP(playerXP[playerSlayer]) < 99) {
						NpcDialogue = 102;
						NpcTalkTo = 1597;
						DialogueSend();
						CurrentFrame = 13901;
					} else {
						NpcDialogue = 230;
						NpcTalkTo = 1597;
						DialogueSend();
						CurrentFrame = 13901;
					}
				}
			} else if (NpcType == 741) {
				if (runeMysteriesQuest == 0) {
					NpcDialogue = 107;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("He is busy!");
				}
			} else if (NpcType == 300) {
				if (runeMysteriesQuest == 1 && InvItemAmt(1438) > 0) {
					NpcDialogue = 110;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (runeMysteriesQuest == 3 && InvItemAmt(291) > 0) {
					runeMysteriesQuest = 4;
					deleteItem(291, GetItemSlot(291), 1);
					addItem(1438, 1);
					changeText126(
							"You have completed the Rune Mysteries Quest!", 301);
					showInterface(297);
					loadQuestTab();
				} else if (getLevelForXP(playerXP[playerRunecrafting]) >= 99) {
					ViewShop(47);
				} else {
					sendMessage("You need 99 Runecrafting to view this shop.");
				}
			} else if (NpcType == 461 || NpcType == 553) {
				if (runeMysteriesQuest == 2 && InvItemAmt(290) > 0) {
					NpcDialogue = 112;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (getLevelForXP(playerXP[playerMagic]) < 99) {
					ViewShop(5);
				} else {
					ViewShop(37);
				}
			} else if (NpcType == 545) {
				if (getLevelForXP(playerXP[playerCrafting]) >= 99) {
					ViewShop(46);
				} else {
					sendMessage("You need 99 Crafting to view this shop.");
				}
			} else if (NpcType == 544) {
				ViewShop(30);
			} else if (NpcType == 541) {
				ViewShop(31);
			} else if (NpcType == 542) {
				ViewShop(29);
			} else if (NpcType == 546) {
				ViewShop(24);
			} else if (NpcType == 538) {
				ViewShop(25);
			} else if (NpcType == 1783) {
				ViewShop(26);
			} else if (NpcType == 398) {
				if (legendQuest == 0) {
					NpcDialogue = 84;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (legendQuest == 2) {
					NpcDialogue = 90;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("He is busy.");
				}
			} else if (NpcType == 2508) {
				if (getLevelForXP(playerXP[playerAttack]) < 99
						&& getLevelForXP(playerXP[playerStrength]) < 99) {
					NpcDialogue = 115;
					NpcTalkTo = 2508;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					NpcDialogue = 125;
					NpcTalkTo = 2508;
					DialogueSend();
					CurrentFrame = 13901;
				}
			} else if (NpcType == 650) {
				if (getLevelForXP(playerXP[playerStrength])
						+ getLevelForXP(playerXP[playerAttack]) >= 70) {
					NpcDialogue = 118;
					NpcTalkTo = 650;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					sendMessage("You attack & strength must add up to atleast 70!");
				}
			} else if (NpcType == 557) {
				NpcDialogue = 72;
				NpcTalkTo = 557;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 460) {
				NpcDialogue = 75;
				NpcTalkTo = 460;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 520) {
				NpcDialogue = 78;
				NpcTalkTo = 520;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1303) {
				NpcDialogue = 11;
				NpcTalkTo = 1303;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 563) {
				NpcDialogue = 69;
				NpcTalkTo = 563;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 580) {
				NpcDialogue = 66;
				NpcTalkTo = 580;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 577) {
				NpcDialogue = 63;
				NpcTalkTo = 577;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1) {
				/*
				 * if (playerName.equals("Mrquarter")) {
				 * Server.s.npcHandler.npcs[NpcSlot].StartAnimation(2108);
				 * Server
				 * .s.npcHandler.npcs[NpcSlot].showText("Canownueasy is hot"); }
				 * displayText("Ew gay nub"); NpcDialogue = 45; NpcTalkTo = 1;
				 * DialogueSend(); CurrentFrame = 13901;
				 */
			} else if (NpcType == 4) {
				/*
				 * if (playerName.equals("Mrquarter")) {
				 * Server.s.npcHandler.npcs[NpcSlot].StartAnimation(2108);
				 * Server
				 * .s.npcHandler.npcs[NpcSlot].showText("Canownueasy is hot"); }
				 * NpcDialogue = 46; NpcTalkTo = 4; DialogueSend(); CurrentFrame
				 * = 13901;
				 */
			} else if (NpcType == 1305) {
				NpcDialogue = 47;
				NpcTalkTo = 1305;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 683 || NpcType == 550) {
				if (getLevelForXP(playerXP[playerRanged]) < 99) {
					NpcDialogue = 14;
					NpcTalkTo = NpcType;
					DialogueSend();
					CurrentFrame = 13901;
				} else {
					ViewShop(35);
				}
			} else if (NpcType == 537) {
				NpcDialogue = 17;
				NpcTalkTo = 537;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 3786) {
				NpcDialogue = 8;
				NpcTalkTo = 3786;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 561) {
				if (getLevelForXP(playerXP[playerFishing]) >= 99
						|| getLevelForXP(playerXP[playerCooking]) >= 99) {
					ViewShop(43);
				} else {
					sendMessage("You need 99 Fishing or Cooking to view this shop.");
				}
			} else if (NpcType == 924) {
				if (getLevelForXP(playerXP[playerThieving]) >= 99) {
					ViewShop(44);
				} else {
					sendMessage("You need 99 Thieving to view this shop.");
				}
			} else if (NpcType == 316) {
				if (InvItemAmt(303) >= 1) {
					if (playerLevel[playerFishing] >= 1) {
						startToFish(3, 317, 620, 10 * fishXpInc);
						fishDelayFinal = 3;
					} else {
						// sendMessage("You need 1 Fishing to catch this!");
						showDialogue("You need 1 Fishing to catch this!");
					}
				} else {
					// sendMessage("You need a fishing net to catch this!");
					showDialogue("You need a fishing net to catch this!");
				}
			} else if (NpcType == 320) {
				if (InvItemAmt(303) >= 1) {
					if (playerLevel[playerFishing] >= 15) {
						startToFish(5, 321, 620, 40 * fishXpInc);
						fishDelayFinal = 5;
					} else // sendMessage("You need 15 Fishing to catch this!");
					{
						showDialogue("You need 15 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing net to catch this!");
				{
					showDialogue("You need a fishing net to catch this!");
				}
			} else if (NpcType == 314) {
				if (InvItemAmt(309) >= 1 && InvItemAmt(314) >= 1) {
					if (playerLevel[playerFishing] >= 20) {
						startToFish(7, 335, 622, 50 * fishXpInc);
						fishDelayFinal = 7;
					} else {
						showDialogue("You need 20 Fishing to catch this!");
					}
				} else {
					showDialogue("You need a fly fishing rod to catch this!");
				}
			} else if (NpcType == 313) {
				if (InvItemAmt(305) >= 1) {
					if (playerLevel[playerFishing] >= 30) {
						startToFish(9, 331, 620, 70 * fishXpInc);
						fishDelayFinal = 9;
					} else // sendMessage("You need 30 Fishing to catch this!");
					{
						showDialogue("You need 30 Fishing to catch this!");
					}
				} else // sendMessage("You need a big fishing net to catch this!");
				{
					showDialogue("You need a big fishing net to catch this!");
				}
			} else if (NpcType == 312) {
				if (InvItemAmt(301) >= 1) {
					if (playerLevel[playerFishing] >= 40) {
						startToFish(11, 377, 619, 90 * fishXpInc);
						fishDelayFinal = 11;
					} else // sendMessage("You need 40 Fishing to catch this!");
					{
						showDialogue("You need 40 Fishing to catch this!");
					}
				} else // sendMessage("You need a lobster pot to catch this!");
				{
					showDialogue("You need a lobster pot to catch this!");
				}
			} else if (NpcType == 322) {
				if (InvItemAmt(303) >= 1) {
					if (playerLevel[playerFishing] >= 62) {
						startToFish(13, 7944, 620, 120 * fishXpInc);
						fishDelayFinal = 13;
					} else // sendMessage("You need 62 Fishing to catch this!");
					{
						showDialogue("You need 62 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing net to catch this!");
				{
					showDialogue("You need a fishing net to catch this!");
				}
			} else if (NpcType == 234) {
				if (InvItemAmt(303) >= 1) {
					if (playerLevel[playerFishing] >= 88) {
						startToFish(15, 389, 620, 300 * fishXpInc);
						fishDelayFinal = 15;
					} else // sendMessage("You need 62 Fishing to catch this!");
					{
						showDialogue("You need 88 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing net to catch this!");
				{
					showDialogue("You need a fishing net to catch this!");
				}
			} else if (NpcType == 461) {
				NpcDialogue = 20;
				NpcTalkTo = 461;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 2270) {
				NpcDialogue = 54;
				NpcTalkTo = 2270;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 462) {
				NpcDialogue = 23;
				NpcTalkTo = 462;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1281) {
				NpcDialogue = 26;
				NpcTalkTo = 1281;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1283) {
				NpcDialogue = 29;
				NpcTalkTo = 1283;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 1282) {
				NpcDialogue = 48;
				NpcTalkTo = NpcType;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 2262) {
				/* Arrow Maker */
				if (InvItemAmt(995) >= 10000) {
					if (InvItemAmt(52) >= 100) {
						deleteItem(995, GetItemSlot(995), 10000);
						deleteItem(52, GetItemSlot(52), 100);
						int arrowType = Misc.random(6);
						if (arrowType == 6) {
							addItem(892, 100);
						} else if (arrowType == 5) {
							addItem(890, 100);
						} else if (arrowType == 4) {
							addItem(888, 100);
						} else if (arrowType == 3) {
							addItem(886, 100);
						} else if (arrowType == 2) {
							addItem(884, 100);
						} else if (arrowType == 1) {
							addItem(877, 100);
						} else if (arrowType == 0) {
							addItem(882, 100);
						}
					} else // sendMessage("You need atleast 100 arrow shafts.");
					{
						showDialogue("You need atleast 100 arrow shafts.");
					}
				} else // sendMessage("You need 10k if you want arrows.");
				{
					showDialogue("You need 10k in you want arrows.");
				}
			} else if (NpcType == 2258) {
				NpcTalkTo = 2258;
				CurrentFrame = 13901;
				if (absX >= 3090 && absX <= 3110 && absY >= 3545
						&& absY <= 3560) {
					if (mageZQuest == 4) {
						NpcDialogue = 60;
					} else if (mageZQuest == 0) {
						NpcDialogue = 92;
					} else {
						sendMessage("Talk to him in Varrock!");
					}
				} else {
					if (mageZQuest == 2 && InvItemAmt(1442) >= 1
							&& InvItemAmt(1436) >= 3 && InvItemAmt(555) >= 3) {
						NpcDialogue = 97;
					} else if (mageZQuest == 1 || mageZQuest == 2) {
						NpcDialogue = 95;
					} else {
						sendMessage("Talk to him in Edgeville!");
					}
				}
				DialogueSend();
				teleWindow = false;
			} else if (NpcType == 2619) {
				NpcDialogue = 2;
				NpcTalkTo = 2619;
				DialogueSend();
				CurrentFrame = 13901;
				teleWindow = true;
			} else if (NpcType == 1702 || NpcType == 498) {
				if (bankPin != -1) {
					changeText126("@gre@Set", 15105);// unkown + status
				} else {
					changeText126("@red@NONE", 15105);// unkown + status
				}
				NpcDialogue = 2;
				NpcTalkTo = NpcType;
				DialogueSend();
				CurrentFrame = 13901;
				teleWindow = true;
			} else if (NpcType == 494) {
				NpcDialogue = 2;
				NpcTalkTo = 494;
				DialogueSend();
				CurrentFrame = 13901;
				teleWindow = true;
			} else if (NpcType == 37) {
				NpcDialogue = 1;
				NpcTalkTo = 37;
				DialogueSend();
				CurrentFrame = 13901;
				teleWindow = true;
			} else if (NpcType == 1304) {
				NpcDialogue = 51;
				NpcTalkTo = 1304;
				DialogueSend();
				CurrentFrame = 13901;
				teleWindow = true;
			} else if (NpcType == 258) {
				NpcDialogue = 32;
				NpcTalkTo = 258;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 3789) {
				NpcDialogue = 35;
				NpcTalkTo = 3789;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 804) {
				NpcDialogue = 38;
				NpcTalkTo = 3788;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 500 || NpcType == 3198 || NpcType == 51
					|| NpcType == 3850) {
				if (npc != pet) {
					showDialogue("That is not your pet to shoo!");
					return;
				}
				showDialogue("You shoo your pet away.");
				removePet(false);
			} else if (NpcType == 2633) {
				if (HasItemAmount(4837, 1)) {
					showDialogue("It seems like you already have a book of necromancy.");
					return;
				}
				showDialogue("He remains quiet and hands you a book of necromancy.");
				addItem(4837, 1);
			} else if (NpcType == 3787) {
				pcStatSelect = 0;
				changeText126("@yel@Attack", 18767);
				changeText126("@yel@Strength", 18768);
				changeText126("@yel@Defence", 18769);
				changeText126("@yel@Ranged", 18770);
				changeText126("@yel@Magic", 18771);
				changeText126("@yel@Hitpoints", 18772);
				changeText126("@yel@Prayer", 18773);
				changeText126("@yel@Points: " + pcPoints, 18783);
				showInterface(18691);
			} else if (NpcType == 256) {
				NpcDialogue = 44;
				NpcTalkTo = 256;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 3306) {
				ViewShop(60);
			} else if (NpcType == 3827) {
				if (Server.s.ClanWars.teamBluePlayers.size() < Server.s.ClanWars.teamRedPlayers
						.size()) {
					Server.s.ClanWars.addPlayer(this, "Blue");
				} else if (Server.s.ClanWars.teamBluePlayers.size() > Server.s.ClanWars.teamRedPlayers
						.size()) {
					Server.s.ClanWars.addPlayer(this, "Red");
				} else if (Server.s.ClanWars.teamBluePlayers.size() == Server.s.ClanWars.teamRedPlayers
						.size()) {
					if (Misc.random(1) == 1) {
						Server.s.ClanWars.addPlayer(this, "Blue");
					} else {
						Server.s.ClanWars.addPlayer(this, "Red");
					}
				}
			} else if (NpcType == 1152) {
				// showDialogue("You instantly teleport to a dark cave!");
				ZombieMinigame.addToGame(this);
				// sendMessage("Nazi zombies is currently under development");
			} else if (NpcType == 1294) {
				if (HasItemAmount(594, 1)) {
					sendMessage("He sends you off underground!");
					teleport(1752, 5236);
				} else {
					showDialogue("You need torches to go down, or you can't see!");
				}
			} else if (NpcType == 946) {
				npc.TurnNpcTo(absX, absY);
				npc.playAnimation(1818);
				playAnimation(1816, 30);
				EventManager.getSingleton().addEvent(new Event() {
					public void execute(EventContainer event) {
						teleport(2809, 3440);
						sendMessage("You were teleported to Catherby!");
						playAnimation(715, 0);
						event.stop();
					}
				}, 1500);
			} else {
				System.out.println("[CLIENT]: " + playerName
						+ " Talked to Npc: " + NpcType);
			}
		}
	}

	public void ViewShop(int ShopID) {
		resetShop(ShopID);
		changeText126(Server.s.shopHandler.ShopName[ShopID], 3901);
		sendFrame248(3824, 3822);
		CurrentFrame = 3824;
		resetItems(3823);
		MyShopID = ShopID;
		IsShopping = true;
	}

	public int thiefDelay = 0;

	public void ThirdClickNpc() {
		NpcSlot = inStream.readUnsignedWord();
		int NpcType = Server.s.npcHandler.npcs[NpcSlot].NpcType;
		int NpcX = Server.s.npcHandler.npcs[NpcSlot].absX;
		int NpcY = Server.s.npcHandler.npcs[NpcSlot].absY;
		TurnPlayerTo(NpcSlot);
		if (WithinDistance(NpcX, NpcY, absX, absY, 1)) {
			if (NpcType == 553) {
				NpcDialogue = 48;
				NpcTalkTo = NpcType;
				DialogueSend();
				CurrentFrame = 13901;
			}
			if (NpcType == 1597) {
				ViewShop(33);
			}
		}
	}

	public int gloryId = 0;

	public void SecondClickNpc() {
		if (!clickedNPC2) {
			// NpcSlot = ((misc.HexToInt(inStream.buffer, 0, packetSize) / 1000)
			// - 128);
			NpcSlot = inStream.readUnsignedWordBigEndianA();
		}
		int NpcType = Server.s.npcHandler.npcs[NpcSlot].NpcType;
		int NpcX = Server.s.npcHandler.npcs[NpcSlot].absX;
		int NpcY = Server.s.npcHandler.npcs[NpcSlot].absY;
		TurnPlayerTo(NpcSlot);
		clickedNPC2 = true;
		NPC npc = Server.s.npcHandler.npcs[NpcSlot];
		if (WithinDistance(NpcX, NpcY, absX, absY, 1)) {
			clickedNPC2 = false;
			if (NpcType == 560 || NpcType == 534) {
				ViewShop(1);
			} else if (NpcType == 643) {
				NpcDialogue = 166;
				NpcTalkTo = 643;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 561) {
				ViewShop(15);
			} else if (NpcType == 587) {
				ViewShop(40);
			} else if (NpcType == 536) {
				ViewShop(32);
			} else if (NpcType == 904) {
				ViewShop(34);
			} else if (NpcType == 519) {
				ViewShop(53);
			} else if (NpcType == 1055) {
				ViewShop(55);
			} else if (NpcType == 546) {
				ViewShop(24);
			} else if (NpcType == 542) {
				ViewShop(29);
			} else if (NpcType == 541) {
				ViewShop(31);
			} else if (NpcType == 1597) {
				ViewShop(33);
			} else if (NpcType == 571) {
				ViewShop(51);
			} else if (NpcType == 1699) {
				ViewShop(52);
			} else if (NpcType == 804) {
				changeText126("Leather", 14777);
				changeText126("1k", 14785);
				changeText126("Hard Leather", 14778);
				changeText126("1k", 14786);
				changeText126("Green-D Leather", 14779);
				changeText126("2k", 14787);
				changeText126("Blue-D Leather", 14780);
				changeText126("2k", 14788);
				changeText126("Red-D Leather", 14781);
				changeText126("2k", 14789);
				changeText126("Black-D Leather", 14782);
				changeText126("2k", 14790);
				changeText126("", 14783);
				changeText126("", 14791);
				changeText126("", 14784);
				changeText126("", 14792);
				displayItem246(14769, 250, 1741);
				displayItem246(14770, 250, 1743);
				displayItem246(14771, 250, 1745);
				displayItem246(14772, 250, 2505);
				displayItem246(14773, 250, 2507);
				displayItem246(14774, 250, 2509);
				displayItem246(14775, 250, 2511);
				showInterface(14670);
			} else if (NpcType == 544) {
				ViewShop(30);
			} else if (NpcType == 549) {
				ViewShop(22);
			} else if (NpcType == 545) {
				ViewShop(28);
			} else if (NpcType == 1783) {
				ViewShop(26);
			} else if (NpcType == 540) {
				ViewShop(27);
			} else if (NpcType == 538) {
				ViewShop(25);
			} else if (NpcType == 577) {
				ViewShop(16);
			} else if (NpcType == 548) {
				ViewShop(23);
			} else if (NpcType == 580) {
				ViewShop(17);
			} else if (NpcType == 520) {
				ViewShop(20);
			} else if (NpcType == 563) {
				ViewShop(18);
			} else if (NpcType == 557) {
				ViewShop(19);
			} else if (NpcType == 316) {
				if (InvItemAmt(307) >= 1) {
					if (playerLevel[playerFishing] >= 5) {
						startToFish(4, 327, 622, 20 * fishXpInc);
						fishDelayFinal = 4;
					} else // sendMessage("You need 5 Fishing to catch this!");
					{
						showDialogue("You need 5 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing rod to catch this!");
				{
					showDialogue("You need a fishing rod to catch this!");
				}
			} else if (NpcType == 320) {
				if (InvItemAmt(307) >= 1) {
					if (playerLevel[playerFishing] >= 10) {
						startToFish(6, 345, 622, 30 * fishXpInc);
						fishDelayFinal = 6;
					} else // sendMessage("You need 10 Fishing to catch this!");
					{
						showDialogue("You need 10 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing rod to catch this!");
				{
					showDialogue("You need a fishing rod to catch this!");
				}
			} else if (NpcType == 314) {
				if (InvItemAmt(307) >= 1) {
					if (playerLevel[playerFishing] >= 25) {
						startToFish(8, 349, 622, 60 * fishXpInc);
						fishDelayFinal = 8;
					} else // sendMessage("You need 25 Fishing to catch this!");
					{
						showDialogue("You need 25 Fishing to catch this!");
					}
				} else // sendMessage("You need a fishing rod to catch this!");
				{
					showDialogue("You need a fishing rod to catch this!");
				}
			} else if (NpcType == 313) {
				if (InvItemAmt(311) >= 1) {
					if (playerLevel[playerFishing] >= 35) {
						startToFish(10, 359, 618, 80 * fishXpInc);
						fishDelayFinal = 10;
					} else // sendMessage("You need 35 Fishing to catch this!");
					{
						showDialogue("You need 35 Fishing to catch this!");
					}
				} else // sendMessage("You need a harpoon to catch this!");
				{
					showDialogue("You need a harpoon to catch this!");
				}
			} else if (NpcType == 312) {
				if (InvItemAmt(311) >= 1) {
					if (playerLevel[playerFishing] >= 50) {
						startToFish(12, 371, 618, 100 * fishXpInc);
						fishDelayFinal = 12;
					} else // sendMessage("You need 50 Fishing to catch this!");
					{
						showDialogue("You need 50 Fishing to catch this!");
					}
				} else // sendMessage("You need a harpoon to catch this!");
				{
					showDialogue("You need a harpoon to catch this!");
				}
			} else if (NpcType == 322) {
				if (InvItemAmt(311) >= 1) {
					if (playerLevel[playerFishing] >= 76) {
						startToFish(14, 383, 618, 200 * fishXpInc);
						fishDelayFinal = 14;
					} else // sendMessage("You need 76 Fishing to catch this!");
					{
						showDialogue("You need 76 Fishing to catch this!");
					}
				} else // sendMessage("You need a harpoon to catch this!");
				{
					showDialogue("You need a harpoon to catch this!");
				}
			} else if (NpcType == 1) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (Misc.random(lvl) >= 1) {
							startAnimation(881, 1);
							sendMessage("You manage to pick the man's pocket.");
							addItem(995, 100);
							addSkillXP(8 * thiefXpInc, 17);
							thiefDelay = 4;
						} else {
							Server.s.npcHandler.npcs[NpcSlot]
									.playAnimation(422);
							Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(absX,
									absY);
							Server.s.npcHandler.npcs[NpcSlot]
									.showText("Get out of my pocket!");
							EntangleDelay = 6;
							thiefDelay = 6;
							sendMessage("The man catches you!");
							startAnimation(
									GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
									0);
							playGraphic(80, 0, 100);
							hitDiff = Misc.random(2);
							updateHp(hitDiff, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					}
				}
			} else if (NpcType == 4) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					if (thiefDelay <= 0) {
						int lvl = playerLevel[playerThieving];
						if (Misc.random(lvl) >= 1) {
							startAnimation(881, 1);
							sendMessage("You manage to pick the woman's pocket.");
							addItem(995, 100);
							addSkillXP(8 * thiefXpInc, 17);
							thiefDelay = 4;
						} else {
							Server.s.npcHandler.npcs[NpcSlot]
									.playAnimation(422);
							Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(absX,
									absY);
							Server.s.npcHandler.npcs[NpcSlot]
									.showText("Get out of my pocket!");
							EntangleDelay = 6;
							thiefDelay = 6;
							sendMessage("The woman catches you!");
							startAnimation(
									GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
									0);
							playGraphic(80, 0, 100);
							hitDiff = Misc.random(2);
							updateHp(hitDiff, false);
							updateRequired = true;
							hitUpdateRequired = true;
						}
					}
				}
			} else if (NpcType == 7) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 10) {
							if (Misc.random(lvl) >= 5) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the farmer's pocket.");
								addItem(995, 500);
								addSkillXP(15 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(408);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The farmer catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(4);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 10 thieving to pickpocket a farmer.");
						}
					}
				}
			} else if (NpcType == 15 || NpcType == 18) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 25) {
							if (Misc.random(lvl) >= 12) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the warrior's pocket.");
								addItem(995, 900);
								addSkillXP(26 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(451);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The warrior catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(4);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 25 thieving to pickpocket a warrior.");
						}
					}
				}
			} else if (NpcType == 187) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 32) {
							if (Misc.random(lvl) >= 16) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the rogue's pocket.");
								addItem(995, 1200);
								addSkillXP(36 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(412);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The rogue catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(4);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 32 thieving to pickpocket a rogue.");
						}
					}
				}
			} else if (NpcType == 9) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 40) {
							if (Misc.random(lvl) >= 20) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the guard's pocket.");
								addItem(995, 1600);
								addSkillXP(47 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(412);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The guard catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(6);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 40 thieving to pickpocket a citizen.");
						}
					}
				}
			} else if (NpcType == 1305) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 45) {
							if (Misc.random(lvl) >= 23) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the citizen's pocket.");
								addItem(995, 1800);
								addSkillXP(65 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(412);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The citizen catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(8);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 45 thieving to pickpocket a citizen.");
						}
					}
				}
			} else if (NpcType == 20) {
				if (WithinDistance(NpcX, NpcY, absX, absY, 3)) {
					int lvl = playerLevel[playerThieving];
					if (thiefDelay <= 0) {
						if (lvl >= 65) {
							if (Misc.random(lvl) >= 32) {
								startAnimation(881, 1);
								sendMessage("You manage to pick the paladin's pocket.");
								addItem(995, 2000);
								addSkillXP(151 * thiefXpInc, 17);
								thiefDelay = 4;
							} else {
								Server.s.npcHandler.npcs[NpcSlot]
										.playAnimation(412);
								Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(
										absX, absY);
								Server.s.npcHandler.npcs[NpcSlot]
										.showText("Get out of my pocket!");
								EntangleDelay = 6;
								thiefDelay = 6;
								sendMessage("The paladin catches you!");
								startAnimation(
										GetBlockEmote(getItemName(playerEquipment[playerWeapon])),
										0);
								playGraphic(80, 0, 100);
								hitDiff = Misc.random(15);
								updateHp(hitDiff, false);
								updateRequired = true;
								hitUpdateRequired = true;
							}
						} else {
							sendMessage("You need 65 thieving to pickpocket a paladin.");
						}
					}
				}
			} else if (NpcType == 1303) {
				ViewShop(2);
			} else if (NpcType == 683 || NpcType == 550) {
				ViewShop(3);
			} else if (NpcType == 537) {
				ViewShop(4);
			} else if (NpcType == 3786) {
				ViewShop(12);
			} else if (NpcType == 3789) {
				ViewShop(13);
			} else if (NpcType == 3788) {
				ViewShop(14);
			} else if (NpcType == 1282) {
				ViewShop(10);
			} else if (NpcType == 3787) {
				ViewShop(11);
			} /*
			 * else if (NpcType == 462) { NpcDialogue = 57; NpcTalkTo = 462;
			 * DialogueSend(); CurrentFrame = 13901; }
			 */else if (NpcType == 2270) {
				NpcDialogue = 54;
				NpcTalkTo = 2270;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcType == 2258) {
				if (absX >= 3025 && absX <= 3050 && absY >= 4824
						&& absY <= 4850) {
					if (!hasPin() || pinCorrect()) {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} else {
						showInterface(7424);
					}
				} else {
					sendMessage("He's busy.");
				}
			} else if (NpcType == 2619) {
				if (!hasPin() || pinCorrect()) {
					sendFrame248(5292, 5063);
					CurrentFrame = 5292;
					resetItems(5064);
				} else {
					showInterface(7424);
				}
			} else if (NpcType == 1702 || NpcType == 498) {
				if (!hasPin() || pinCorrect()) {
					sendFrame248(5292, 5063);
					CurrentFrame = 5292;
					resetItems(5064);
				} else {
					showInterface(7424);
				}
			} else if (NpcType == 51) {
				if (Server.s.npcHandler.npcs[NpcSlot] != pet) {
					showDialogue("You cannot request healing from another's pet.");
					return;
				}
				if (healWait > 0) {
					showDialogue("Your dragon's healing energy is still restoring.");
					return;
				}
				if (playerLevel[3] < 1) {
					System.out.println("[CLIENT]: Player was dead??");
					return;
				}
				healWait = 100;
				showDialogue("Your dragon performs an ancient healing spell.");
				int restore = (int) Misc.round(playerLevel[3] * 0.20, 1);
				updateHp(restore, true);
				updateRequired = true;
				Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(absX, absY);
				Server.s.npcHandler.npcs[NpcSlot].playAnimation(81);
			} else if (NpcType == 3850) {
				try {
					/*
					 * showDialogue("Feature not available yet."); return;
					 */
					if (npc != pet) {
						showDialogue("You cannot command attack from another's pet.");
						return;
					}
					pet.commandedAttack = true;
					sendMessage("Pet scheduled for attack.");
				} catch (Exception e) {
					showDialogue("You aren't in combat!");
				}
			} else if (NpcType == 500) {
				if (Server.s.npcHandler.npcs[NpcSlot] != pet) {
					showDialogue("You cannot request curing of posion from another's pet.");
					return;
				}
				if (healWait > 0) {
					// Server.s.npcHandler.npcs[NpcSlot].forceChat("Hatcha talieban! Far uruno jatope.");
					showDialogue("He needs to remake ingredients for the cure.");
					return;
				}
				healWait = 300;
				Server.s.npcHandler.npcs[NpcSlot].playAnimation(2890);
				healPoison();
				showDialogue("The Indian Chief casts a spell and cures you!");
			} else if (NpcType == 3198) {
				if (Server.s.npcHandler.npcs[NpcSlot] != pet) {
					showDialogue("You cannot request banking of items from another's pet.");
					return;
				}
				if (healWait > 0 && isExtremeMember < 1) {
					Server.s.npcHandler.npcs[NpcSlot]
							.forceChat("Sir, I need more rest until I can bank items for you again.");
					return;
				}
				healWait = 200;
				Server.s.npcHandler.npcs[NpcSlot].TurnNpcTo(absX, absY);
				Server.s.npcHandler.npcs[NpcSlot]
						.forceChat("Always a pleasure, sir.");
				EventManager.getSingleton().addEvent(new Event() {
					public void execute(EventContainer event) {
						openBank();
						event.stop();
					}
				}, 700);
			} else if (NpcType == 494) {
				if (!hasPin() || pinCorrect()) {
					sendFrame248(5292, 5063);
					CurrentFrame = 5292;
					resetItems(5064);
				} else {
					showInterface(7424);
				}
			} else if (NpcType == 461 || NpcType == 553) {
				ViewShop(5);
			} else {
				System.out.println("[CLIENT]: " + playerName + " traded Npc: "
						+ NpcType);
			}
		}
	}

	public int timeOutCounter = 0;

	public String secondsToMinutesAndSeconds(int seconds) {
		int minutes = (int) (seconds / 60);
		if (minutes == 0) {
			return seconds + " sec";
		}
		if (seconds == 0) {
			return minutes + " min";
		}
		String time = "" + minutes + " min " + (seconds - (minutes * 60))
				+ " sec";
		return time;
	}

	public boolean PacketProcess() {
		if (timeOutCounter++ > 30) {
			if (!inCombat && combatDelay <= 0 && deathDelay <= 0) {
				disconnected = true;
			}
			runStream = false;
			return false;
		}
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || !runStream) {
			return false;
		}
		try {
			int avail = in.available();
			if (avail <= 0) {
				return false;
			}
			lastResponse = System.currentTimeMillis();
			timeOutCounter = 0;
			packetType = in.read() & 0xff;
			packetType = packetType - inStreamDecryption.getNextKey() & 0xff;
			packetSize = packetSizes[packetType];
			avail--;
			if (packetSize == -1) {
				if (avail > 0) {
					packetSize = in.read() & 0xff;
					avail--;
				} else {
					return false;
				}
			}
			if (avail < packetSize) {
				return false;
			}
			fillInStream(packetSize);
			if (packetType > 0) {
				UsePacket();
			} else {
				return false;
			}
		} catch (Exception error) {
			runStream = false;
			if (!inCombat && combatDelay <= 0 && deathDelay <= 0) {
				disconnected = true;
			}
			return false;
		}
		if (packetType == 72 || packetType == 128) {
			if (IsAttackingNPC && !IsDead) {
				if (Server.s.npcHandler.npcs[attacknpc] != null) {
					if (!Server.s.npcHandler.npcs[attacknpc].IsDead) {
						attackNpc();
					} else {
						IsAttackingNPC = false;
					}
				} else {
					IsAttackingNPC = false;
				}
			}
			if (attackingPlayer && !IsDead) {
				if (Server.s.playerHandler.players[attackingPlayerId] != null) {
					if (!Server.s.playerHandler.players[attackingPlayerId].IsDead) {
						// System.out.println("Got to ths process shit");
						attackPlayer();
					} else {
						attackingPlayer = false;
					}
				} else {
					attackingPlayer = false;
				}
			}
		}
		return true;
	}

	public void SwitchItems() {
		int moveWindow = inStream.readUnsignedWordA();
		int idi = inStream.readSignedByteC();
		int from = inStream.readUnsignedWordBigEndianA();
		int to = inStream.readSignedWordBigEndian();
		if (moveWindow == 3724) {
			int tempI;
			int tempN;
			tempI = playerItems[from];
			tempN = playerItemsN[from];

			playerItems[from] = playerItems[to];
			playerItemsN[from] = playerItemsN[to];
			playerItems[to] = tempI;
			playerItemsN[to] = tempN;
		}
		if (moveWindow == 34453 && from >= 0 && to >= 0
				&& from < playerBankSize && to < playerBankSize) {
			int tempI;
			int tempN;
			tempI = bankItems[from];
			tempN = bankItemsN[from];
			bankItems[from] = bankItems[to];
			bankItemsN[from] = bankItemsN[to];
			bankItems[to] = tempI;
			bankItemsN[to] = tempN;
		}
		if (moveWindow == 34453) {
			resetBank();
		} else if (moveWindow == 18579) {
			resetItems(5064);
		} else if (moveWindow == 3724) {
			resetItems(3214);
		}
	}

	public void DialogueSend() {
		switch (NpcDialogue) {
		case 1:
			if (absX >= 2615 && absY >= 3675 && absX <= 2645 && absY <= 3710) {
				changeText126("Travel To", 13902);
				changeText126("Steel Ice Cave", 13903);
				changeText126("Pest Control", 13904);
				changeText126("Duel Arena", 13905);
				changeText126("Falador", 13906);
				changeText126("Main Isle", 13907);
			} else {
				changeText126("Travel To", 13902);
				changeText126("Island of Paradise", 13903);
				changeText126("Island of Horror", 13904);
				changeText126("Assault", 13905);
				changeText126("Death Lair", 13906);
				changeText126("Next Page", 13907);// Freminnik
			}
			sendFrame164(13901);
			break;
		case 2:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Hello there, would you like to view your pin settings?",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 3:
			changeText126("Select an Option", 2460);
			changeText126("Yes please.", 2461);
			changeText126("No thank you.", 2462);
			sendFrame164(2459);
			break;
		case 4:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Ok then. Have a nice day!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 5:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Would you like to me to change your appearance?",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 6:
			changeText126("Select an Option", 2460);
			changeText126("Yea, it's time for a makeover.", 2461);
			changeText126("Nah, I'm happy the way I am.", 2462);
			sendFrame164(2459);
			break;
		case 7:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Well it was nice talking to you!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 8:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want to see my everyday items for sale?",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 9:
			changeText126("Select an Option", 2460);
			changeText126("Yea, I'm low on supplies.", 2461);
			changeText126("No thanks, I have everything I need.", 2462);
			sendFrame164(2459);
			break;
		case 10:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Come back soon!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 11:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I have some melee items you might want.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 12:
			changeText126("Select an Option", 2460);
			changeText126("Lets see them.", 2461);
			changeText126(
					"Thanks anyway, my current weapon gets the job done.", 2462);
			sendFrame164(2459);
			break;
		case 13:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Tell your friends about me!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 14:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"I can supply you with some range gear for a small price.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 15:
			changeText126("Select an Option", 2460);
			changeText126("Lets see what you have.", 2461);
			changeText126("No way that's a ripoff!", 2462);
			sendFrame164(2459);
			break;
		case 16:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("These are the best prices you'll find!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 17:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello! You look like you could use some armour!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 18:
			changeText126("Select an Option", 2460);
			changeText126("Yes, my defence is terrible! Please help me!", 2461);
			changeText126("No thanks this is all muscle.", 2462);
			sendFrame164(2459);
			break;
		case 19:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Well if you say so...", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 20:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want me to teleport you to the Mage Arena?",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 21:
			changeText126("Select an Option", 2460);
			changeText126("Yes, I'm prepared for the Wilderness.", 2461);
			changeText126("No way! I don't want to die!", 2462);
			sendFrame164(2459);
			break;
		case 22:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Come back when your ready!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 23:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"My items can be bought with points from killing these NPCs.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 24:
			changeText126("Select an Option", 2460);
			changeText126("Show me your shop.", 2461);
			changeText126("I don't have enough points for anythig yet.", 2462);
			sendFrame164(2459);
			break;
		case 25:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Alright, come back when you do have enough.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 26:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I sell the finest Femennik helms!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 27:
			changeText126("Select an Option", 2460);
			changeText126("I'd like to buy one.", 2461);
			changeText126("They aren't that great...", 2462);
			sendFrame164(2459);
			break;
		case 28:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Get out of my shop NOW!!!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 29:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I have skillcapes for sale!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 30:
			changeText126("Select an Option", 2460);
			changeText126("I have a stat that's 99!", 2461);
			changeText126("Your items don't interest me.", 2462);
			sendFrame164(2459);
			break;
		case 31:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Make sure to tell your friends to come!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 32:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Points earned here can be used for special items!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 33:
			changeText126("Select an Option", 2460);
			changeText126("Let me see those items.", 2461);
			changeText126("I'll come back when I have more points.", 2462);
			sendFrame164(2459);
			break;
		case 34:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Alright, come back when you have more points.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 35:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you need so magical runes?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 36:
			changeText126("Select an Option", 2460);
			changeText126("Ya I'm in low supply of runes.", 2461);
			changeText126("No thanks, I have plenty.", 2462);
			sendFrame164(2459);
			break;
		case 37:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Well if you run out you can always buy some from me.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 38:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want me to tan something?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 39:
			changeText126("Select an Option", 2460);
			changeText126("Yeah", 2461);
			changeText126("Nah.", 2462);
			sendFrame164(2459);
			break;
		case 40:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You will sooner or later so come back when you do!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 41:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I give rewards for Pest Control points.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 42:
			changeText126("Select an Option", 2460);
			changeText126("Sweetness. Let me see them.", 2461);
			changeText126("I have no points...", 2462);
			sendFrame164(2459);
			break;
		case 43:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Then you need to go play a Pest Control game!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 44:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Remember, you won't loose items if you die in the arena.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 45:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Good day mate.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 46:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Your cute, we should get married.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 47:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Welcome to Fremennik.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 48:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want to go to the Rune Essence mines?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 49:
			changeText126("Select an Option", 2460);
			changeText126("Yes please.", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 50:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Feel free to browse my shop if you'd like.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 51:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you need me to sail you somewhere?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 52:
			changeText126("Select an Option", 2460);
			changeText126("Yes please.", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 53:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I'm here 24/7 just remember.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 54:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Are you sure you want to go into the PK Cave?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 55:
			changeText126("Select an Option", 2460);
			changeText126("I'm ready for anything!", 2461);
			changeText126("No way! Out here is dangerous enough!", 2462);
			sendFrame164(2459);
			break;
		case 56:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Good luck to you.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 57:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("So you want to leave the Mage Arena?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 58:
			changeText126("Select an Option", 2460);
			changeText126("Yeah, I want to leave.", 2461);
			changeText126("No, I'm not done here.", 2462);
			sendFrame164(2459);
			break;
		case 59:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Ok, take your time.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 60:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want me to teleport you?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 61:
			changeText126("Select an Option", 2460);
			changeText126("Yes, teleport me.", 2461);
			changeText126("No, I'm fine.", 2462);
			sendFrame164(2459);
			break;
		case 62:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Well then stop bothering me.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 63:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Want to see my shields?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 64:
			changeText126("Select an Option", 2460);
			changeText126("Yes I do!!!", 2461);
			changeText126("I'll pass...", 2462);
			sendFrame164(2459);
			break;
		case 65:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Your loss.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 66:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Flynn at your service!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 67:
			changeText126("Select an Option", 2460);
			changeText126("Awesome!", 2461);
			changeText126("Yeah..That's alright.", 2462);
			sendFrame164(2459);
			break;
		case 68:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Come again soon!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 69:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I got some random stuff.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 70:
			changeText126("Select an Option", 2460);
			changeText126("Lets see.", 2461);
			changeText126("I don't need random stuff.", 2462);
			sendFrame164(2459);
			break;
		case 71:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("But its from China!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 72:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Chainmale for sale.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 73:
			changeText126("Select an Option", 2460);
			changeText126("I want one!", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 74:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Alright.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 75:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want to go to Fremmy?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 76:
			changeText126("Select an Option", 2460);
			changeText126("Yes.", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 77:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Alright, come back later then.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 78:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Need some herbs?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 79:
			changeText126("Select an Option", 2460);
			changeText126("Yes.", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 80:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Alright, peace dude.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 81:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Want a battleaxe?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 82:
			changeText126("Select an Option", 2460);
			changeText126("Rune please.", 2461);
			changeText126("No thanks.", 2462);
			sendFrame164(2459);
			break;
		case 83:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("See ya later.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 84:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want access to the legends Guild?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 85:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("If you do you will have to proove yourself.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 86:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Let the games begin!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 87:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"I have added the info you need into your quest tab.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 88:
			legendQuest = 1;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Good luck warrior!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 89:
			changeText126("Select an Option", 2470);
			changeText126("Edgeville", 2471);
			changeText126("Al Kharid", 2472);
			changeText126("Draynor Village", 2473);
			sendFrame164(2469);
			break;
		case 90:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Congratulations! You completed the tasks!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 91:
			legendQuest = 3;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("As promised, you may now enter the guild!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 92:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello, maybe you can help me.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 93:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I need you to bring me...", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 94:
			mageZQuest = 1;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Nevermind, speak to me in Varrock.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 95:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I need you to bring me...", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 96:
			mageZQuest = 2;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Fire talisman, essence, water rune", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 97:
			mageZQuest = 4;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Good work, you brought the items as asked!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			deleteItem(555, GetItemSlot(555), 3);
			deleteItem(1436, GetItemSlot(1436), 3);
			deleteItem(1442, GetItemSlot(1442), 1);
			loadQuestTab();
			break;
		case 98:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Your now an official butt kisser!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 99:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You can speak to me at Edgevile to", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 100:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Teleport to the Abyss.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 101:
			changeText126("Craft What?", 2470);
			changeText126("Ring", 2471);
			changeText126("Necklace", 2472);
			changeText126("Amulet", 2473);
			sendFrame164(2469);
			break;
		case 102:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you want a slayer Task?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 103:
			changeText126("What Task Level?", 2470);
			changeText126("Combat 20+", 2471);
			changeText126("Combat 40+", 2472);
			changeText126("Combat 100+", 2473);
			sendFrame164(2469);
			break;
		case 104:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"You must kill " + slayerAmt + " "
							+ getNpcName(slayerId).replace("_", " ") + "s.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 105:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Talk to me for a new task when you finish.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 106:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Your combat is to low for such a task!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 107:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you mind taking something to the Wizards Tower?",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 108:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"I found this magical talisman, and need it looked at.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 109:
			runeMysteriesQuest = 1;
			if (!addItem(1438, 1)) {
				Server.s.itemHandler.NpcDropItem(1438, 1, absX, absY, playerId);
			}
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Good luck warrior!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 110:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"This is looks like the one I have, diffrent colored though.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 111:
			runeMysteriesQuest = 2;
			deleteItem(1438, GetItemSlot(1438), 1);
			if (!addItem(290, 1)) {
				Server.s.itemHandler.NpcDropItem(290, 1, absX, absY, playerId);
			}
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Take my notes to the shopkeeper in Varrock named Aubury.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 112:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I will need some time to read this.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 113:
			runeMysteriesQuest = 3;
			deleteItem(290, GetItemSlot(290), 1);
			if (!addItem(291, 1)) {
				Server.s.itemHandler.NpcDropItem(291, 1, absX, absY, playerId);
			}
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("In the mean time take my notes to Sedridor.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 114:
			changeText126("Select an Option", 2460);
			changeText126("Aim & Fire!", 2461);
			changeText126("Pure Muscle!", 2462);
			sendFrame164(2459);
			break;
		case 115:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello warrior! Let me examine your inventory...",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 116:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			if (InvItemAmt(8058) > 0) {
				changeText126("Aha! Your task is getting an iron defender.",
						4885);
				defenderTask = 8059;
			} else if (InvItemAmt(8059) > 0) {
				changeText126("Aha! Your task is getting a steel defender.",
						4885);
				defenderTask = 8060;
			} else if (InvItemAmt(8060) > 0) {
				changeText126("Aha! Your task is getting a black defender.",
						4885);
				defenderTask = 8061;
			} else if (InvItemAmt(8061) > 0) {
				changeText126("Aha! Your task is getting a mithril defender.",
						4885);
				defenderTask = 8062;
			} else if (InvItemAmt(8062) > 0) {
				changeText126("Aha! Your task is getting an adamant defender.",
						4885);
				defenderTask = 8063;
			} else if (InvItemAmt(8063) > 0 || InvItemAmt(7959) > 0) {
				changeText126("Aha! Your task is getting a rune defender.",
						4885);
				defenderTask = 7959;
			} else {
				changeText126("Aha! Your task is getting a bronze defender.",
						4885);
				defenderTask = 8058;
			}
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 117:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Climb up the ladder to start.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 118:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Would you like to go to the warriors guild?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 119:
			changeText126("Select an Option", 2460);
			changeText126("Yeah", 2461);
			changeText126("No thanks", 2462);
			sendFrame164(2459);
			break;
		case 120:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello young spellcaster!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 121:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Would you like to begin this minigame?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 122:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Would you like to continue this minigame?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 123:
			changeText126("Select an Option", 2460);
			changeText126("Yeah", 2461);
			changeText126("No thanks", 2462);
			sendFrame164(2459);
			break;
		case 124:
			changeText126("Select an Option", 2470);
			changeText126("Pest Control", 2471);
			changeText126("Entrana", 2472);
			changeText126("Ape Atoll", 2473);
			sendFrame164(2469);
			break;
		case 125:
			changeText126("Select an Option", 2460);
			changeText126("99 Skill Shop", 2461);
			changeText126("Defender", 2462);
			sendFrame164(2459);
			break;
		case 126:
			changeText126("Select an Option", 2460);
			changeText126("Normal", 2461);
			changeText126("Ancients", 2462);
			sendFrame164(2459);
			break;
		case 127:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"I have a set of spells that could make you powerful.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 128:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"These are the Moon Clan spells, and I will give you", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 129:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Them if you do something for me. You must create a set",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 130:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Of mystical armour called ''Lunar'' using various skills.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 131:
			lunarQuest = 1;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Speak to the monk in Entrana for help.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 132:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello, how can I help you?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 133:
			changeText126("Select an Option", 2460);
			changeText126(
					"Hello, was just passing by when I saw this lovely church.",
					2461);
			changeText126("Do you have any Lunar armour for sale?", 2462);
			sendFrame164(2459);
			break;
		case 134:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Thank you, feel free to use the altar as you need to.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 135:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Lunar armour is rare, although I think I can help you.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 136:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Explaining it to you would take awhile, so I will just add",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 137:
			lunarQuest = 2;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("The details to your quest log.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 138:
			changeText126("Select an Option", 2470);
			changeText126("Lunar Helm", 2471);
			changeText126("Lunar Torso", 2472);
			changeText126("Lunar Legs", 2473);
			sendFrame164(2469);
			break;
		case 139:
			changeText126("Select an Option", 2470);
			changeText126("Lunar Gloves & Boots", 2471);
			changeText126("Lunar Ring & Ammy", 2472);
			changeText126("Lunar Cape", 2473);
			sendFrame164(2469);
			break;
		case 140:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You need to speak to the monk of Entrana.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 141:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Hello, enjoy your visit.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 142:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I'm sorry, I am very busy right now.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 143:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I have already told you how to make Lunar.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 144:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You must bring me full Lunar first.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 145:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Impressive, you managed to make full Lunar.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 146:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Now hand it over... What are you waiting for?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 147:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"So that's how it is. Then I will just slaughter you", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 148:
			changeCoords(2524, 4777, 0);
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("And take it. You will never get my stolen spells!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			Server.s.npcHandler.newNPC(2566, 2528, 4777, 0, 0, 0, 0, 0, false,
					playerId);
			break;
		case 149:
			changeText126("Select an Option", 2460);
			changeText126("Lunar Magic", 2461);
			changeText126("Normal Magic", 2462);
			sendFrame164(2459);
			break;
		case 150:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("This is a quest/minigame, depending on if you", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 151:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Have completed this once. The first time, you will",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 152:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Recieve 20,000 XP in Attack, Defence, Strength",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 153:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("And Hitpoints. You will also unlock two prayers,",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 154:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Chivalry and Piety, which can be used with the",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 155:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Correct Prayer level. After this, you will recieve",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 156:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("50 tokens each time you finish this.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 157:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("See that pyre? It's magical.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 158:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Bring the following armour set from bronze-rune:",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 159:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Full helm, platelegs, and platebody.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 160:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Use one of the pieces on the pyre to create", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 161:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Animated Armour! If you kill it, it'll drop the",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 162:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Armour used, and also tokens. Be careful", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 163:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Though, stronger armour means a stronger", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 164:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Opponent! Good luck!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 165:
			String name = Server.s.playerHandler.players[meleeFightWith].playerName;
			changeText126(name, 2460);
			changeText126("Duel This Person", 2461);
			changeText126("No Thanks!", 2462);
			sendFrame164(2459);
			break;
		case 166:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Melee Fights is a safe minigame.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 167:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("As the name suggests, only melee on allowed.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 168:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Each player gets 1 NPC to help defeat the other",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 169:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Player. If you have unlocked Chivalry and Piety,",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 170:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"One of the warriors from the minigame will aid you.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 171:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("If you have not completed it, Animated armour will",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 172:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Help you, varying on your defence level.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 173:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Such as, 40+ defence will bring Rune Animated", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 174:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Armour to help you kill your opponent.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 175:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("If you win, you get tokens in the number of 15%",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 176:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("The other players combat level.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 177:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Have fun fighting people!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 178:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("How can you see me?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 179:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("But, what...How?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 180:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("If you promise to leave me alone,", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 181:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I'll tell you how to get Ghostly.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 182:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("So now that we've reached an understanding,", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 183:
			if (!addItem(6107, 1)) {
				Server.s.itemHandler.NpcDropItem(6107, 1, absX, absY, playerId);
			}
			curseZarosQuest = 1;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Here's a ghostly top.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 184:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("To find the next piece, visit Rennard", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 185:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("At the pirate ship west of the pirate hut", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 186:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("In level 55 wilderness. Good luck.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 187:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("OoOoOoOoOoOoOoOoOoOoOoOoO!!!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 188:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("OoOoO?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 189:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You should be scared, why aren't you?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 190:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You humans have no imagination.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 191:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Let me be in piece, here's", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 192:
			if (!addItem(6110, 1)) {
				Server.s.itemHandler.NpcDropItem(6110, 1, absX, absY, playerId);
			}
			curseZarosQuest = 2;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Some Ghostly Gloves.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 193:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("The next ghost can be found at", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 194:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Level 38 wilderness in the Chaos", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 195:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Altar. Now let me rest.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 196:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you like my bod?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 197:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I'm, so sexy and you know it.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 198:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Since you seem to agree, take this.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 199:
			if (!addItem(6106, 1)) {
				Server.s.itemHandler.NpcDropItem(6106, 1, absX, absY, playerId);
			}
			curseZarosQuest = 3;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I don't need these boots anymore.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 200:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Your next ghost can be found at", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 201:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Entrana, near the altar I would guess.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 202:
			sendFrame200(4883, 591);
			changeText126("Just remember, I'm so sexy.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 203:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Howdy! I'm Lennissa!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 204:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Do you like this place? I love", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 205:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("This place! Sorry! Too much", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 206:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Sugar!!! Before I like explode,", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 207:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You can have this!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 208:
			if (!addItem(6108, 1)) {
				Server.s.itemHandler.NpcDropItem(6108, 1, absX, absY, playerId);
			}
			curseZarosQuest = 4;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I think these bottoms are so ugly!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 209:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Dhalak can be found below one of the", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 210:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Falador banks. Good Luck!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 211:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Ello, I don't get visits much.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 212:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("So your here about some ghostly, eh?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 213:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I got just what your lookin for.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 214:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("For only $19.95, this hood is all yours.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 215:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Ok ok, for you, $14.95.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 216:
			if (!addItem(6109, 1)) {
				Server.s.itemHandler.NpcDropItem(6109, 1, absX, absY, playerId);
			}
			curseZarosQuest = 5;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("OK!!! JUST TAKE IT THEN!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 217:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Viggora can be found near the", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 218:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Rogues Castle in level 54 wilderness.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 219:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Rumor has it you've been going around", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 220:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Collecting ghostly pieces.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 221:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Well I have the last one you need,", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 222:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("A Ghostly cloke.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 223:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Just promise me we can explore some", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 224:
			if (!addItem(6111, 1)) {
				Server.s.itemHandler.NpcDropItem(6111, 1, absX, absY, playerId);
			}
			curseZarosQuest = 0;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Time ok? Anyway here it is.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 225:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Just talk to the the first ghost", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 226:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("If you ever need a new set.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 227:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("OoOoOoOoOoOoOoOoOoOoOoOoO!!!", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 228:
			changeText126("Clan: "
					+ Server.s.playerHandler.clanName[clanRequest], 2460);
			changeText126("Accept", 2461);
			changeText126("Decline", 2462);
			sendFrame164(2459);
			break;
		case 229:
			changeText126(whosRightsChanged, 2470);
			changeText126("Member", 2471);
			changeText126("Leader", 2472);
			changeText126("Owner", 2473);
			sendFrame164(2469);
			break;
		case 230:
			changeText126("Select an Option", 2460);
			changeText126("99 Slayer", 2461);
			changeText126("Talk-To", 2462);
			sendFrame164(2459);
			break;
		case 231:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126(
					"I am looking for a lost city, have you heard of it?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 232:
			lostCityQuest = 1;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Zanaris? Never heard of it.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 233:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Where can I find Zanaris?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 234:
			lostCityQuest = 2;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You need a dramen staff to enter the city.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 235:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Where can I get a dramen staff?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 236:
			lostCityQuest = 3;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("The dungeon at Entrana.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 237:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Where's the lost city?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 238:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("How should I know?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 239:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Are you one of the gnomes from the", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 240:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Royal Guard?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 241:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Yeah, what is it to you?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 242:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("I was sent here to rescue you.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 243:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("What kind of help are you to get caught?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 244:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("I needed to talk to you, I know what I'm doing.",
					4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 245:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Whatever you say. I'm not the one you should be",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 246:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Talking to, find everyone outside the jail.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 247:
			monkeyMadnessQuest = 2;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You should be able to find Bunkdo south-east", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 248:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Of this jail, but that's only a guess.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 249:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Lumo sent me, he said I should speak to you.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 250:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I take it you're here to rescue us.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 251:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Yeah, now is there anything you need to tell me?",
					4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 252:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"I noticed an entrance to a dungeon when we got here.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 253:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Go take a look after finding the last gnome.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 254:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Hmm, ok I'll remember that. Anything else?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 255:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Search the buildings for Carado, he'll most likely",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 256:
			monkeyMadnessQuest = 3;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Be in one, he might be able to tell you more.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 257:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Bunkdo sent me. He also said something", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 258:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("About a dungeon he saw on the way in.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 259:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Ah yes, I noticed the monkeys were avoiding it, as if",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 260:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"They were scared. If you go in, I suggest you take a",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 261:
			monkeyMadnessQuest = 4;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Tele and food at the least. That's all I can think of.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 262:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Hello, what are you doing way in here?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 263:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I live here of course.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 264:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126(
					"Can you help me rescue the Gnomes of the Royal Guard?",
					4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 265:
			monkeyMadnessQuest = 5;
			if (BankAndInvItemAmt(4031) == 0) {
				if (!addItem(4031, 1)) {
					Server.s.itemHandler.NpcDropItem(4031, 1, absX, absY,
							playerId);
				}
			}
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I think I can help you. Here, take this.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 266:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"If you wear this the monkey's won't attack you. Good luck.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 267:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Hello sir,the humans have sent me.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 268:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("What do they want?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 269:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("They have requested that you let the gnomes go.",
					4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 270:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("And if I don't?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 271:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("They threaten to wage war against you.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 272:
			monkeyMadnessQuest = 6;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Very well. Bring me 20 bananas and I will let them go.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 273:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Ok, I'll go get you those bananas!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 274:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Here, 20 bananas!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 275:
			deleteItem(1963, 1, 20);
			monkeyMadnessQuest = 7;
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126(
					"Spectacular! Very well, the gnomes are free to leave.",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 276:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Thank you Awowogei!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 277:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Rumor has it you need help? Well I am here.", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 278:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("My three gnome Royal Guard have gone missing", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 279:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Studying Ape Atoll. I need someone to", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 280:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Go and find the missing gnomes.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 281:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Can I count on you to do so?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 282:
			monkeyMadnessQuest = 1;
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Yes you can!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 283:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Sir, the gnomes are freed!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 284:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Thank you, but I have one more task", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 285:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("For you. I have a special sigil", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 286:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("That will teleport you to a demon.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 287:
			monkeyMadnessQuest = 8;
			if (!addItem(4035, 1)) {
				Server.s.itemHandler.NpcDropItem(4035, 1, absX, absY, playerId);
			}
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Only use the sigil when you are ready.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 288:
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("Hello, is there anything I can do for you?", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			break;
		case 289:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Actually there is. An evil mage, Iban,", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 290:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Has been trying to take my position as king.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 291:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("I worry if this continues I will end up dead.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 292:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("So I am asking you to slay Iban.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 293:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("It will be a challenge but a mighty", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 294:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Can handle it right?", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 295:
			undergroundPassQuest = 1;
			sendFrame200(4883, 591);
			changeText126(playerName, 4884);
			changeText126("YES I AM!!! I WILL DO IT FOR YOU!!!", 4885);
			changeText126("Click here to continue", 4886);
			playerHeadToFrame(4883);
			sendFrame164(4882);
			loadQuestTab();
			break;
		case 296:
			addItem(1485, 1);
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("Here's a damp cloth.", 4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 297:
			changeText126("Select an Option", 2470);
			changeText126("Varrock", 2471);
			changeText126("Mage Bank", 2472);
			changeText126("Green Dragons", 2473);
			sendFrame164(2469);
			break;
		case 298:
			sendFrame200(4883, 591);
			changeText126(getNpcName(NpcTalkTo), 4884);
			changeText126("You currently have " + pkPoints + " Pk Points!",
					4885);
			changeText126("Click here to continue", 4886);
			sendFrame75(NpcTalkTo, 4883);
			sendFrame164(4882);
			break;
		case 299:
			changeText126("Select an Option", 2470);
			changeText126("Red Dragons", 2471);
			changeText126("Black Dragons", 2472);
			changeText126("Steel Dragons", 2473);
			sendFrame164(2469);
			break;
		case 300:
			changeText126("Select an Option", 2470);
			changeText126("King Black Dragon", 2471);
			changeText126("Green Dragons", 2472);
			changeText126("Bronze Dragons", 2473);
			sendFrame164(2469);
			break;
		case 301:
			changeText126("Select an Option", 2470);
			changeText126("Gnome Course", 2471);
			changeText126("Freminnik", 2472);
			changeText126("Main Isle", 2473);
			sendFrame164(2469);
			break;
		}
		// NpcDialogue = -1;
	}

	public int spellCastDelay = 0;
	public int spellCastedId, Emote, PlayerGfx, ProGfx, EndGfx, MaxHit, Lvl,
			Rune1, Rune1Am, Rune2, Rune2Am, Rune3, Rune3Am, Rune4, Rune4Am,
			PlayerHeight, EndHeight;
	public boolean autocastSpell = false;
	public boolean usePlayerSpell = false;

	public void multiIceAtk(int Gfx, int EnDelay, int height, int Dmg) {
		for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc != null) {
				if (WithinDistance(absX, absY, npc.absX, npc.absY, 2)
						&& npc.CurrentHp > 0 && npc.heightLevel == heightLevel
						&& multiZone() && i != attacknpc) {
					if (npc.SpawnedFor == -1 && npc.NpcType != 3782) {
						createNpcGfx(Gfx, 0, npc.NpcSlot, height);
						int Dmg2 = Misc.random(Dmg);
						if (npc.EntangleDelay <= 10) {
							npc.EntangleDelay = EnDelay;
						}
						npc.CurrentHp -= Dmg2;
						if (npc.hitUpdateRequired) {
							npc.hitDiff2 = Dmg2;
							npc.hitUpdateRequired2 = true;
							npc.updateRequired = true;
						} else {
							npc.hitDiff = Dmg2;
							npc.hitUpdateRequired = true;
							npc.updateRequired = true;
						}
						npc.KilledBy[playerId] += Dmg2;
						npc.StartKilling = playerId;
						npc.RandomWalk = false;
						npc.IsUnderAttack = true;
						addSkillXP((4 * magicXpInc) * Dmg2, 6);
						addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
					}
				}
			}
		}
	}

	public void multiSmokeAtk(int Gfx, int height, int Dmg) {
		for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc != null) {
				if (WithinDistance(absX, absY, npc.absX, npc.absY, 2)
						&& npc.CurrentHp > 0 && npc.heightLevel == heightLevel
						&& multiZone() && i != attacknpc) {
					if (npc.SpawnedFor == -1 && npc.NpcType != 3782) {
						createNpcGfx(Gfx, 0, npc.NpcSlot, height);
						if (npc.poisonDelay == -1) {
							npc.poisonDelay = 240;
						}
						int Dmg2 = Misc.random(Dmg);
						npc.CurrentHp -= Dmg2;
						if (npc.hitUpdateRequired) {
							npc.hitDiff2 = Dmg2;
							npc.hitUpdateRequired2 = true;
							npc.updateRequired = true;
						} else {
							npc.hitDiff = Dmg2;
							npc.hitUpdateRequired = true;
							npc.updateRequired = true;
						}
						npc.KilledBy[playerId] += Dmg2;
						npc.StartKilling = playerId;
						npc.RandomWalk = false;
						npc.IsUnderAttack = true;
						addSkillXP((4 * magicXpInc) * Dmg2, 6);
						addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
					}
				}
			}
		}
	}

	public void multiBloodAtk(int Gfx, int height, int Dmg) {
		for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc != null) {
				if (WithinDistance(absX, absY, npc.absX, npc.absY, 2)
						&& npc.CurrentHp > 0 && npc.heightLevel == heightLevel
						&& multiZone() && i != attacknpc) {
					if (npc.SpawnedFor == -1 && npc.NpcType != 3782) {
						int Dmg2 = Misc.random(Dmg);
						createNpcGfx(Gfx, 0, npc.NpcSlot, height);
						updateHp(Dmg2 / 4, true);
						npc.CurrentHp -= damageHit;
						if (npc.hitUpdateRequired) {
							npc.hitDiff2 = Dmg2;
							npc.hitUpdateRequired2 = true;
							npc.updateRequired = true;
						} else {
							npc.hitDiff = Dmg2;
							npc.hitUpdateRequired = true;
							npc.updateRequired = true;
						}
						npc.KilledBy[playerId] += Dmg2;
						npc.StartKilling = playerId;
						npc.RandomWalk = false;
						npc.IsUnderAttack = true;
						addSkillXP((4 * magicXpInc) * Dmg2, 6);
						addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
					}
				}
			}
		}
	}

	public void multiAtk(int Gfx, int height, int Dmg, int distance) {
		for (int i = 1; i < Server.s.npcHandler.maxNPCs; i++) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc != null) {
				if (WithinDistance(absX, absY, npc.absX, npc.absY, distance)
						&& npc.CurrentHp > 0 && npc.heightLevel == heightLevel
						&& multiZone() && i != attacknpc) {
					if (npc.SpawnedFor == -1 && npc.NpcType != 3782) {
						int Dmg2 = Misc.random(Dmg);
						createNpcGfx(Gfx, 0, npc.NpcSlot, height);
						npc.CurrentHp -= damageHit;
						if (npc.hitUpdateRequired) {
							npc.hitDiff2 = Dmg2;
							npc.hitUpdateRequired2 = true;
							npc.updateRequired = true;
						} else {
							npc.hitDiff = Dmg2;
							npc.hitUpdateRequired = true;
							npc.updateRequired = true;
						}
						npc.KilledBy[playerId] += Dmg2;
						npc.StartKilling = playerId;
						npc.RandomWalk = false;
						npc.IsUnderAttack = true;
						addSkillXP((4 * magicXpInc) * Dmg2, 6);
						addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
					}
				}
			}
		}
	}

	public void multiIceAtkPlr(int Gfx, int EnDelay, int height, int Dmg) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null
					&& attackingPlayerId != i && playerId != i) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (WithinDistance(absX, absY, p.absX, p.absY, 2)
						&& p.NewHp > 0 && p.WildArea() && multiZone()
						&& checkWildRange(p.combatLevel)) {
					p.playGraphic(Gfx, 0, height);
					int Dmg2 = Misc.random(Dmg);
					if (p.EntangleDelay <= 5) {
						p.EntangleDelay = EnDelay;
					}
					p.updateHp(Dmg2, false);
					if (p.hitUpdateRequired) {
						p.hitDiff2 = Dmg2;
						p.hitUpdateRequired2 = true;
						p.updateRequired = true;
					} else {
						p.hitDiff = Dmg2;
						p.hitUpdateRequired = true;
						p.updateRequired = true;
					}
					p.KilledBy[playerId] += Dmg2;
					p.KillerId = playerId;
					p.stopMovement();
					addSkillXP((4 * magicXpInc) * Dmg2, 6);
					addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
				}
			}
		}
	}

	public void multiSmokeAtkPlr(int Gfx, int height, int Dmg) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null
					&& attackingPlayerId != i && playerId != i) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (WithinDistance(absX, absY, p.absX, p.absY, 2)
						&& p.NewHp > 0 && p.WildArea() && multiZone()
						&& checkWildRange(p.combatLevel)) {
					p.playGraphic(Gfx, 0, height);
					if (p.poisonDelay == -1) {
						p.poisonDamage = 6;
						p.poisonDelay = 100;
					}
					int Dmg2 = Misc.random(Dmg);
					p.updateHp(Dmg2, false);
					if (p.hitUpdateRequired) {
						p.hitDiff2 = Dmg2;
						p.hitUpdateRequired2 = true;
						p.updateRequired = true;
					} else {
						p.hitDiff = Dmg2;
						p.hitUpdateRequired = true;
						p.updateRequired = true;
					}
					p.KilledBy[playerId] += Dmg2;
					p.KillerId = playerId;
					addSkillXP(1000 * Dmg2, 6);
					addSkillXP((4 * magicXpInc) * Dmg2, 6);
					addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
				}
			}
		}
	}

	public void multiBloodAtkPlr(int Gfx, int height, int Dmg) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null
					&& attackingPlayerId != i && playerId != i) {
				Client p = (Client) Server.s.playerHandler.players[i];
				if (WithinDistance(absX, absY, p.absX, p.absY, 2)
						&& p.NewHp > 0 && p.WildArea() && multiZone()
						&& checkWildRange(p.combatLevel)) {
					p.playGraphic(Gfx, 0, height);
					int Dmg2 = Misc.random(Dmg);
					updateHp(Dmg2 / 4, true);
					p.updateHp(Dmg2, false);
					if (p.hitUpdateRequired) {
						p.hitDiff2 = Dmg2;
						p.hitUpdateRequired2 = true;
						p.updateRequired = true;
					} else {
						p.hitDiff = Dmg2;
						p.hitUpdateRequired = true;
						p.updateRequired = true;
					}
					p.KilledBy[playerId] += Dmg2;
					p.KillerId = playerId;
					addSkillXP((4 * magicXpInc) * Dmg2, 6);
					addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
				}
			}
		}
	}

	public void multiAtkPlr(int Gfx, int height, int Dmg) {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			Client p = Server.s.playerHandler.clients[i];
			if (p != null && (attackingPlayerId != i || deathDelay > 0)
					&& playerId != i) {
				if (WithinDistance(absX, absY, p.absX, p.absY, 2)
						&& p.NewHp > 0
						&& (p.WildArea() && multiZone()
								&& checkWildRange(p.combatLevel) || duelWith == i)) {
					p.playGraphic(Gfx, 0, height);
					int Dmg2 = Misc.random(Dmg);
					p.updateHp(Dmg2, false);
					if (p.hitUpdateRequired) {
						p.hitDiff2 = Dmg2;
						p.hitUpdateRequired2 = true;
						p.updateRequired = true;
					} else {
						p.hitDiff = Dmg2;
						p.hitUpdateRequired = true;
						p.updateRequired = true;
					}
					p.KilledBy[playerId] += Dmg2;
					addSkillXP((4 * magicXpInc) * Dmg2, 6);
					addSkillXP((2 * magicXpInc) * Dmg2, playerHitpoints);
				}
			}
		}
	}

	public void sendPaliMessage(String s) {
		/*
		 * if (playerName.equalsIgnoreCase("Mrquarter")) { sendMessage(s); }
		 */
	}

	public int godDelay = 0;
	public boolean useNPCSpell = false;

	public void SetPrayHeadIcon(int Id) {
		HeadIconPrayer = Id;
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void SetPkHeadIcon(int Id) {
		HeadIconPk = Id;
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void SecondTradeWindow() {
		sendFrame248(3443, 3213);
		resetItems(3214);
		String SendTrade = "Absolutely nothing!";
		String SendAmount = "";
		int Count = 0;
		for (int i = 0; i < playerTItems.length; i++) {
			if (playerTItems[i] > 0) {
				if (playerTItemsN[i] >= 1000 && playerTItemsN[i] < 1000000) {
					SendAmount = "@cya@" + (playerTItemsN[i] / 1000)
							+ "K @whi@(" + playerTItemsN[i] + ")";
				} else if (playerTItemsN[i] >= 1000000) {
					SendAmount = "@gre@" + (playerTItemsN[i] / 1000000)
							+ " million @whi@(" + playerTItemsN[i] + ")";
				} else {
					SendAmount = "" + playerTItemsN[i];
				}
				if (Count == 0) {
					SendTrade = getItemName((playerTItems[i] - 1));
				} else {
					SendTrade = SendTrade + "\\n"
							+ getItemName((playerTItems[i] - 1));
				}
				if (Item.itemIsNote[(playerTItems[i] - 1)]
						|| Item.itemStackable[(playerTItems[i] - 1)]) {
					SendTrade = SendTrade + " x " + SendAmount;
				}
				Count++;
			}
		}
		changeText126(SendTrade, 3557);
		SendTrade = "Absolutely nothing!";
		SendAmount = "";
		Count = 0;
		for (int i = 0; i < playerOTItems.length; i++) {
			if (playerOTItems[i] > 0) {
				if (playerOTItemsN[i] >= 1000 && playerOTItemsN[i] < 1000000) {
					SendAmount = "@cya@" + (playerOTItemsN[i] / 1000)
							+ "K @whi@(" + playerOTItemsN[i] + ")";
				} else if (playerOTItemsN[i] >= 1000000) {
					SendAmount = "@gre@" + (playerOTItemsN[i] / 1000000)
							+ " million @whi@(" + playerOTItemsN[i] + ")";
				} else {
					SendAmount = "" + playerOTItemsN[i];
				}
				if (Count == 0) {
					SendTrade = getItemName((playerOTItems[i] - 1));
				} else {
					SendTrade = SendTrade + "\\n"
							+ getItemName((playerOTItems[i] - 1));
				}
				if (Item.itemIsNote[(playerOTItems[i] - 1)]
						|| Item.itemStackable[(playerOTItems[i] - 1)]) {
					SendTrade = SendTrade + " x " + SendAmount;
				}
				Count++;
			}
		}
		changeText126(SendTrade, 3558);
	}

	public int[] noObMoveX = { 3336, 3346, 3356, 3343 };
	public int[] noObMoveY = { 3254, 3256, 3251, 3254 };
	public int[] obMoveX = { 3366, 3377, 3376, 3386 };
	public int[] obMoveY = { 3251, 3257, 3245, 3250 };

	public void numberEnter(int i) {
		onPin++;
		if (onPin == 1) {
			changeText126("Now click the SECOND digit", 15313);
		}
		if (onPin == 2) {
			changeText126("Now click the THIRD digit", 15313);
		}
		if (onPin == 3) {
			changeText126("Now click the FOURTH digit", 15313);
		}
		enteredPin += i;
		if (onPin == 4) {
			changeText126("First click the FIRST digit", 15313);
			verifyEnteredPin();
		}
	}

	public void resetBankPinAttempts() {
		onPin = 0;
		enteredPin = 0;
		pinChanged = false;
	}

	public boolean verifyEnteredPin() {
		if (bankPin != -1) {
			if (enteredPin == bankPin) {
				sendFrame248(5292, 5063);
				CurrentFrame = 5292;
				resetItems(5064);
				return true;
			}
			resetBankPinAttempts();
			sendMessage("Pin wrong!");
			RemoveAllWindows();
			return false;
		}
		if (pinChanged) {
			bankPin = enteredPin;
			RemoveAllWindows();
			sendMessage("Whatever you do don't forget your pin!");
			sendMessage("[HINT]: your pin adds up to " + bankPin + ".");
			resetBankPinAttempts();
		}
		return true;
	}

	public boolean pinCorrect() {
		if (bankPin != -1) {
			if (enteredPin == bankPin) {
				return true;
			}
			return false;
		}
		return true;
	}

	public boolean hasPin() {
		changeText126("First click the FIRST digit", 15313);
		return (bankPin != -1);
	}

	public int smeltId = 0;
	public int jewelleryType = 0;

	public void knightWavesMenu() {
		ClearFrame8134();
		changeText126("@dre@Knight Waves Training Ground", 8144);
		if (knightWavesQuest == 0) {
			changeText126("@dbl@Congrats, you have completed the", 8148);
			changeText126("@dbl@Knight Waves Training Ground Quest!", 8149);
			changeText126(
					"@dbl@With the correct prayer level, you can now use", 8150);
			changeText126("@dbl@Chivalry and Piety.", 8151);
			changeText126("@dbl@You have also recieved 20,000 XP in Attack,",
					8152);
			changeText126("@dbl@Strength, Defence, and Hitpoints.", 8153);
			changeText126("@dbl@You may now play this as a minigame for", 8154);
			changeText126("@dbl@Getting tokens only.", 8155);
			knightWavesQuest = 1;
			addSkillXP(20000, playerAttack);
			addSkillXP(20000, playerStrength);
			addSkillXP(20000, playerDefence);
			addSkillXP(20000, playerHitpoints);
			loadQuestTab();
		} else if (knightWavesQuest == 1) {
			changeText126("@dbl@Congrats, you have completed the", 8148);
			changeText126("@dbl@Knight Waves Training Ground minigame!", 8149);
			changeText126("@dbl@Here are some tokens for your effort.", 8150);
			if (!addItem(7774, 50)) {
				Server.s.itemHandler
						.NpcDropItem(7774, 50, absX, absY, playerId);
			}
		}
		changeCoords(2192, 4958, 0);
		showInterface(8134);
		updateHp(getLevelForXP(playerXP[3]), true);
		resetAllPrayers();
		specialAmount = 100;
		if (needsSpecBar(playerEquipment[playerWeapon])) {
			specialAttackBar();
		}
		skullTimer = -1;
		SetPkHeadIcon(0);
		EntangleDelay = 0;
		poisonDelay = -1;
		poisonDamage = 0;
		for (int i = 0; i < 21; i++) {
			playerLevel[i] = getLevelForXP(playerXP[i]);
		}
		for (int i = 0; i < 21; i++) {
			setSkillLevel(i);
		}
		knightWavesGame = 0;
	}

	public void playersOnline() {
		ClearFrame8134();
		changeText126("@dre@Players Online (First 50)", 8144);
		int lineId = 8148;
		for (int i = 0; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.playersCurrentlyOn[i] != null
					&& !Server.s.playerHandler.playersCurrentlyOn[i].equals("")) {
				changeText126("@dbl@"
						+ Server.s.playerHandler.playersCurrentlyOn[i], lineId);
				lineId++;
			}
		}
		showInterface(8134);
	}

	public void staffOnline() {
		ClearFrame8134();
		changeText126("@dre@Staff Online", 8144);
		int lineId = 8148;
		for (Client p : Server.s.playerHandler.clients) {
			if (p == null)
				continue;
			if (p.jrMod) {
				changeText126("@dbl@Global Moderator, Player: " + p.playerName,
						lineId);
				lineId++;
			}
			if (p.jrAdmin) {
				changeText126("@ora@Junior Administrator, Player: "
						+ p.playerName, lineId);
				lineId++;
			}
			if (p.admin) {
				changeText126("@dre@Administrator, Player: " + p.playerName,
						lineId);
				lineId++;
			}
			if (p.developer) {
				changeText126("@whi@Developer, Player: " + p.playerName, lineId);
				lineId++;
			}
			if (p.founder) {
				changeText126("@blu@Founder, Player: " + p.playerName, lineId);
				lineId++;
			}
		}
		showInterface(8134);
	}

	public void deathItemsMenu() {
		resetKeepItem();
		keepItem1();
		keepItem2();
		keepItem3();
		keepItem4();
		ClearFrame8134();
		changeText126("@dre@Items I Will Keep", 8144);
		int lineNumber = 8148;
		if (HeadIconPk != 1) {
			changeText126("@dbl@" + getItemName(itemKept1), 8148);
			changeText126("@dbl@" + getItemName(itemKept2), 8149);
			changeText126("@dbl@" + getItemName(itemKept3), 8150);
			lineNumber = 8151;
		} else {
			changeText126("@dbl@None", 8148);
			lineNumber = 8149;
		}
		if (protectItem) {
			changeText126("@dbl@" + getItemName(itemKept4), lineNumber);
		}
		showInterface(8134);
		resetKeepItem();
	}

	public void buildClanInterface() {
		clearClanFrame();
		int lineNumber = 18865;
		int clanId = Server.s.playerHandler.getClanId(playerName);
		String rank = "[MEMBER]";
		for (int i = 0; i < Server.s.playerHandler.maxClanSlots; i++) {
			if (clanId != -1) {
				if (Server.s.playerHandler.clanPlayerName[clanId][i] != null
						&& !Server.s.playerHandler.clanPlayerName[clanId][i]
								.equals("")) {
					if (Server.s.playerHandler.clanPlayerRights[clanId][i] == 1) {
						rank = "[MEMBER]";
					} else if (Server.s.playerHandler.clanPlayerRights[clanId][i] == 2) {
						rank = "[LEADER]";
					} else if (Server.s.playerHandler.clanPlayerRights[clanId][i] == 3) {
						rank = "[OWNER]";
					}
					changeText126(
							Server.s.playerHandler.clanPlayerName[clanId][i],
							lineNumber);
					lineNumber++;
					changeText126(rank, lineNumber);
					lineNumber++;
				} else {
					changeText126("", lineNumber);
					lineNumber++;
					changeText126("", lineNumber);
					lineNumber++;
				}
			}
		}
		updateClanText();
	}

	public void clearClanFrame() {
		for (int i = 18865; i < 19065; i++) {
			changeText126("", i);
		}
	}

	public void healPoisonedPlayers() {
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				if (WithinDistance(absX, absY,
						Server.s.playerHandler.players[i].absX,
						Server.s.playerHandler.players[i].absY, 5)) {
					Client p = (Client) Server.s.playerHandler.players[i];
					p.playGraphic(601, 0, 100);
					p.poisonDelay = -1;
					p.poisonDamage = 0;
				}
			}
		}
	}

	public void healPoison() {
		playGraphic(601, 0, 100);
		poisonDelay = -1;
		poisonDamage = 0;
	}

	public void healHpOtherP() {
		int slot = 0;
		int dudehp = 99;
		for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				if (WithinDistance(absX, absY,
						Server.s.playerHandler.players[i].absX,
						Server.s.playerHandler.players[i].absY, 5)) {
					if (Server.s.playerHandler.players[i].NewHp < dudehp) {
						dudehp = Server.s.playerHandler.players[i].NewHp;
						slot = i;
						i = 0;
					}
				}
			}
		}
		if (slot == 0) {
			return;
		}
		Client p = (Client) Server.s.playerHandler.players[slot];
		double amt = 0;
		if (NewHp > p.NewHp) {
			amt = NewHp - p.NewHp;
		} else {
			amt = NewHp * 0.75;
		}
		updateHp((int) amt, false);
		hitDiff = (int) amt;
		updateRequired = true;
		hitUpdateRequired = true;
		p.playGraphic(444, 0, 100);
		p.updateHp((int) amt, true);
	}

	public void updateClanText() {
		int rights = Server.s.playerHandler.getClanRights(playerName);
		int clanId = Server.s.playerHandler.getClanId(playerName);
		if (rights == 3
				&& clanId > -1
				&& !Server.s.playerHandler.clanName[clanId]
						.equalsIgnoreCase(null)) {
			changeText126("  ClanName:@whi@ "
					+ Server.s.playerHandler.clanName[clanId], 18853);
			changeText126("  Rank:@whi@ Owner", 18854);
			changeText126("Invite", 18861);
			changeText126("Kick", 18862);
			changeText126("Pro/De-Mote", 18863);
			changeText126("Delete", 18864);
		} else if (rights == 2
				&& clanId > -1
				&& !Server.s.playerHandler.clanName[clanId]
						.equalsIgnoreCase(null)) {
			changeText126("  ClanName:@whi@ "
					+ Server.s.playerHandler.clanName[clanId], 18853);
			changeText126("  Rank:@whi@ Leader", 18854);
			changeText126("Invite", 18861);
			changeText126("Leave", 18862);
			changeText126("", 18863);
			changeText126("", 18864);
		} else if (rights == 1
				&& clanId > -1
				&& !Server.s.playerHandler.clanName[clanId]
						.equalsIgnoreCase(null)) {
			changeText126("  ClanName:@whi@ "
					+ Server.s.playerHandler.clanName[clanId], 18853);
			changeText126("  Rank:@whi@ Member", 18854);
			changeText126("Leave", 18861);
			changeText126("", 18862);
			changeText126("", 18863);
			changeText126("", 18864);
		} else if (rights == -1) {
			changeText126("  ClanName:@whi@ N/A", 18853);
			changeText126("  Rank:@whi@ N/A", 18854);
			changeText126("Create Clan", 18861);
			changeText126("", 18862);
			changeText126("", 18863);
			changeText126("", 18864);
		}
	}

	public void attackSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Attack", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Bronze", 8760); // Advancement
		changeText126("1", 8721);
		changeText126("Iron", 8761);
		changeText126("5", 8722);
		changeText126("Steel", 8762);
		changeText126("10", 8723);
		changeText126("Black", 8763);
		changeText126("20", 8724);
		changeText126("Mithril", 8764);
		changeText126("30", 8725);
		changeText126("Adamant", 8765);
		changeText126("40", 8726);
		changeText126("Rune", 8766);
		changeText126("60", 8727);
		changeText126("Dragon", 8767);
		changeText126("99", 8728);
		changeText126("Attack Cape", 8768);
	}

	public void defenceSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Defence", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Bronze", 8760); // Advancement
		changeText126("1", 8721);
		changeText126("Iron", 8761);
		changeText126("5", 8722);
		changeText126("Steel", 8762);
		changeText126("10", 8723);
		changeText126("Black", 8763);
		changeText126("20", 8724);
		changeText126("Mithril", 8764);
		changeText126("30", 8725);
		changeText126("Adamant", 8765);
		changeText126("40", 8726);
		changeText126("Rune", 8766);
		changeText126("60", 8727);
		changeText126("Dragon", 8767);
		changeText126("99", 8728);
		changeText126("Defence Cape", 8768);
	}

	public void rangedSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Ranged", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Bronze, Iron, Longbow, Shortbow", 8760); // Advancement
		changeText126("5", 8721);
		changeText126("Steel", 8761);
		changeText126("20", 8722);
		changeText126("Mithril, Coif, Studded", 8762);
		changeText126("30", 8723);
		changeText126("Adamant", 8763);
		changeText126("40", 8724);
		changeText126("Rune, Magicbow, Green d'hide", 8764);
		changeText126("40", 8725);
		changeText126("Ranger Boots, Robin Hood Hat", 8765);
		changeText126("50", 8726);
		changeText126("Blue d'hide, Seercull", 8766);
		changeText126("60", 8727);
		changeText126("Red d'hide, Rune c'bow, Dark Bow, Toktz-xil-ul", 8767);
		changeText126("65", 8728);
		changeText126("3rd Age", 8768);
		changeText126("70", 8729);
		changeText126("Black d'hide, Karils, Crystal Bow, Armadyl", 8769);
		changeText126("99", 8730);
		changeText126("Ranged Cape", 8770);
	}

	public void magicSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Magic", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Robes", 8760); // Advancement
		changeText126("30", 8721);
		changeText126("Mud Staff, Lava Battlestaff", 8761);
		changeText126("40", 8722);
		changeText126("Mystic, Enchanted, Splitbark", 8762);
		changeText126("50", 8723);
		changeText126("Slayer's Staff, Infinity, ", 8763);
		changeText126("60", 8724);
		changeText126("God staves, God Capes", 8764);
		changeText126("65", 8725);
		changeText126("3rd Age", 8765);
		changeText126("70", 8726);
		changeText126("Ahrims", 8766);
		changeText126("99", 8727);
		changeText126("Magic Cape", 8767);
	}

	public void miningSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Mining", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Tin, Copper", 8760); // Advancement
		changeText126("15", 8721);
		changeText126("Iron", 8761);
		changeText126("30", 8722);
		changeText126("Coal", 8762);
		changeText126("40", 8723);
		changeText126("Gold", 8763);
		changeText126("55", 8724);
		changeText126("Mithril", 8764);
		changeText126("61", 8725);
		changeText126("Lunar", 8765);
		changeText126("70", 8726);
		changeText126("Adamantite", 8766);
		changeText126("85", 8727);
		changeText126("Runite", 8767);
	}

	public void fishingSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Mining", 8716); // Skill Name
		changeText126("@red@Members only skill", 8849); // @red@Members only
														// skill
		changeText126("1", 8720); // Level
		changeText126("Shrimps", 8760); // Advancement
		changeText126("5", 8721);
		changeText126("Sardine", 8761);
		changeText126("10", 8722);
		changeText126("Herring", 8762);
		changeText126("15", 8723);
		changeText126("Anchovies", 8763);
		changeText126("20", 8724);
		changeText126("Trout", 8764);
		changeText126("25", 8725);
		changeText126("Pike", 8765);
		changeText126("30", 8722);
		changeText126("Salmon", 8762);
		changeText126("35", 8723);
		changeText126("Tuna", 8763);
		changeText126("40", 8724);
		changeText126("Lobster", 8764);
		changeText126("50", 8725);
		changeText126("SWordfish", 8765);
		changeText126("62", 8726);
		changeText126("Monkfish", 8766);
		changeText126("76", 8727);
		changeText126("Shark", 8767);
	}

	public void thiefSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Thieving", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Man, Woman", 8760); // Advancement
		changeText126("10", 8721);
		changeText126("Farmer", 8761);
		changeText126("25", 8722);
		changeText126("Warrior", 8762);
		changeText126("32", 8723);
		changeText126("Rogue", 8763);
		changeText126("40", 8724);
		changeText126("Guard", 8764);
		changeText126("65", 8725);
		changeText126("Paladin", 8765);
	}

	public void woodcuttingSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Woodcutting", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Logs", 8760); // Advancement
		changeText126("15", 8721);
		changeText126("Oak Logs", 8761);
		changeText126("30", 8722);
		changeText126("Willow Logs", 8762);
		changeText126("45", 8723);
		changeText126("Maple Logs", 8763);
		changeText126("60", 8724);
		changeText126("Yew Logs", 8764);
		changeText126("75", 8725);
		changeText126("Magic Logs", 8765);
	}

	public void runecraftingSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Runecrafting", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Air Runes", 8760); // Advancement
		changeText126("2", 8721);
		changeText126("Mind Runes", 8761);
		changeText126("5", 8722);
		changeText126("Water Runes", 8762);
		changeText126("9", 8723);
		changeText126("Earth Runes", 8763);
		changeText126("14", 8724);
		changeText126("Fire Runes", 8764);
		changeText126("20", 8725);
		changeText126("Body Runes", 8765);
		changeText126("35", 8726);
		changeText126("Chaos Runes", 8766);
		changeText126("44", 8727);
		changeText126("Nature Runes", 8767);
		changeText126("54", 8728);
		changeText126("Law Runes", 8768);
		changeText126("65", 8729);
		changeText126("Death Runes", 8769);
		changeText126("90", 8730);
		changeText126("Blood Runes", 8770);
	}

	public void herbloreSkillMenu() {
		showInterface(8714);
		clearFrame8714();
		changeText126("Herblore", 8716); // Skill Name
		changeText126("", 8849); // @red@Members only skill
		changeText126("1", 8720); // Level
		changeText126("Unfinished Guam Potion", 8760); // Advancement
		changeText126("3", 8721);
		changeText126("Attack Potion", 8761);
		changeText126("5", 8722);
		changeText126("Unfinished Marrentill Potion", 8762);
		changeText126("5", 8723);
		changeText126("Antiposion Potion", 8763);
		changeText126("12", 8724);
		changeText126("Unfinished Tarromin Potion", 8764);
		changeText126("12", 8725);
		changeText126("Strength Potion", 8765);
		changeText126("15", 8726);
		changeText126("Serum 207", 8766);
		changeText126("22", 8727);
		changeText126("unfinished Harrlander Potion", 8767);
		changeText126("22", 8728);
		changeText126("Restore Potion", 8768);
		changeText126("30", 8729);
		changeText126("Unfinished Ranarr Potion", 8769);
		changeText126("30", 8730);
		changeText126("Defence Potion", 8770);
		changeText126("38", 8731);
		changeText126("Prayer Potion", 8771);
		changeText126("45", 8732);
		changeText126("Unfinished irit Potion", 8772);
		changeText126("45", 8733);
		changeText126("Super Attack Potion", 8773);
		changeText126("55", 8734);
		changeText126("Unfinished Kwuarm Potion", 8774);
		changeText126("55", 8735);
		changeText126("Super Strength Potion", 8775);
		changeText126("63", 8736);
		changeText126("Unfinished Snapdragon Potion", 8776);
		changeText126("63", 8737);
		changeText126("Super Restore Potion", 8777);
		changeText126("66", 8738);
		changeText126("Unfinished Cadantine Potion", 8778);
		changeText126("66", 8739);
		changeText126("Super Defence Potion", 8779);
		changeText126("81", 8740);
		changeText126("Unfinished Toadflax Potion", 8780);
		changeText126("81", 8741);
		changeText126("Saradomin Brew Potion", 8781);
	}

	public void resetAllPrayers() {
		DefPray = 0;
		StrPray = 0;
		AtkPray = 0;
		HeadPray = 0;
		protectItem = false;
		SetConfig(83, 0);
		SetConfig(84, 0);
		SetConfig(85, 0);
		SetConfig(86, 0);
		SetConfig(87, 0);
		SetConfig(88, 0);
		SetConfig(89, 0);
		SetConfig(90, 0);
		SetConfig(91, 0);
		SetConfig(92, 0);
		SetConfig(93, 0);
		SetConfig(94, 0);
		SetConfig(95, 0);
		SetConfig(96, 0);
		SetConfig(97, 0);
		SetConfig(98, 0);
		SetConfig(99, 0);
		SetConfig(100, 0);
		SetConfig(102, 0);
		SetConfig(101, 0);
		SetPrayHeadIcon(0);
		CheckIfPray();
	}

	public void SetConfig(int InterfaceId, int State) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(36);
		outStream.writeWordBigEndian(InterfaceId);
		outStream.writeByte(State);
	}

	public void SetConfig2(int InterfaceId, int State) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(87);
		outStream.writeWordBigEndian(InterfaceId);
		outStream.writeDWord_v1(State);
	}

	public void playerHeadToFrame(int InterfaceId) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(185);
		outStream.writeWordBigEndianA(InterfaceId);
	}

	public void SetConfig4(int InterfaceId, int size, int itemId) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrame(246);
		outStream.writeWordBigEndian(InterfaceId);
		outStream.writeWord(size);
		outStream.writeWord(itemId);
	}

	public void setAtkType() {
		String weaponName = getItemName(playerEquipment[playerWeapon]);
		weaponName = weaponName.replaceAll("_", " ");
		if (weaponName.equals("Abyssal whip")) {
			if (skillId == playerAttack) {
				SetConfig(43, 0);
			}
			if (skillId == 3) // Controlled
			{
				SetConfig(43, 1);
			}
			if (skillId == playerDefence) {
				SetConfig(43, 2);
			}
		} else if (weaponName.equals("Unarmed")
				|| playerEquipment[playerWeapon] == -1
				|| weaponName.endsWith("maul")
				|| weaponName.equals("Tzhaar-ket-om")
				|| weaponName.equals("Torags hammers")
				|| weaponName.endsWith("staff") || weaponName.endsWith("Staff")) {
			if (skillId == playerAttack) {
				SetConfig(43, 0);
			}
			if (skillId == playerStrength) {
				SetConfig(43, 1);
			}
			if (skillId == playerDefence) {
				SetConfig(43, 2);
			}
		} else if (weaponName.endsWith("c'bow")
				|| weaponName.endsWith("crossbow")
				|| weaponName.endsWith("bow")
				|| weaponName.endsWith("bow full")
				|| weaponName.equals("Seercull") || weaponName.endsWith("dart")
				|| weaponName.endsWith("knife")
				|| weaponName.endsWith("thrownaxe")
				|| weaponName.equals("Toktz-xil-ul")) {
			if (skillId == playerAttack) {
				SetConfig(43, 0);
			}
			if (skillId == playerStrength) {
				SetConfig(43, 1);
			}
			if (skillId == 3) // Controlled
			{
				SetConfig(43, 2);
			}
		} else if (weaponName.endsWith("halberd")) {
			if (skillId == 3) // Controlled
			{
				SetConfig(43, 0);
			}
			if (skillId == playerStrength) {
				SetConfig(43, 1);
			}
			if (skillId == playerDefence) {
				SetConfig(43, 2);
			}
		} else if (weaponName.endsWith("spear")
				|| weaponName.endsWith("warspear")) {
			if (skillId == 3) // Controlled
			{
				SetConfig(43, 0);
			}
			if (skillId == playerDefence) {
				SetConfig(43, 3);
			}
		} else {
			if (skillId == playerAttack) {
				SetConfig(43, 0);
			}
			if (skillId == playerStrength) {
				SetConfig(43, 1);
			}
			if (skillId == 3) // Controlled
			{
				SetConfig(43, 2);
			}
			if (skillId == playerDefence) {
				SetConfig(43, 3);
			}
		}
	}

	public void SendWeapon(int Weapon, String WeaponName) {
		String WeaponName2 = WeaponName.replaceAll("Bronze", "");
		WeaponName2 = WeaponName2.replaceAll("Iron", "");
		WeaponName2 = WeaponName2.replaceAll("Steel", "");
		WeaponName2 = WeaponName2.replaceAll("Black", "");
		WeaponName2 = WeaponName2.replaceAll("Mithril", "");
		WeaponName2 = WeaponName2.replaceAll("Adamant", "");
		WeaponName2 = WeaponName2.replaceAll("Rune", "");
		WeaponName2 = WeaponName2.replaceAll("Granite", "");
		WeaponName2 = WeaponName2.replaceAll("Dragon", "");
		WeaponName2 = WeaponName2.replaceAll("Crystal", "");
		WeaponName2 = WeaponName2.trim();
		int wearID = 0;
		if (wearID == 4031) {
			isNpc = true;
			npcId = 1463;
		} else {
			isNpc = false;
			npcId = 0;
		}
		playerSE = GetStandEmote(Weapon, WeaponName);
		playerSER = GetRunEmote(Weapon, WeaponName);
		playerSEW = GetWalkEmote(Weapon, WeaponName);
		playerSW = GetWalkEmote(Weapon, WeaponName);
		if (needsSpecBar(playerEquipment[playerWeapon])) {
			specialAttackBar();
			Frame171(7574, 0);
		} else {
			Frame171(7574, 1);
		}
		SetConfig(108, 0);
		if (spellCastedId > 0) {
			changeText126("none set", 352);
		}
		UsingSpecial = false;
		HasSecondHit = false;
		spellCastedId = 0;
		autocastSpell = false;
		if (skillId == playerStrength && Weapon == 4151) {
			skillId = 3;
		}
		if (WeaponName.equals("Unarmed") || playerEquipment[playerWeapon] == -1) {
			SetSidebar(0, 5855);
			changeText126(WeaponName, 5857);
		} else if (WeaponName.contains("whip")) {
			SetSidebar(0, 12290);
			displayItem246(12291, 200, Weapon);
			changeText126(WeaponName, 12293);
		} else if (Weapon == 7777) {
			SetSidebar(0, 4679);
			displayItem246(4680, 200, Weapon);
			changeText126(WeaponName, 4682);
		} else if (WeaponName.contains("maul")
				|| WeaponName.equals("Tzhaar-ket-om")
				|| WeaponName.equals("Torags hammers")
				|| WeaponName.equals("Barrelchest anchor")) {
			SetSidebar(0, 425);
			displayItem246(426, 200, Weapon);
			changeText126(WeaponName, 428);
		} else if (WeaponName.equals("Veracs flail")) {
			SetSidebar(0, 3796);
			displayItem246(3797, 200, Weapon);
			changeText126(WeaponName, 3799);
		} else if (WeaponName.endsWith("c'bow")
				|| WeaponName.equals("Karils crossbow")) {
			SetSidebar(0, 1749);
			displayItem246(1750, 200, Weapon);
			changeText126(WeaponName, 1752);
		} else if (WeaponName.endsWith("bow")
				|| WeaponName.endsWith("bow full")
				|| WeaponName.endsWith("Seercull")) {
			SetSidebar(0, 1764);
			displayItem246(1765, 200, Weapon);
			changeText126(WeaponName, 1767);
		} else if (WeaponName.startsWith("Staff")
				|| WeaponName.endsWith("staff")
				|| WeaponName.endsWith("Toktz-mej-tal") && Weapon != 7777) {
			SetSidebar(0, 328);
			displayItem246(329, 200, Weapon);
			changeText126(WeaponName, 331);
		} else if (WeaponName2.endsWith("dart")
				|| WeaponName2.endsWith("knife")
				|| WeaponName2.endsWith("thrownaxe")
				|| WeaponName2.equals("Toktz-xil-ul")) {
			SetSidebar(0, 4446);
			displayItem246(4447, 200, Weapon);
			changeText126(WeaponName, 4449);
		} else if (WeaponName2.endsWith("dagger")
				|| WeaponName2.endsWith("dagger(s)")) {
			SetSidebar(0, 2276);
			displayItem246(2277, 200, Weapon);
			changeText126(WeaponName, 2279);
		} else if (WeaponName2.endsWith("pickaxe")) {
			SetSidebar(0, 5570);
			displayItem246(5571, 200, Weapon);
			changeText126(WeaponName, 5573);
		} else if (WeaponName2.endsWith("mace")) {
			SetSidebar(0, 3796);
			displayItem246(3797, 200, Weapon);
			changeText126(WeaponName, 3799);
		} else if (WeaponName2.endsWith("axe")
				|| WeaponName2.endsWith("battleaxe")) {
			SetSidebar(0, 1698);
			displayItem246(1699, 200, Weapon);
			changeText126(WeaponName, 1701);
		} else if (WeaponName2.endsWith("halberd")) {
			SetSidebar(0, 8460);
			displayItem246(8461, 200, Weapon);
			changeText126(WeaponName, 8463);
		} else if (WeaponName2.endsWith("spear")
				|| WeaponName2.equals("Guthans warspear")
				|| WeaponName2.contains("of light") || Weapon == 7777) {
			SetSidebar(0, 4679);
			displayItem246(4680, 200, Weapon);
			changeText126(WeaponName, 4682);
		} else if (WeaponName2.endsWith("claws")
				&& !WeaponName.contains("Dragon")) {
			SetSidebar(0, 7762);
			displayItem246(7763, 200, Weapon);
			changeText126(WeaponName, 7764);
		} else if (WeaponName2.endsWith("godsword")
				|| WeaponName2.contains("2h")
				|| WeaponName2.equals("Saradomin sword")
				|| WeaponName.contains("Dragon claws")) {
			SetSidebar(0, 4705);
			displayItem246(4706, 200, Weapon);
			changeText126(WeaponName, 4708);
		} else {
			SetSidebar(0, 2423);
			displayItem246(2424, 200, Weapon);
			changeText126(WeaponName, 2426);
		}
	}

	public boolean attemptRemoveItem(int wearID, int slot) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return false;
		}
		if (wearID <= 0 || slot < 0) {
			return false;
		}
		if (!addItem(playerEquipment[slot], playerEquipmentN[slot])) {
			// sendMessage("Not enough space in your inventory.");
			return false;
		}
		playerEquipment[slot] = -1;
		playerEquipmentN[slot] = 0;
		outStream.createFrame(34);
		outStream.writeWord(6);
		outStream.writeWord(1688);
		outStream.writeByte(slot);
		outStream.writeWord(0);
		outStream.writeByte(0);
		getBonus();
		if (slot == playerWeapon) {
			SendWeapon((playerEquipment[playerWeapon]),
					getItemName(playerEquipment[playerWeapon]));
		}
		setDuelEquipment(-1, 0, slot);
		updateRequired = true;
		appearanceUpdateRequired = true;
		resetItems(3214);
		return true;
	}

	public void removeItem(int wearID, int slot) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		if (wearID <= 0 || slot < 0) {
			return;
		}
		if (!addItem(playerEquipment[slot], playerEquipmentN[slot])) {
			sendMessage("Not enough space in your inventory.");
			return;
		}
		playerEquipment[slot] = -1;
		playerEquipmentN[slot] = 0;
		outStream.createFrame(34);
		outStream.writeWord(6);
		outStream.writeWord(1688);
		outStream.writeByte(slot);
		outStream.writeWord(0);
		outStream.writeByte(0);
		getBonus();
		if (slot == playerWeapon) {
			SendWeapon((playerEquipment[playerWeapon]),
					getItemName(playerEquipment[playerWeapon]));
		}
		setDuelEquipment(-1, 0, slot);
		updateRequired = true;
		appearanceUpdateRequired = true;
		resetItems(3214);
	}

	public void ReplaceItems(int newID, int oldID, int newAmount, int oldAmount) {
		if (deleteItem(oldID, GetItemSlot(oldID), oldAmount)) {
			addItem(newID, newAmount);
		}
	}

	public double getItemShopValue(int ItemID) {
		double ShopValue = 1;
		for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) {
			if (Server.s.itemHandler.ItemList[i] != null) {
				if (Server.s.itemHandler.ItemList[i].itemId == ItemID) {
					ShopValue = Server.s.itemHandler.ItemList[i].ShopValue;
				}
			}
		}
		return ShopValue;
	}

	public double getItemValue(int ItemID) {
		double value = 1;
		for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) {
			if (Server.s.itemHandler.ItemList[i] != null) {
				if (Server.s.itemHandler.ItemList[i].itemId == ItemID) {
					value = Server.s.itemHandler.ItemList[i].LowAlch;
				}
			}
		}
		return value;
	}

	public void setDuelEquipment(int wearID, int amount, int targetSlot) {
		if (Server.s.playerHandler.players[playerId] == null || disconnected
				|| in == null || out == null) {
			if (combatDelay <= 0 && deathDelay < 0) {
				disconnected = true;
			}
			return;
		}
		outStream.createFrameVarSizeWord(34);
		outStream.writeWord(13824);
		outStream.writeByte(targetSlot);
		outStream.writeWord((wearID + 1));
		if (amount > 254) {
			outStream.writeByte(255);
			outStream.writeDWord(amount);
		} else {
			outStream.writeByte(amount);
		}
		outStream.endFrameVarSizeWord();
		updateRequired = true;
		appearanceUpdateRequired = true;
	}

	public void ItemOption1() {
		int InterfaceId = inStream.readUnsignedWordA();
		int ItemSlot = inStream.readUnsignedWordA();
		int ItemId = inStream.readUnsignedWordA();
		if (InterfaceId == 1688) {
			if (playerEquipment[ItemSlot] == ItemId) {
				removeItem(ItemId, ItemSlot);
			}
		} else if (InterfaceId == 5064) {
			bankItem(ItemId, ItemSlot, 1);
		} else if (InterfaceId == 5382) {
			fromBank(ItemId, ItemSlot, 1);
		} else if (InterfaceId == 3322) {
			if (duelStatus == -1) {
				if (isUntradable(ItemId) && playerRights != 2) {
					sendMessage("You cannot trade this item.");
				} else {
					TradeItem(ItemId, ItemSlot, 1);
				}
			} else if (duelStatus == 1) {
				if (isUntradable(ItemId) && playerRights != 2) {
					sendMessage("You cannot stake this item.");
				} else {
					stakeItem(ItemId, ItemSlot, 1);
				}
			}
		} else if (InterfaceId == 3415) {
			if (duelStatus == -1) {
				if (Server.s.playerHandler.players[TradingWith] != null) {
					if (TradeStatus != 2
							&& Server.s.playerHandler.players[TradingWith].TradeStatus != 2) {
						FromTrade(ItemId, ItemSlot, 1);
					} else {
						sendMessage("You can't do that!");
					}
				}
			}
		} else if (InterfaceId >= 1119 && InterfaceId <= 1122) {
			try {
				if (barsNeeded(ItemSlot, InterfaceId) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							RemoveAllWindows();
							startAnimation(898, 0);
							addSkillXP(
									smithXP(removeBar(ItemId),
											barsNeeded(ItemSlot, InterfaceId),
											ItemId) * smithXpInc, 13);
							ReplaceItems(ItemId, removeBar(ItemId), 1,
									barsNeeded(ItemSlot, InterfaceId));

						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 1123) {
			try {
				if (barsNeeded(ItemSlot, InterfaceId) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							RemoveAllWindows();
							startAnimation(898, 0);
							addSkillXP(
									smithXP(removeBar(ItemId),
											barsNeeded(ItemSlot, InterfaceId),
											ItemId) * smithXpInc, 13);
							if (ItemSlot == 0) {
								ReplaceItems(ItemId, removeBar(ItemId), 10,
										barsNeeded(ItemSlot, InterfaceId));
							}
							if (ItemSlot == 1) {
								ReplaceItems(ItemId, removeBar(ItemId), 15,
										barsNeeded(ItemSlot, InterfaceId));
							}
							if (ItemSlot == 2) {
								ReplaceItems(ItemId, removeBar(ItemId), 5,
										barsNeeded(ItemSlot, InterfaceId));
							} else {
								ReplaceItems(ItemId, removeBar(ItemId), 1,
										barsNeeded(ItemSlot, InterfaceId));
							}

						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 6669) {
			if (duelStatus == 1) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					fromDuel(ItemId, ItemSlot, 1);
				} else {
					sendMessage("You can't do that!");
				}
			}
		} else if (InterfaceId == 3823) {
			if (isUntradable(ItemId)) {
				sendMessage("You cannot sell this item.");
			} else {
				boolean IsIn = false;
				if (Server.s.shopHandler.ShopSModifier[MyShopID] > 1) {
					for (int j = 0; j <= Server.s.shopHandler.ShopItemsStandard[MyShopID]; j++) {
						if (ItemId == (Server.s.shopHandler.ShopItems[MyShopID][j] - 1)) {
							IsIn = true;
							break;
						}
					}
				} else {
					IsIn = true;
				}
				if (IsIn == false) {
					sendMessage("This shop will not buy that item.");
				} else {
					int ShopValue = (int) Math.floor(getItemValue(ItemId));
					String ShopAdd = "";
					if (ShopValue >= 1000 && ShopValue < 1000000) {
						ShopAdd = " (" + (ShopValue / 1000) + "K)";
					} else if (ShopValue >= 1000000) {
						ShopAdd = " (" + (ShopValue / 1000000) + " million)";
					}
					sendMessage(getItemName(ItemId) + ": shop will buy for "
							+ ShopValue + " coins" + ShopAdd);
				}
			}
		} else if (InterfaceId == 3900) {
			int ShopValue = (int) Math.floor(getItemShopValue(ItemId));
			String ShopAdd = "";
			if (ShopValue <= 1) {
				ShopValue = (int) Math.floor(getItemShopValue(ItemId));
			}
			if (ShopValue >= 1000 && ShopValue < 1000000) {
				ShopAdd = " (" + (ShopValue / 1000) + "K)";
			} else if (ShopValue >= 1000000) {
				ShopAdd = " (" + (ShopValue / 1000000) + " million)";
			}
			if (MyShopID != 6 && MyShopID != 7 && MyShopID != 11
					&& MyShopID != 52 && MyShopID != 59 && MyShopID != 60) {
				sendMessage(getItemName(ItemId) + ": currently costs "
						+ ShopValue + " coins" + ShopAdd);
			} else if (MyShopID == 6) {
				if (ItemId == 7960) {
					sendMessage("Fighter torso: currently costs 600 tokens.");
				} else if (ItemId == 7973) {
					sendMessage("Ranger hat: currently costs 85 tokens.");
				} else if (ItemId == 7974) {
					sendMessage("Granite platebody: currently costs 270 tokens.");
				} else if (ItemId == 7975) {
					sendMessage("Fighter hat: currently costs 85 tokens.");
				} else if (ItemId == 8100) {
					sendMessage("Healer hat: currently costs 85 tokens.");
				} else if (ItemId == 3105) {
					sendMessage("Climbing boots: currently costs 50 tokens.");
				}
			} else if (MyShopID == 7) {
				if (ItemId == 2412) {
					sendMessage("Saradomin cape: currently costs 30 kill points.");
				} else if (ItemId == 2413) {
					sendMessage("Guthix cape: currently costs 30 kill points.");
				} else if (ItemId == 2414) {
					sendMessage("Zamorak cape: currently costs 30 kill points.");
				} else if (ItemId == 2415) {
					sendMessage("Saradomin staff: currently costs 70 kill points.");
				} else if (ItemId == 2416) {
					sendMessage("Guthix staff: currently costs 70 kill points.");
				} else if (ItemId == 2417) {
					sendMessage("Zamorak staff: currently costs 70 kill points.");
				} else if (ItemId == 7980) {
					sendMessage("Astral rune: currently costs 3 kill points.");
				} else if (ItemId == 8013) {
					sendMessage("Lunar helm: currently costs 15 kill points.");
				} else if (ItemId == 8014) {
					sendMessage("Lunar torso: currently costs 50 kill points.");
				} else if (ItemId == 8015) {
					sendMessage("Lunar legs: currently costs 40 kill points.");
				} else if (ItemId == 8016) {
					sendMessage("Lunar gloves: currently costs 5 kill points.");
				} else if (ItemId == 8017) {
					sendMessage("Lunar boots: currently costs 5 kill points.");
				} else if (ItemId == 8018) {
					sendMessage("Lunar cape: currently costs 20 kill points.");
				}
			} else if (MyShopID == 11) {
				if (ItemId == 7992) {
					sendMessage("Helm of neitiznot: currently costs 70 pest control points.");
				} else if (ItemId == 5574) {
					sendMessage("Initiate helm: currently costs 4 pest control points.");
				} else if (ItemId == 5575) {
					sendMessage("Initiate platemail: currently costs 6 pest control points.");
				} else if (ItemId == 5576) {
					sendMessage("Initiate platelegs: currently costs 5 pest control points.");
				} else if (ItemId == 8003) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 180 pest control points.");
				} else if (ItemId == 8002) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 180 pest control points.");
				} else if (ItemId == 8019) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 60 pest control points.");
				} else if (ItemId == 8020) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 50 pest control points.");
				} else if (ItemId == 8021) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 30 pest control points.");
				} else if (ItemId == 8022) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 40 pest control points.");
				} else if (ItemId == 8023) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 40 pest control points.");
				} else if (ItemId == 8024) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 40 pest control points.");
				} else if (ItemId == 7989) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 3 pest control points.");
				} else if (ItemId == 7454) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 8 pest control points.");
				} else if (ItemId == 7455) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 12 pest control points.");
				} else if (ItemId == 7456) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 18 pest control points.");
				} else if (ItemId == 7457) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 24 pest control points.");
				} else if (ItemId == 7458) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 30 pest control points.");
				} else if (ItemId == 7459) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 36 pest control points.");
				} else if (ItemId == 7460) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 42 pest control points.");
				} else if (ItemId == 7461) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 48 pest control points.");
				} else if (ItemId == 7462) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 54 pest control points.");
				} else if (ItemId == 8102) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 60 pest control points.");
				} else if (ItemId == 8103) {
					sendMessage(getItemName(ItemId)
							+ ": currently costs 120 pest control points.");
				}
			} else if (MyShopID == 52) {
				if (ItemId == 1999) {
					sendMessage("Dragon whip: currently costs 10000 Zombie Points.");
				} else if (ItemId == 8051) {
					sendMessage("Rune whip: currently costs 3000 Zombie Points.");
				} else if (ItemId == 8086) {
					sendMessage("Armadyl godsword: currently costs 1000 Zombie Points.");
				} else if (ItemId == 7993) {
					sendMessage("Bandos godsword: currently costs 500 Zombie Points.");
				} else if (ItemId == 8039) {
					sendMessage("Saradomin sword: currently costs 350 Zombie Points.");
				} else if (ItemId == 7990) {
					sendMessage("Dragon Full Helm: currently costs 150 Zombie Points.");
				} else if (ItemId == 7977) {
					sendMessage("Barrows defender: currently costs 100 Zombie Points.");
				} else if (ItemId == 7976) {
					sendMessage("Dragon defender: currently costs 75 Zombie Points.");
				}
			} else if (MyShopID == 60) {
				if (ItemId == 7777) {
					sendMessage("Staff of light: currently costs 750 PK Points.");
				} else if (ItemId == 8922) {
					sendMessage("Dragon claws: currently costs 650 PK Points.");
				} else if (ItemId == 8916) {
					sendMessage("Statius warhammer: currently costs 500 PK Points.");
				} else if (ItemId == 8907) {
					sendMessage("Vesta longsword: currently costs 500 PK Points.");
				} else if (ItemId == 8908) {
					sendMessage("Vesta spear: currently costs 500 PK Points.");
				}
			} else if (MyShopID == 59) {
				if (ItemId == 7960) {
					sendMessage("Fighter Torso: currently costs 35 points.");
				} else if (ItemId == 7974) {
					sendMessage("Granite Body: currently costs 25 points.");
				} else if (ItemId == 7975) {
					sendMessage("Fighter Hat: currently costs 20 points.");
				} else if (ItemId == 3105) {
					sendMessage("Climbing Boots: currently costs 15 points.");
				} else if (ItemId == 8100) {
					sendMessage("Healer Hat: currently costs 25 points.");
				} else if (ItemId == 8058) {
					sendMessage("Bronze defender: currently costs 3 points.");
				} else if (ItemId == 8059) {
					sendMessage("Iron defender: currently costs 5 points.");
				} else if (ItemId == 8060) {
					sendMessage("Steel defender: currently costs 7 points.");
				} else if (ItemId == 8061) {
					sendMessage("Black defender: currently costs 9 points.");
				} else if (ItemId == 8062) {
					sendMessage("Mithril defender: currently costs 12 points.");
				} else if (ItemId == 8063) {
					sendMessage("Adamant defender: currently costs 13 points.");
				} else if (ItemId == 7959) {
					sendMessage("Rune defender: currently costs 20 points.");
				} else if (ItemId == 8064) {
					sendMessage("Dragon Platebody: currently costs 150 points.");
				}
			}
		}
	}

	public void ItemOption2() {
		int InterfaceId = inStream.readSignedWordBigEndianA();
		int ItemId = inStream.readSignedWordBigEndianA();
		int ItemSlot = inStream.readSignedWordBigEndian();
		if (InterfaceId == 5064) {
			bankItem(ItemId, ItemSlot, 5);
		} else if (InterfaceId == 5382) {
			fromBank(ItemId, ItemSlot, 5);
		} else if (InterfaceId == 3322) {
			if (duelStatus == -1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot trade this item.");
				} else {
					TradeItem(ItemId, ItemSlot, 5);
				}
			} else if (duelStatus == 1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot stake this item.");
				} else {
					stakeItem(ItemId, ItemSlot, 5);
				}
			}
		} else if (InterfaceId >= 1119 && InterfaceId <= 1122) {
			try {
				if ((barsNeeded(ItemSlot, InterfaceId) * 4) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							for (int e = 0; e < 5; e++) {
								RemoveAllWindows();
								startAnimation(898, 0);
								addSkillXP(
										smithXP(removeBar(ItemId),
												barsNeeded(ItemSlot,
														InterfaceId), ItemId)
												* smithXpInc, 13);
								ReplaceItems(ItemId, removeBar(ItemId), 1,
										barsNeeded(ItemSlot, InterfaceId));
							}

						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 1123) {
			try {
				if ((barsNeeded(ItemSlot, InterfaceId) * 4) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							for (int e = 0; e < 5; e++) {
								RemoveAllWindows();
								startAnimation(898, 0);
								addSkillXP(
										smithXP(removeBar(ItemId),
												barsNeeded(ItemSlot,
														InterfaceId), ItemId)
												* smithXpInc, 13);
								if (ItemSlot == 0) {
									ReplaceItems(ItemId, removeBar(ItemId), 10,
											barsNeeded(ItemSlot, InterfaceId));
								}
								if (ItemSlot == 1) {
									ReplaceItems(ItemId, removeBar(ItemId), 15,
											barsNeeded(ItemSlot, InterfaceId));
								}
								if (ItemSlot == 2) {
									ReplaceItems(ItemId, removeBar(ItemId), 5,
											barsNeeded(ItemSlot, InterfaceId));
								} else {
									ReplaceItems(ItemId, removeBar(ItemId), 1,
											barsNeeded(ItemSlot, InterfaceId));
								}
							}
						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 3415) {
			if (duelStatus == -1) {
				if (Server.s.playerHandler.players[TradingWith] != null) {
					if (TradeStatus != 2
							&& Server.s.playerHandler.players[TradingWith].TradeStatus != 2) {
						FromTrade(ItemId, ItemSlot, 5);
					} else {
						sendMessage("You can't do that!");
					}
				}
			}
		} else if (InterfaceId == 6669) {
			if (duelStatus == 1) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					fromDuel(ItemId, ItemSlot, 5);
				} else {
					sendMessage("You can't do that!");
				}
			}
		} else if (InterfaceId == 3823) {
			if (isUntradable(ItemId)) {
				sendMessage("You cannot sell this item.");
			} else {
				sellItem(ItemId, ItemSlot, 1);
			}
		} else if (InterfaceId == 3900) {
			buyItem(ItemId, ItemSlot, 1);
		}
	}

	public void ItemOption3() {
		int InterfaceId = inStream.readUnsignedWordBigEndian();
		int ItemId = inStream.readUnsignedWordA();
		int ItemSlot = inStream.readUnsignedWordA();
		if (InterfaceId == 5064) {
			bankItem(ItemId, ItemSlot, 10);
		} else if (InterfaceId == 5382) {
			fromBank(ItemId, ItemSlot, 10);
		} else if (InterfaceId == 3322) {
			if (duelStatus == -1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot trade this item.");
				} else {
					TradeItem(ItemId, ItemSlot, 10);
				}
			} else if (duelStatus == 1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot stake this item.");
				} else {
					stakeItem(ItemId, ItemSlot, 10);
				}
			}
		} else if (InterfaceId == 3415) {
			if (duelStatus == -1) {
				if (Server.s.playerHandler.players[TradingWith] != null) {
					if (TradeStatus != 2
							&& Server.s.playerHandler.players[TradingWith].TradeStatus != 2) {
						FromTrade(ItemId, ItemSlot, 10);
					} else {
						sendMessage("You can't do that!");
					}
				}
			}
		} else if (InterfaceId >= 1119 && InterfaceId <= 1122) {
			try {
				if ((barsNeeded(ItemSlot, InterfaceId) * 9) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							for (int e = 0; e < 10; e++) {
								RemoveAllWindows();
								startAnimation(898, 0);
								addSkillXP(
										smithXP(removeBar(ItemId),
												barsNeeded(ItemSlot,
														InterfaceId), ItemId)
												* smithXpInc, 13);
								ReplaceItems(ItemId, removeBar(ItemId), 1,
										barsNeeded(ItemSlot, InterfaceId));
							}

						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 1123) {
			try {
				if ((barsNeeded(ItemSlot, InterfaceId) * 9) <= InvItemAmt(removeBar(ItemId))) {
					if (InvItemAmt(2347) > 0) {
						if (canSmith(ItemId)) {
							for (int e = 0; e < 10; e++) {
								RemoveAllWindows();
								startAnimation(898, 0);
								addSkillXP(
										smithXP(removeBar(ItemId),
												barsNeeded(ItemSlot,
														InterfaceId), ItemId)
												* smithXpInc, 13);
								if (ItemSlot == 0) {
									ReplaceItems(ItemId, removeBar(ItemId), 10,
											barsNeeded(ItemSlot, InterfaceId));
								}
								if (ItemSlot == 1) {
									ReplaceItems(ItemId, removeBar(ItemId), 15,
											barsNeeded(ItemSlot, InterfaceId));
								}
								if (ItemSlot == 2) {
									ReplaceItems(ItemId, removeBar(ItemId), 5,
											barsNeeded(ItemSlot, InterfaceId));
								} else {
									ReplaceItems(ItemId, removeBar(ItemId), 1,
											barsNeeded(ItemSlot, InterfaceId));
								}
							}
						} else {
							sendMessage("You need a higher smithing level to smith "
									+ getItemName(ItemId) + "s");
						}
					} else {
						sendMessage("You need a hammer to smith this item.");
					}
				} else {
					sendMessage("You dont have enough bars to make this");
				}
			} catch (Exception e) {
			}
		} else if (InterfaceId == 6669) {
			if (duelStatus == 1) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					fromDuel(ItemId, ItemSlot, 10);
				} else {
					sendMessage("You can't do that!");
				}
			}
		} else if (InterfaceId == 3823) {
			if (isUntradable(ItemId)) {
				sendMessage("You cannot sell this item.");
			} else {
				sellItem(ItemId, ItemSlot, 5);
			}
		} else if (InterfaceId == 3900) {
			buyItem(ItemId, ItemSlot, 5);
		}
	}

	public void ItemOption4() {
		int ItemSlot = inStream.readUnsignedWordA();
		int InterfaceId = inStream.readUnsignedWord();
		int ItemId = inStream.readUnsignedWordA();
		if (InterfaceId == 5064) {
			if (!Item.itemStackable[ItemId] && !Item.itemIsNote[ItemId]) {
				bankItem(playerItems[ItemSlot] - 1, ItemSlot,
						InvItemAmt(playerItems[ItemSlot] - 1));
			} else {
				bankItem(playerItems[ItemSlot] - 1, ItemSlot,
						playerItemsN[ItemSlot]);
			}
		} else if (InterfaceId == 5382) {
			fromBank(bankItems[ItemSlot] - 1, ItemSlot,
					BankItemAmt(bankItems[ItemSlot] - 1));
		} else if (InterfaceId == 3322) {
			if (duelStatus == -1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot trade this item.");
				} else {
					TradeItem(ItemId, ItemSlot,
							InvItemAmt(playerItems[ItemSlot] - 1));
				}
			} else if (duelStatus == 1) {
				if (isUntradable(ItemId)) {
					sendMessage("You cannot stake this item.");
				} else {
					if (!Item.itemStackable[ItemId] && !Item.itemIsNote[ItemId]) {
						stakeItem(ItemId, ItemSlot,
								InvItemAmt(playerItems[ItemSlot] - 1));
					} else {
						stakeItem(ItemId, ItemSlot, playerItemsN[ItemSlot]);
					}
				}
			}
		} else if (InterfaceId == 3415) {
			if (duelStatus == -1) {
				if (Server.s.playerHandler.players[TradingWith] != null) {
					if (TradeStatus != 2
							&& Server.s.playerHandler.players[TradingWith].TradeStatus != 2) {
						FromTrade(ItemId, ItemSlot, tradeItemAmt(ItemId));
					} else {
						sendMessage("You can't do that!");
					}
				}
			}
		} else if (InterfaceId == 6669) {
			if (duelStatus == 1) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					fromDuel(ItemId, ItemSlot, -924);
				} else {
					sendMessage("You can't do that!");
				}
			}
		} else if (InterfaceId == 3823) {
			if (isUntradable(ItemId)) {
				sendMessage("You cannot sell this item.");
			} else {
				sellItem(ItemId, ItemSlot, 10);
			}
		} else if (InterfaceId == 3900) {
			buyItem(ItemId, ItemSlot, 10);
		}
	}

	public void textPrompt() {
		String textSent = Misc.longToPlayerName(inStream.readQWord());
		textSent = textSent.replaceAll("_", " ");
		switch (XInterfaceId) {
		case 18858:
			whosRightsChanged = textSent;
			NpcDialogue = 229;
			DialogueSend();
			CurrentFrame = 13901;
			break;
		case 18857:
			int pId = Server.s.playerHandler.GetIdFromName(textSent);
			if (Server.s.playerHandler.removeClanMember(textSent, playerName)) {
				sendMessage("Player " + textSent + " removed from the clan.");
			} else {
				sendMessage("Error finding player in clan list.");
				break;
			}
			if (pId != -1) {
				Client p = (Client) Server.s.playerHandler.players[pId];
				p.sendMessage("You have been removed from your clan.");
				p.updateClanText();
				p.clearClanFrame();
			}
			break;
		case 18870:
			if (Server.s.playerHandler.createClan(textSent, playerId)) {
				sendMessage("You have created the clan " + textSent + "!");
				updateClanText();
			} else {
				sendMessage("Error creating clan?");
			}
			break;
		case 18856:
			pId = Server.s.playerHandler.GetIdFromName(textSent);
			if (pId == -1) {
				sendMessage("Other player not online.");
			} else {
				Client p = (Client) Server.s.playerHandler.players[pId];
				if (p.clanRequest != -1) {
					sendMessage("Other player is already viewing a clan request.");
				} else if (p.Tradecompete != 0) {
					sendMessage("Other player is not accepting clan requests.");
				} else if (p.CurrentFrame > 0) {
					sendMessage("Other player is busy.");
				} else if (Server.s.playerHandler.getClanId(p.playerName) == -1) {
					p.clanRequest = Server.s.playerHandler
							.getClanId(playerName);
					p.clanRequestName = playerName;
					p.NpcDialogue = 228;
					p.DialogueSend();
					p.CurrentFrame = 13901;
				} else {
					sendMessage("Other player is already in a clan.");
				}
			}
			break;
		default:
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: InterfaceId = " + XInterfaceId
						+ ", String = " + textSent);
			}
			break;
		}
	}

	public void ItemOption5() {
		int EnteredAmount = inStream.readDWord();
		if (EnteredAmount <= 0) {
			EnteredAmount = 1;
		}
		switch (XInterfaceId) {
		case 13718:
			cookItem(EnteredAmount);
			break;
		case 8946:
			if (jewelleryType == 1) {
				craftJewel(1635, EnteredAmount);
			} else if (jewelleryType == 2) {
				craftJewel(1654, EnteredAmount);
			} else if (jewelleryType == 3) {
				craftJewel(1673, EnteredAmount);
			}
			break;
		case 8950:
			if (jewelleryType == 1) {
				craftJewel(1637, EnteredAmount);
			} else if (jewelleryType == 2) {
				craftJewel(1656, EnteredAmount);
			} else if (jewelleryType == 3) {
				craftJewel(1675, EnteredAmount);
			}
			break;
		case 8954:
			if (jewelleryType == 1) {
				craftJewel(1639, EnteredAmount);
			} else if (jewelleryType == 2) {
				craftJewel(1658, EnteredAmount);
			} else if (jewelleryType == 3) {
				craftJewel(1677, EnteredAmount);
			}
			break;
		case 8958:
			if (jewelleryType == 1) {
				craftJewel(1641, EnteredAmount);
			} else if (jewelleryType == 2) {
				craftJewel(1660, EnteredAmount);
			} else if (jewelleryType == 3) {
				craftJewel(1679, EnteredAmount);
			}
			break;
		case 8962:
			if (jewelleryType == 1) {
				craftJewel(1643, EnteredAmount);
			} else if (jewelleryType == 2) {
				craftJewel(1662, EnteredAmount);
			} else if (jewelleryType == 3) {
				craftJewel(1681, EnteredAmount);
			}
			break;
		case 14801:
			tanHide(1741, EnteredAmount);
			break;
		case 14802:
			tanHide(1743, EnteredAmount);
			break;
		case 14803:
			tanHide(1745, EnteredAmount);
			break;
		case 14804:
			tanHide(2505, EnteredAmount);
			break;
		case 14805:
			tanHide(2507, EnteredAmount);
			break;
		case 14806:
			tanHide(2509, EnteredAmount);
			break;
		case 14807:
			tanHide(8080, EnteredAmount);
			break;
		case 5064:
			bankItem(playerItems[XItemSlot] - 1, XItemSlot, EnteredAmount);
			break;
		case 5382:
			fromBank(bankItems[XItemSlot] - 1, XItemSlot, EnteredAmount);
			break;
		case 8886:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1099;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2493;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2495;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2497;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				}
			} else {
				fletchType = 1;
				fletchDelAmt = EnteredAmount;
				isFletching = true;
			}
			break;
		case 8894:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1135;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2499;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2501;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2503;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				}
			} else {
				fletchType = 2;
				fletchDelAmt = EnteredAmount;
				isFletching = true;
			}
			break;
		case 8890:
			if (dHideCraft) {
				if (leatherId == 1745) {
					objectId = 1065;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2505) {
					objectId = 2487;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2507) {
					objectId = 2489;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				} else if (leatherId == 2509) {
					objectId = 2491;
					craftDelAmt = EnteredAmount;
					isCrafting = true;
				}
			} else {
				fletchType = 0;
				fletchDelAmt = EnteredAmount;
				isFletching = true;
			}
			break;
		case 2414:
		case 3988:
		case 3996:
		case 4000:
		case 4158:
		case 7442:
		case 7447:
			smeltItem(smeltId, EnteredAmount);
			break;
		case 3322:
			if (duelStatus == -1) {
				if (isUntradable(XItemId)) {
					sendMessage("You cannot trade this item.");
				} else {
					TradeItem(XItemId, XItemSlot, EnteredAmount);
				}
			} else if (duelStatus == 1) {
				if (isUntradable(XItemId)) {
					sendMessage("You cannot stake this item.");
				} else {
					stakeItem(XItemId, XItemSlot, EnteredAmount);
				}
			}
			break;
		case 3415:
			if (duelStatus == -1) {
				if (Server.s.playerHandler.players[TradingWith] != null) {
					if (TradeStatus != 2
							&& Server.s.playerHandler.players[TradingWith].TradeStatus != 2) {
						FromTrade(XItemId, XItemSlot, EnteredAmount);
					} else {
						sendMessage("You can't do that!");
					}
				}
			}
			break;
		case 6669:
			if (duelStatus == 1) {
				if (Server.s.playerHandler.players[duelWith] != null) {
					fromDuel(XItemId, XItemSlot, EnteredAmount);
				} else {
					sendMessage("You can't do that!");
				}
			}
			break;
		default:
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: XInterface: " + XInterfaceId);
			}
			sendMessage("XInterface: " + XInterfaceId);
			break;
		}
	}

	public void AcceptTrade() {
		Client trade = (Client)Server.s.playerHandler.players[TradingWith];
		sendFrame248(3323, 3321);
		resetItems(3322);
		resetTItems(3415);
		resetOTItems(3416);
		changeText126("Trading With: "
				+ trade.playerName+". They have "+trade.freeSlots()+" slots left.", 3417);
		changeText126("", 3431);
	}

	public void shakeScreen(int i1, int i2, int i3, int i4) {
		outStream.createFrame(35);
		outStream.writeByte(i1);
		outStream.writeByte(i2);
		outStream.writeByte(i3);
		outStream.writeByte(i4);
	}

	public int XItemSlot = 0;
	public int XInterfaceId = 0;
	public int XItemId = 0;
	public int yellDelay = 0;

	public void ReadCommandStrings() {
		String Command = inStream.readString();
		writeLog("" + playerName + " command: " + Command + "",
				"PlayerCommands");
		if (Command.startsWith("clan:") && Command.length() > 6) {
			clanMessage(Command.substring(6));
		}
		/*
		 * if (Command.startsWith("changepassword") && Command.length() > 15) {
		 * playerPass = Command.substring(15);
		 * sendMessage("Your new password is \"" + Command.substring(15) +
		 * "\""); }
		 */
		if (Command.startsWith("defreset") && !hasarmour()) {
			countNeeded();
		}
		if (Command.equals("noclip")) {
			if (playerRights < 2 || playerRights == 4 || playerRights == 5) {
				disconnected = true;
			}
		}
		if (Command.startsWith("defreset") && hasarmour()) {
			sendMessage("You need to take everything off you to do this.");
		} else if (Command.equalsIgnoreCase("explockon") && isMember == 1) {
			expLock = true;
			sendMessage("Exp lock is now enabled");
		} else if (Command.equalsIgnoreCase("explockon") && isMember != 1) {
			sendMessage("You must be a premium member to use that feature");
		} else if (Command.equalsIgnoreCase("explockoff")) {
			expLock = false;
			sendMessage("Exp lock is now disabled");
		} else if (Command.equalsIgnoreCase("staffonline")
				|| Command.equalsIgnoreCase("onlinestaff")) {
			staffOnline();
		} else if (Command.startsWith("resetbarrows")) {
			dharokSummoned = 0;
			ahrimSummoned = 0;
			guthanSummoned = 0;
			karilSummoned = 0;
			toragSummoned = 0;
			veracSummoned = 0;
			hiddenBarrowBro = 0;
			sendMessage("Your Barrows has Been Reseted Succesfully!");
		} else if (Command.startsWith("hitsnow")) {
			for (int i = 0; i < 10; i++) {
				hitQueue.hitQueue.add(new Hit(0, playerId));
			}
			sendMessage("Added hits..");
		} else if (Command.startsWith("mymac")) {
			try {
				sendMessage("Your mac address is: "
						+ MacAddress.getMacAddress(this.PlayerIp));
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (SocketException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (Command.startsWith("testclaws")) {
			this.startAnimation(10961, 0);
			this.playGraphic(1950, 0, 0);
		} else if (Command.equals("xpring")) {
			if (expRing) {
				addItem(2572, 1);
				sendMessage("Here is another ring, enjoy");
			} else {
				sendMessage("You cannot spawn an exp ring without purchasing one");
			}
		} else if (Command.equals("help")) {
			ClearFrame8134();
			changeText126("@dre@Help Commands", 8144);
			// changeText126("@dbl@::changepassword newpasswordhere - Change your password.",
			// 8147);
			changeText126("@dbl@::defreset - Reset your def to 1.", 8149);
			changeText126(
					"@dbl@::resetbarrows - Reset your barrows if your glitch.",
					8150);
			changeText126(
					"@dbl@/texthere - Use that symbol to talk in clan chat.",
					8151);
			changeText126("@dbl@::staffonline - View online staff members.",
					8152);
			changeText126("@dbl@::x10 - Make your hits x10", 8153);
			changeText126("@dbl@::hpbar - Change your HP bars", 8154);
			showInterface(8134);
		} else if (Command.startsWith("realplayers") && playerRights > 0) {
			sendMessage("Fake players: " + Server.s.playerHandler.playerCount);
			sendMessage("Real players: "
					+ ((int) ((Server.s.playerHandler.playerCount * 2) / 3)));
		} else if (Command.startsWith("yell") && Command.length() > 5) {
			if (isMember != 1 && playerRights < 1) {
				sendMessage("You must be a premium member to yell");
			} else {
				if (yellDelay <= 0) {
					if (muted == 0) {
						yellDelay = 10;
						String msg = Command.substring(5);
						if (msg.contains(":clan:")
								|| msg.contains(":tradereq:")
								|| msg.contains(":duelreq:")) {
							showDialogue("You cannot do this.");
							return;
						}
						String[] colorArray = { "red", "blu", "cya", "str",
								"gre", "whi", "pur", "yel" };
						for (String colors : colorArray) {
							if (msg.contains("@") && msg.contains(colors)
									&& playerRights != 2) {
								showDialogue("Remove the colors and try again.");
								return;
							}
						}
						if (playerName.equalsIgnoreCase("Mrquarter")) {
							Server.s.playerHandler.messageToAll = "[@or3@Founder@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (admin) {
							Server.s.playerHandler.messageToAll = "[@dre@Admin@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (developer) {
							Server.s.playerHandler.messageToAll = "[@whi@Developer@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (jrAdmin) {
							Server.s.playerHandler.messageToAll = "[@dbl@Jr. Admin@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (jrMod) {
							Server.s.playerHandler.messageToAll = "[@dbl@Global Mod@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (playerRights == 2) {
							Server.s.playerHandler.messageToAll = "[@dre@Admin@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (playerRights == 1) {
							Server.s.playerHandler.messageToAll = "[@dbl@Global Mod@bla@] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						if (isMember == 1) {
							Server.s.playerHandler.messageToAll = "[Member] < @blu@"
									+ playerName + "@bla@ > " + msg;
							return;
						}
						Server.s.playerHandler.messageToAll = playerName + ": "
								+ msg;
					} else {
						sendMessage("You can't use this while you are muted.");
					}
				}
			}
		} else if (playerRights >= 1 && playerRights != 4 && playerRights != 5) {
			String[] cmd = Command.split(" ");
			if (Command.startsWith("mute")) {
				try {
					String nameToMute = Command.substring(5);
					int mutedsSlot = Server.s.playerHandler
							.GetIdFromName(nameToMute);
					if (mutedsSlot <= 0) {
						sendMessage("Other player not online");
						return;
					}
					Server.s.playerHandler.players[mutedsSlot].muted = 1;
					Server.s.playerHandler.clients[mutedsSlot]
							.sendMessage(playerName + " has muted you.");
					sendMessage("Finished muting " + nameToMute + ".");
				} catch (Exception e) {
					sendMessage("::mute playername");
				}
			} else if (Command.equals("npcreset")) {
				for (NPC npcs : Server.s.npcHandler.npcs) {
					if (npcs != null) {
						npcs.CurrentHp = 0;
					}
				}
				Server.s.playerHandler.messageToAll = playerName
						+ " reset all NPCs.";
			} else if (Command.startsWith("ipban")) {
				try {
					String name = Command.substring(6);
					int slot = Server.s.playerHandler.GetIdFromName(name);
					if (slot <= 0) {
						sendMessage("Other player not online.");
						return;
					}
					Client user = (Client) Server.s.playerHandler.players[slot];
					if (user.playerRights > 0 && user.playerRights <= 2) {
						sendMessage("You cannot ipban a staff member.");
					} else {
						user.appendtoIPBanned();
						user.disconnected = true;
						sendMessage("Successfully IP banned " + name + ".");
					}
				} catch (Exception e) {
					sendMessage("::ipban username");
				}
			} else if (Command.startsWith("unmute")) {
				try {
					String nameTounMute = Command.substring(7);
					int unmutedsSlot = Server.s.playerHandler
							.GetIdFromName(nameTounMute);
					if (unmutedsSlot <= 0) {
						sendMessage("Other player not online");
						return;
					}
					Server.s.playerHandler.players[unmutedsSlot].muted = 0;
					sendMessage("Finished unmuting " + nameTounMute + ".");
				} catch (Exception e) {
					sendMessage("::unmute playername");
				}
				/*
				 * } else if (Command.startsWith("banuser")) { try { String
				 * otherPName = Command.substring(8); int otherPIndex =
				 * Server.s.playerHandler.GetIdFromName(otherPName); if
				 * (otherPIndex != -1) { client p = (client)
				 * Server.s.playerHandler.players[otherPIndex];
				 * writeLog(p.playerName, "BannedUsers"); p.disconnected = true;
				 * yell("[" + playerName + "] - Has just Banned " + p.playerName
				 * + "!"); sendMessage("You have banned " + p.playerName + "!");
				 * } else { sendMessage("The name doesnt exist."); } } catch
				 * (Exception e) {
				 * sendMessage("Try entering a name you want to ban.."); } }
				 * else if (Command.startsWith("unban")) { try { String victim =
				 * Command.substring(5); BufferedReader in = new
				 * BufferedReader(new FileReader("Data//BannedUsers.txt"));
				 * BufferedWriter out = new BufferedWriter(new
				 * FileWriter("Data//BannedUsers.txt")); String unban =
				 * Command.substring(6); String inFile; while ((inFile =
				 * in.readLine()) != null) { if (inFile.equalsIgnoreCase(unban))
				 * { } else { out.write(inFile); } } } catch (IOException e) {
				 * e.printStackTrace(); }
				 */
			} else if (Command.startsWith("kick")) {
				try {
					if (playerRights < 1 || playerRights == 4
							|| playerRights == 5) {
						sendMessage("You must be mod+ to use this command.");
						return;
					}
					String kickName = Command.substring(5);
					int slot = Server.s.playerHandler.GetIdFromName(kickName);
					if (slot <= 0) {
						sendMessage("Other player not online.");
						return;
					}
					Client kick = (Client) Server.s.playerHandler.players[slot];
					kick.disconnected = true;
					sendMessage("Sucessfully kicked " + kickName);
				} catch (Exception e) {
					e.printStackTrace();
					sendMessage("Syntax is ::kick name");
				}
			} else if (Command.startsWith("teleother")) {
				try {
					String nameToMove = Command.substring(10);
					int movedSlot = Server.s.playerHandler
							.GetIdFromName(nameToMove);
					if (movedSlot <= 0) {
						sendMessage("Other player not online");
						return;
					}
					Client moved = (Client) Server.s.playerHandler.players[movedSlot];
					if (playerRights != 2
							&& (moved.playerRights == 2 || moved.playerRights == 1)) {
						showDialogue("You cannot teleport other staff members to you.");
						return;
					}
					moved.changeCoords(absX, absY, heightLevel);
				} catch (Exception e) {
					sendMessage("::teleother playername");
				}
			} else if (Command.startsWith("teleto")) {
				try {
					String nameToMove = Command.substring(7);
					int movedSlot = Server.s.playerHandler
							.GetIdFromName(nameToMove);
					if (movedSlot <= 0) {
						sendMessage("Other player not online");
						return;
					}
					Client moved = (Client) Server.s.playerHandler.players[movedSlot];
					changeCoords(moved.absX, moved.absY, moved.heightLevel);
				} catch (Exception e) {
					sendMessage("::teleto playername");
				}
			} else if (Command.equals("viewmuted")) {
				int lineId = 8147;
				ClearFrame8134();
				changeText126("@dre@Online Muted Players", 8144);
				for (int p = 0; p < Server.s.playerHandler.maxPlayers; p++) {
					if (Server.s.playerHandler.players[p] != null) {
						if (Server.s.playerHandler.players[p].muted == 1) {
							lineId++;
							changeText126(
									"@dbl@"
											+ Server.s.playerHandler.players[p].playerName,
									lineId);
						}
					}
				}
				showInterface(8134);
			} else if (Command.equals("empty")) {
				if (combatDelay > 0) {
					sendMessage("Your in combat!");
					return;
				}
				try {
					removeAllItems();
				} catch (Exception e) {
				}
			} else if (Command.equals("controls")) {
				ClearFrame8134();
				changeText126("@dre@Administrator & Moderator Controls", 8144);
				changeText126(
						"@dbl@::mute playerName - mutes a desired player.",
						8147);
				changeText126(
						"@dbl@::unmute playerName - unmutes a desired player.",
						8148);
				changeText126(
						"@dbl@::viewmuted - view all online muted players.",
						8149);
				changeText126("@dbl@::yell - talk to the online players.", 8150);
				changeText126("@dbl@::empty - empty your inventory.", 8151);
				changeText126(
						"@dbl@::teleto playerName - teleports you to the desired player.",
						8152);
				changeText126(
						"@dbl@::teleother playerName - teleports another player to you.",
						8153);
				changeText126(
						"@dbl@::ipban playerName - ip bann a desired player.",
						8154);
				changeText126(
						"@dbl@::unipban playerName - un-ipban a desired player.",
						8155);
				showInterface(8134);
			}
		}

		String[] specials = { "Mrquarter", "Zestyts", "Boytoy",
				"Harry", "Broski", "Ghost", "Control Freq", "Shout You" };
		for (String names : specials)
			if (playerName.equalsIgnoreCase(names)) {
				String[] cmd = Command.split(" ");
				if (Command.startsWith("item")) {
					try {
						int itemId = Integer.parseInt(cmd[1]);
						int amt = Integer.parseInt(cmd[2]);
						addItem(itemId, amt);
					} catch (Exception e) {
					}
				} else if (Command.equals("master") && playerName.equalsIgnoreCase("Mrquarter")) {
					int[] ids = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
							14, 15, 16, 17, 18, 19, 20, 21, 22 };
					for (int skills : ids) {
						addSkillXP(14000000, skills);
					}
					showDialogue("Congratulations! You are now a master!");
				} else if (Command.equals("fightpits")) {
					if (FightPits.players.size() < 1) {
						sendMessage("All: none");
					} else {
						sendMessage("All: " + FightPits.players.toString());
					}
					if (FightPits.waiters.size() < 1) {
						sendMessage("Waiters: none");
					} else {
						sendMessage("Waiters: " + FightPits.waiters.toString());
					}
					if (FightPits.fighters.size() < 1) {
						sendMessage("Fighters: none");
					} else {
						sendMessage("Fighters: "
								+ FightPits.fighters.toString());
					}
				} else if (Command.equals("xteleall")) {
					for (Player allz : Server.s.playerHandler.players) {
						if (allz != null) {
							Client all = (Client) allz;
							all.changeCoords(absX, absY, heightLevel);
						}
					}
				} else if (Command.equals("restart")) {
					System.exit(0);
				} else if (Command.startsWith("update")) {
					try {
						int times = Integer.parseInt(cmd[1]);
						Server.s.playerHandler.updateSeconds = times;
						Server.s.playerHandler.updateRunning = true;
						EventManager.getSingleton().addEvent(new Event() {
							public void execute(EventContainer event) {
								if (Server.s.playerHandler.updateSeconds < 1
										&& Server.s.playerHandler.updateRunning) {
									event.stop();
									System.exit(0);
									return;
								}
								Server.s.playerHandler.updateSeconds--;
							}
						}, 1000);
					} catch (Exception e) {
						sendMessage("::update seconds");
					}
				} else if (Command.equals("endupdate")) {
					Server.s.playerHandler.updateRunning = false;
				} else if (Command.equals("bank")) {
					if (combatDelay > 0) {
						sendMessage("Your in combat!");
						return;
					}
					try {
						sendFrame248(5292, 5063);
						CurrentFrame = 5292;
						resetItems(5064);
					} catch (Exception e) {
					}
				} else if (Command.equals("hail")) {
					String phrase = "All hail";
					String name = playerName;
					String end = "!";
					int emote = 645;
					for (int i = 1; i < Server.s.playerHandler.maxPlayers; i++) {
						if (Server.s.playerHandler.players[i] != null) {
							Client p = (Client) Server.s.playerHandler.players[i];
							if (p.playerName != playerName) {
								p.forcedPlayerText = phrase + " " + name + end;
								p.forcedChatUpdateRequired = true;
								p.startAnimation(emote, 0);
								p.TurnPlayerTo(playerId);
							}
						}
					}
				} else if (Command.equals("spec")) {
					specialAmount = 100;
					specialAttackBar();
				}
				if (Command.equals("clip")) {
					BufferedWriter bw = null;
					try {
						bw = new BufferedWriter(new FileWriter("CFG/maps.txt",
								true));
						String statement = "		tiles.put(0 << 28 | " + absX
								+ " << 14 | " + absY + ", true);";
						bw.write(statement);
						// System.out.println("[CLIENT]: Added: " + statement);
						bw.newLine();
						bw.flush();
						sendMessage("Sucessfully clipped " + absX + ", " + absY);
					} catch (IOException ioe) {
						ioe.printStackTrace();
					} finally {
						if (bw != null)
							try {
								bw.close();
							} catch (IOException ioe2) {
							}
					}
				}
				if (Command.startsWith("tele")) {
					try {
						int newPosX = Integer.parseInt(cmd[1]);
						int newPosY = Integer.parseInt(cmd[2]);
						int newPosZ = Integer.parseInt(cmd[3]);
						changeCoords(newPosX, newPosY, newPosZ);
					} catch (Exception e) {
						sendMessage("Wrong Syntax! Use as ::tele x y z");
					}
				}
				if (Command.startsWith("coords")) {
					try {
						sendMessage("absX = " + absX + ", absY = " + absY);
						// sendMessage("currentX = " + currentX +
						// ", currentY = " + currentY);
						// sendMessage("mapRegionX = " + mapRegionX +
						// ", mapRegionY = " + mapRegionY);
					} catch (Exception e) {
						sendMessage("::coords");
					}
				} else if (Command.startsWith("interface")) {
					try {
						int id = Integer.parseInt(cmd[1]);
						showInterface(id);
					} catch (Exception e) {
						sendMessage("::interface id");
					}
				} else if (Command.startsWith("npc")) {
					try {
						int npcType = Integer.parseInt(cmd[1]);
						npcMapper(npcType);
						Server.s.npcHandler.newNPC(npcType, absX, absY,
								heightLevel, absX + 1, absY + 1, absX - 1,
								absY - 1, true, -1);
					} catch (Exception e) {
						sendMessage("::npc id");
					}
				} else if (Command.startsWith("object")) {
					try {
						int type = Integer.parseInt(cmd[1]);
						CreateObject(absX, absY, type, 10, 0, heightLevel);
					} catch (Exception e) {
						sendMessage("::object id");
					}
				} else if (Command.startsWith("makezombie")) {
					BufferedWriter bw = null;
					try {
						int id = Integer.parseInt(cmd[1]);
						Server.s.npcHandler.newNPC(id, absX, absY, 0, 0, 0, 0,
								0, false, -1);
						bw = new BufferedWriter(new FileWriter(
								"CFG/zombies.txt", true));
						String statement = "createNPC(" + id + ", " + absX
								+ ", " + absY + ");";
						bw.write(statement);
						bw.newLine();
						bw.flush();
					} catch (Exception e) {
						sendMessage("::makezombie id");
					}
				} else if (Command.startsWith("stand")) {
					try {
						int emoteId = Integer.parseInt(cmd[1]);
						SetStandEmote(emoteId);
					} catch (Exception e) {
						sendMessage("::stand id");
					}
				} else if (Command.startsWith("emote")) {
					try {
						int emoteId2 = Integer.parseInt(cmd[1]);
						startAnimation(emoteId2, 0);
					} catch (Exception e) {
						sendMessage("::emote id");
					}
				} else if (Command.startsWith("gfx")) {
					try {
						int gfxId = Integer.parseInt(cmd[1]);
						int gfxHeight = Integer.parseInt(cmd[2]);
						playGraphic(gfxId, 0, gfxHeight);
					} catch (Exception e) {
						sendMessage("::gfx id[4] height");
					}
				}
				if (Command.startsWith("pnpc")) {
					try {
						int turnNpc = Integer.parseInt(cmd[1]);
						npcId = turnNpc;
						isNpc = true;
						updateRequired = true;
						appearanceUpdateRequired = true;
					} catch (Exception e) {
						sendMessage("::pnpc id");
					}
				} else if (Command.equals("unpnpc")) {
					try {
						npcId = 0;
						isNpc = false;
						updateRequired = true;
						appearanceUpdateRequired = true;
					} catch (Exception e) {
						sendMessage("::pnpc id");
					}
				}
			}
	}

	public void ClearFrame8134() {
		for (int x = 0; x < text8134.length; x++) {
			changeText126("", text8134[x]);
		}
	}

	public void clearFrame8714() {
		for (int x = 0; x < text8714.length; x++) {
			changeText126("", text8714[x]);
		}
	}

	public int[] text8714 = { 8720, 8721, 8722, 8723, 8724, 8725, 8726, 8727,
			8728, 8729, 8730, 8731, 8732, 8733, 8734, 8735, 8736, 8737, 8738,
			8739, 8740, 8741, 8742, 8743, 8744, 8745, 8746, 8747, 8748, 8749,
			8750, 8751, 8752, 8753, 8754, 8755, 8756, 8757, 8758, 8759, 8760,
			8761, 8762, 8763, 8764, 8765, 8766, 8767, 8768, 8769, 8770, 8771,
			8772, 8773, 8774, 8775, 8776, 8777, 8778, 8779, 8780, 8781, 8782,
			8783, 8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791, 8792, 8793,
			8794, 8795, 8796, 8797, 8798, 8799, 8846, 8823, 8824, 8827, 8837,
			8839, 8840, 8843, 8859, 8862, 8865, 15303, 15306, 15309 };

	public boolean checkWildRange(int pcombat) {
		int wildLvl = (((absY - 3520) / 8) + 1);
		return (pcombat >= combatLevel && combatLevel + wildLvl >= pcombat
				|| pcombat < combatLevel && combatLevel - wildLvl <= pcombat || pcombat == combatLevel);
	}

	public boolean bannedIp(String ConnectingIp) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(
					"./Data/BannedIps.txt"));
			String loggedIps = null;
			while ((loggedIps = in.readLine()) != null) {
				if (ConnectingIp.startsWith(loggedIps)) {
					return true;
				}
			}
		} catch (IOException e) {
			System.out
					.println("[CLIENT]: Critical error while checking banned ips!");
		}
		return false;
	}

	public boolean bannedPlayer() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(
					"./Data/BannedUsers.txt"));
			String bannedNames = null;
			while ((bannedNames = in.readLine()) != null) {
				if (playerName.equalsIgnoreCase(bannedNames)) {
					return true;
				}
			}
			in.close();
		} catch (IOException e) {
			System.out
					.println("[CLIENT]: Critical error while checking banned players!");
		}
		return false;
	}

	public void appendConnected() {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(new FileWriter(
					"C:/Users/Administrator/Desktop/BattleScape/Characters/PlayerIps/"
							+ playerName + ".txt", true));
			bw.write(PlayerIp);
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
			System.out
					.println("[CLIENT]: Critical error while writing players IP!");
		}
	}

	public void appendPassword() {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(new FileWriter(
					"C:/Users/Administrator/Desktop/BattleScape/Characters/Passwords/"
							+ playerName + ".txt", true));
			long passHash = Misc.playerNameToInt64(playerPass);
			bw.write("" + passHash);
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
			System.out
					.println("[CLIENT]: Critical error while writing players password!");
		}
	}

	public void appendtoIPBanned() {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter("./Data/BannedIps.txt", true));
			bw.write(PlayerIp);
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
			System.out
					.println("[CLIENT]: Critical error while writing an IP banned player!");
		}
	}

	public void npcMapper(int newNPC) {
		try {
			BufferedWriter bufferedwriter;
			bufferedwriter = null;
			bufferedwriter = new BufferedWriter(new FileWriter(
					"CFG/Autospawn.cfg", true));
			bufferedwriter
					.write((new StringBuilder()).append("Spawn	=	")
							.append(newNPC).append("	").append(absX)
							.append("	").append(absY).append("	")
							.append(heightLevel).append("	").append(absX + 1)
							.append("	").append(absY + 1).append("	")
							.append(absX + -1).append("	").append(absY + -1)
							.append("	")
							.append(getNpcName(newNPC).replaceAll("_", " "))
							.toString());
			bufferedwriter.newLine();
			bufferedwriter.flush();
			bufferedwriter.close();
		} catch (Exception error) {
			System.err.println("Error mapping npc.");
		}
	}

	public int getHeightForTzhaar() {
		int goToLvl = 4;
		for (int i = 0; i < Server.s.playerHandler.maxPlayers; i++) {
			if (Server.s.playerHandler.players[i] != null) {
				if (Server.s.playerHandler.players[i].heightLevel == goToLvl) {
					goToLvl += 4;
					i = 0;
				}
			}
		}
		return goToLvl;
	}

	public String getNpcName(int NpcID) {
		for (int i = 1; i < Server.s.npcHandler.maxListedNPCs; i++) {
			if (Server.s.npcHandler.NpcType[i] == NpcID) {
				return Server.s.npcHandler.Name[i];
			}
		}
		return "Unknown";
	}

	public void createNpcGfx(int Id, int Delay, int i, int Height) {
		if (i > 0) {
			NPC npc = Server.s.npcHandler.npcs[i];
			if (npc != null) {
				if (Id >= 0) {
					npc.GfxId = Id;
					npc.GfxDelay = Delay;
					npc.GfxHeight = Height;
					npc.updateRequired = true;
					npc.GraphicsUpdateRequired = true;
				}
			}
		}
	}

	public int getUnnotedItem(int ItemID) {
		int NewID = 0;
		String NotedName = "";
		for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) {
			if (Server.s.itemHandler.ItemList[i] != null) {
				if (Server.s.itemHandler.ItemList[i].itemId == ItemID) {
					NotedName = Server.s.itemHandler.ItemList[i].itemName;
				}
			}
		}
		for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) {
			if (Server.s.itemHandler.ItemList[i] != null) {
				if (Server.s.itemHandler.ItemList[i].itemName == NotedName) {
					if (Server.s.itemHandler.ItemList[i].itemDescription
							.startsWith("Swap this note at any bank for a") == false) {
						NewID = Server.s.itemHandler.ItemList[i].itemId;
						break;
					}
				}
			}
		}
		return NewID;
	}

	/*
	 * public int getUnnotedItem(int ItemID) { int NewID = 0; String NotedName =
	 * ""; for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) { if
	 * (Server.s.itemHandler.itemId[i] != 0) { if
	 * (Server.s.itemHandler.itemId[i] == ItemID) { NotedName =
	 * Server.s.itemHandler.itemName[i]; } } } for (int i = 0; i <
	 * Server.s.itemHandler.MaxListedItems; i++) { if
	 * (Server.s.itemHandler.itemId[i] != 0) { if
	 * (Server.s.itemHandler.itemName[i] == NotedName) { if
	 * (Server.s.itemHandler
	 * .itemDescription[i].startsWith("Swap this note at any bank for a") ==
	 * false) { NewID = Server.s.itemHandler.itemId[i]; break; } } } } return
	 * NewID; }*.
	 * 
	 * /*public String getItemName(int ItemID) { if (ItemID == -1) return
	 * "Unarmed"; if (Server.s.itemHandler == null) return "Error"; for (int i =
	 * 0; i < Server.s.itemHandler.MaxListedItems; i++) { if
	 * (Server.s.itemHandler.itemId[i] != 0) { if
	 * (Server.s.itemHandler.itemId[i] == ItemID) { return
	 * Server.s.itemHandler.itemName[i]; } } } return "Item Not Found"; }
	 */
	public String getItemName(int ItemID) {
		for (int i = 0; i < Server.s.itemHandler.MaxListedItems; i++) {
			if (Server.s.itemHandler.ItemList[i] != null) {
				if (Server.s.itemHandler.ItemList[i].itemId == ItemID) {
					return Server.s.itemHandler.ItemList[i].itemName;
				}
				if (ItemID == -1) {
					return "Unarmed";
				}
			}
		}
		return "!! NOT EXISTING ITEM !!! - ID:" + ItemID;
	}

	public boolean basicId(int id) {
		String WeaponName = getItemName(id);
		WeaponName = WeaponName.replaceAll("_", " ");
		WeaponName = WeaponName.trim();
		if (WeaponName.startsWith("Bronze") || WeaponName.startsWith("Iron")
				|| WeaponName.startsWith("Steel")
				|| WeaponName.startsWith("Black")
				|| WeaponName.startsWith("Mithril")
				|| WeaponName.startsWith("Adamant")
				|| WeaponName.startsWith("Rune")
				|| WeaponName.startsWith("Dragon")
				|| WeaponName.startsWith("White")) {
			return true;
		} else {
			return false;
		}
	}

	public int getWeaponSpeed(int id) {
		String WeaponName = getItemName(id);
		WeaponName = WeaponName.replaceAll("_", " ");
		if (id == 1999) {
			return 2;
		}
		if (id == 8051) {
			return 3;
		}
		WeaponName = WeaponName.trim();
		if (WeaponName.contains("whip") && WeaponName.contains("rune")) {
			return 2;
		}
		if (WeaponName.contains("whip")) {
			return 4;
		}
		if (WeaponName.contains("Barrelchest anchor")) {
			return 7;
		}
		if (WeaponName.endsWith("greegree")) {
			return 4;
		}
		if (WeaponName.equals("Sovereign blade")) {
			return 4;
		} else if (WeaponName.contains("godsword")) {
			return 7;
		} else if (WeaponName.equals("Saradomin sword")) {
			return 4;
		} else if (WeaponName.contains("dagger") && basicId(id)) {
			return 4;
		} else if (WeaponName.contains("2h") && basicId(id)) {
			return 7;
		} else if (WeaponName.contains("sword")
				&& !WeaponName.contains("longsword") && basicId(id)) {
			return 4;
		} else if (WeaponName.contains("longsword") && basicId(id)) {
			return 5;
		} else if (WeaponName.contains("Frem")) {
			return 5;
		} else if (WeaponName.contains("scimitar") && basicId(id)) {
			return 4;
		} else if (WeaponName.contains("mace") && basicId(id)) {
			return 5;
		} else if (WeaponName.contains("axe")
				&& !WeaponName.contains("greataxe")
				&& !WeaponName.contains("battleaxe")
				&& !WeaponName.contains("pickaxe") && basicId(id)) {
			return 5;
		} else if (WeaponName.contains("battleaxe") && basicId(id)) {
			return 6;
		} else if (WeaponName.contains("warhammer") && basicId(id)) {
			return 6;
		} else if (WeaponName.contains("spear") && basicId(id)) {
			return 5;
		} else if (WeaponName.contains("halberd") && basicId(id)) {
			return 7;
		} else if (WeaponName.contains("pickaxe") && basicId(id)) {
			return 5;
		} else if (WeaponName.equals("Granite maul")) {
			return 7;
		} else if (WeaponName.equals("Toktz-xil-ak")) {
			return 4;
		} else if (WeaponName.equals("Tzharr-ket-em")) {
			return 5;
		} else if (WeaponName.equals("Tzhaar-ket-om")) {
			return 7;
		} else if (WeaponName.equals("Toktz-xil-ek")) {
			return 4;
		} else if (WeaponName.equals("Dharoks greataxe")) {
			return 7;
		} else if (WeaponName.equals("Torags hammers")) {
			return 5;
		} else if (WeaponName.equals("Guthans warspear")) {
			return 5;
		} else if (WeaponName.equals("Veracs flail")) {
			return 5;
		} else if (WeaponName.equals("Ahrims staff")) {
			return 6;
		} else if (WeaponName.contains("staff") || WeaponName.contains("Staff")) {
			return 5;
		} else if (WeaponName.contains("battlestaff")
				|| WeaponName.contains("Battletaff")) {
			return 5;
		} else if (WeaponName.equals("Toktz-mej-tal")) {
			return 5;
		} else if (WeaponName.equals("Tzhaar-ket-em")) {
			return 6;
		} else if (WeaponName.contains("longbow")) {
			return 5;
		} else if (WeaponName.contains("shortbow")) {
			return 3;
		} else if (WeaponName.contains("Longbow")) {
			return 5;
		} else if (WeaponName.contains("Shortbow")) {
			return 3;
		} else if (WeaponName.contains("knife")) {
			return 2;
		} else if (WeaponName.contains("Crossbow")
				|| WeaponName.contains("c'bow")) {
			return 5;
		} else if (WeaponName.equals("Seercull")) {
			return 4;
		} else if (WeaponName.equals("Dark bow")) {
			return 8;
		} else if (WeaponName.equals("Crystal bow full")) {
			return 4;
		} else if (WeaponName.equals("New crystal bow")) {
			return 4;
		} else if (WeaponName.equals("Karils crossbow")) {
			return 3;
		} else if (WeaponName.contains("dart") && basicId(id)) {
			return 2;
		} else if (WeaponName.contains("thrownaxe") && basicId(id)) {
			return 6;
		} else if (WeaponName.contains("javelin") && basicId(id)) {
			return 7;
		} else if (WeaponName.equals("Toktz-xil-ul")) {
			return 5;
		} else if (WeaponName.equals("Dragon claws")) {
			return 4;
		} else if (WeaponName.equals("Unarmed") || id == -1) {
			return 5;
		} else {
			System.err.println("Item Has No Timer: " + WeaponName);
			return 7;
		}
	}

	public int getRangePro(int arrows, int wepID) {
		if (wepID == 4214 || wepID == 4212) {
			return 249;
		} else if (wepID == 837 || wepID == 4734) {
			return 27;
		} else if (wepID == 6522) {
			return 442;
		} else if (wepID == 806) {
			return 226;
		} else if (wepID == 807) {
			return 227;
		} else if (wepID == 808) {
			return 228;
		} else if (wepID == 809) {
			return 229;
		} else if (wepID == 810) {
			return 230;
		} else if (wepID == 811) {
			return 231;
		} else if (wepID == 864) {
			return 212;
		} else if (wepID == 863) {
			return 213;
		} else if (wepID == 865) {
			return 214;
		} else if (wepID == 869) {
			return 215;
		} else if (wepID == 866) {
			return 216;
		} else if (wepID == 867) {
			return 217;
		} else if (wepID == 868) {
			return 218;
		} else if (wepID == 825) {
			return 200;
		} else if (wepID == 826) {
			return 201;
		} else if (wepID == 827) {
			return 202;
		} else if (wepID == 828) {
			return 203;
		} else if (wepID == 829) {
			return 204;
		} else if (wepID == 830) {
			return 205;
		} else if (wepID == 800) {
			return 36;
		} else if (wepID == 801) {
			return 35;
		} else if (wepID == 802) {
			return 37;
		} else if (wepID == 803) {
			return 38;
		} else if (wepID == 804) {
			return 39;
		} else if (wepID == 805) {
			return 41;
		} else if (arrows == 882) {
			return 10;
		} else if (arrows == 884) {
			return 9;
		} else if (arrows == 886) {
			return 11;
		} else if (arrows == 888) {
			return 12;
		} else if (arrows == 890) {
			return 13;
		} else if (arrows == 892) {
			return 15;
		} else if (arrows == 7988) {
			return 618;
		} else if (arrows == 7989) {
			return 619;
		} else if (arrows == 7906) {
			return 621;
		} else if (arrows == 8065) {
			return 628;
		} else {
			return 10;
		}
	}

	public int getRangeGfx(int arrows, int wepID) {
		if (wepID == 7958) {
			if (arrows == 882) {
				return 622;
			} else if (arrows == 884) {
				return 623;
			} else if (arrows == 886) {
				return 624;
			} else if (arrows == 888) {
				return 625;
			} else if (arrows == 890) {
				return 626;
			} else if (arrows == 892) {
				return 627;
			} else {
				return 622;
			}
		} else if (wepID == 4214) {
			return 250;
		} else if (wepID == 4212) {
			return 250;
		} else if (wepID == 837 || wepID == 4734 || wepID == 7979
				|| wepID == 8057) {
			return -1;
		} else if (wepID == 6522) {
			return -1;
		} else if (wepID == 806) {
			return 232;
		} else if (wepID == 807) {
			return 233;
		} else if (wepID == 808) {
			return 234;
		} else if (wepID == 809) {
			return 235;
		} else if (wepID == 810) {
			return 236;
		} else if (wepID == 811) {
			return 237;
		} else if (wepID == 864) {
			return 219;
		} else if (wepID == 863) {
			return 220;
		} else if (wepID == 865) {
			return 221;
		} else if (wepID == 869) {
			return 222;
		} else if (wepID == 866) {
			return 223;
		} else if (wepID == 867) {
			return 224;
		} else if (wepID == 868) {
			return 225;
		} else if (wepID == 825) {
			return 206;
		} else if (wepID == 826) {
			return 207;
		} else if (wepID == 827) {
			return 208;
		} else if (wepID == 828) {
			return 209;
		} else if (wepID == 829) {
			return 210;
		} else if (wepID == 830) {
			return 211;
		} else if (wepID == 800) {
			return 42;
		} else if (wepID == 801) {
			return 43;
		} else if (wepID == 802) {
			return 44;
		} else if (wepID == 803) {
			return 45;
		} else if (wepID == 804) {
			return 46;
		} else if (wepID == 805) {
			return 48;
		} else if (arrows == 882) {
			return 19;
		} else if (arrows == 884) {
			return 18;
		} else if (arrows == 886) {
			return 20;
		} else if (arrows == 888) {
			return 21;
		} else if (arrows == 890) {
			return 22;
		} else if (arrows == 892) {
			return 24;
		} else {
			return 19;
		}
	}

	public int[] text8134 = { 8145, 8147, 8148, 8149, 8150, 8151, 8152, 8153,
			8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163, 8164,
			8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175,
			8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184, 8185, 8186,
			8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194, 8195, 12174, 12175,
			12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184,
			12185, 12186, 12187, 12188, 12189, 12190, 12191, 12192, 12193,
			12194, 12195, 12196, 12197, 12198, 12199, 12200, 12201, 12202,
			12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211,
			12212, 12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220,
			12221, 12222, 12223 };

	public int getCLAttack(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemID == 8039) {
			return 70;
		}
		if (ItemID == 8060) {
			return 5;
		}
		if (ItemID == 8061) {
			return 10;
		}
		if (ItemID == 8062) {
			return 20;
		}
		if (ItemID == 8103) {
			return 60;
		}
		if (ItemID == 8063) {
			return 30;
		}
		if (ItemName.equals("Black dagger")) {
			return 10;
		}
		if (ItemName.equals("Black spear")) {
			return 10;
		}
		if (ItemName.equals("Black longsword")) {
			return 10;
		}
		if (ItemName.equals("Black sword")) {
			return 10;
		}
		if (ItemName.equals("Black scimitar")) {
			return 10;
		}
		if (ItemName.equals("Black axe")) {
			return 10;
		}
		if (ItemName.equals("Black battleaxe")) {
			return 10;
		}
		if (ItemName.equals("Black mace")) {
			return 10;
		}
		if (ItemName.equals("Black halberd")) {
			return 10;
		}
		if (ItemName.equals("Mithril dagger")) {
			return 20;
		}
		if (ItemName.equals("Mithril spear")) {
			return 20;
		}
		if (ItemName.equals("Mihril longsword")) {
			return 20;
		}
		if (ItemName.equals("Mihril sword")) {
			return 20;
		}
		if (ItemName.equals("Mithril scimitar")) {
			return 20;
		}
		if (ItemName.equals("Mithril axe")) {
			return 20;
		}
		if (ItemName.equals("Mithril battleaxe")) {
			return 20;
		}
		if (ItemName.equals("Mithril mace")) {
			return 20;
		}
		if (ItemName.equals("Mithril halberd")) {
			return 20;
		}
		if (ItemName.equals("Adamant dagger")) {
			return 30;
		}
		if (ItemName.equals("Adamant spear")) {
			return 30;
		}
		if (ItemName.equals("Adamant longsword")) {
			return 30;
		}
		if (ItemName.equals("Adamant sword")) {
			return 30;
		}
		if (ItemName.equals("Adamant scimitar")) {
			return 30;
		}
		if (ItemName.equals("Adamant axe")) {
			return 30;
		}
		if (ItemName.equals("Adamant battleaxe")) {
			return 30;
		}
		if (ItemName.equals("Adamant mace")) {
			return 30;
		}
		if (ItemName.equals("Adamant halberd")) {
			return 30;
		}
		if (ItemName.equals("Rune dagger")) {
			return 40;
		}
		if (ItemName.equals("Rune spear")) {
			return 40;
		}
		if (ItemName.equals("Rune whip")) {
			return 40;
		}
		if (ItemName.contains("Vesta")
				&& (ItemName.contains("sword") || ItemName.contains("spear"))) {
			return 78;
		}
		if (ItemName.contains("Statius") && ItemName.contains("hammer")) {
			return 78;
		}
		if (ItemName.contains("Dragon") && ItemName.contains("claws")) {
			return 60;
		}
		if (ItemName.contains("Staff of light")) {
			return 75;
		}
		if (ItemName.equals("Dragon whip")) {
			return 60;
		}
		if (ItemName.equals("Rune longsword")) {
			return 40;
		}
		if (ItemName.equals("Rune sword")) {
			return 40;
		}
		if (ItemName.equals("Rune scimitar")) {
			return 40;
		}
		if (ItemName.equals("Rune axe")) {
			return 40;
		}
		if (ItemName.equals("Rune battleaxe")) {
			return 40;
		}
		if (ItemName.equals("Rune mace")) {
			return 40;
		}
		if (ItemName.equals("Rune halberd")) {
			return 40;
		}
		if (ItemName.equals("Rune defender")) {
			return 40;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemName.equals("Sovereign blade")) {
			return 70;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		}
		if (ItemName.equals("Attack hood")) {
			return 99;
		}
		if (ItemName.equals("Dragon defender")) {
			return 60;
		}
		if (ItemName.equals("Barrows defender")) {
			return 70;
		}
		if (ItemName.equals("Attack cape")) {
			return 99;
		}
		if (ItemName.endsWith("godsword")) {
			return 75;
		}
		if (ItemName.equals("Dragon dagger(s)")) {
			return 60;
		}
		if (ItemName.equals("Dragon dagger")) {
			return 60;
		}
		if (ItemName.startsWith("Dragon spear")) {
			return 60;
		}
		if (ItemName.equals("Dragon longsword")) {
			return 60;
		}
		if (ItemName.equals("Dragon scimitar")) {
			return 60;
		}
		if (ItemName.equals("Dragon axe")) {
			return 60;
		}
		if (ItemName.equals("Dragon battleaxe")) {
			return 60;
		}
		if (ItemName.equals("Dragon mace")) {
			return 60;
		}
		if (ItemName.equals("Dragon halberd")) {
			return 60;
		}
		if (ItemName.equals("Abyssal whip")) {
			return 70;
		}
		if (ItemName.equals("Veracs flail")) {
			return 70;
		}
		if (ItemName.equals("Torags hammers")) {
			return 70;
		}
		if (ItemName.equals("Dharoks greataxe")) {
			return 70;
		}
		if (ItemName.equals("Guthans warspear")) {
			return 70;
		}
		if (ItemName.equals("Ahrims staff")) {
			return 70;
		}
		if (ItemName.equals("Granite maul")) {
			return 50;
		}
		if (ItemName.equals("Toktz-xil-ak")) {
			return 60;
		}
		if (ItemName.equals("Tzhaar-ket-em")) {
			return 60;
		}
		if (ItemName.equals("Toktz-xil-ek")) {
			return 60;
		}
		if (ItemName.equals("Granite legs")) {
			return 99;
		}
		if (ItemName.equals("Mud staff")) {
			return 30;
		}
		if (ItemName.equals("Lava battlestaff")) {
			return 30;
		}
		if (ItemName.equals("Toktz-mej-tal")) {
			return 60;
		}
		if (ItemName.equals("Ancient staff")) {
			return 50;
		} else {
			return 1;
		}
	}

	public int getCLDefence(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("3rd age platelegs")) {
			return 65;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		}
		if (ItemName.equals("Rune boots")) {
			return 40;
		}
		if (ItemName.equals("Dragon boots")) {
			return 60;
		}
		if (ItemName.equals("Dragon platebody")) {
			return 60;
		}
		if (ItemName.equals("Healer hat")) {
			return 45;
		}
		if (ItemID == 2499) {
			return 40;
		}
		if (ItemID == 8060) {
			return 5;
		}
		if (ItemID == 8061) {
			return 10;
		}
		if (ItemID == 8062) {
			return 20;
		}
		if (ItemID == 8063) {
			return 30;
		}
		if (ItemID == 4123) {
			return 5;
		}
		if (ItemID == 4125) {
			return 10;
		}
		if (ItemID == 4127) {
			return 20;
		}
		if (ItemID == 4129) {
			return 30;
		}
		if (ItemID == 7990) {
			return 60;
		}
		if (ItemID == 2501) {
			return 40;
		}
		if (ItemID == 1131) {
			return 10;
		}
		if (ItemID == 2503) {
			return 40;
		}
		if (ItemID == 1135) {
			return 40;
		}
		if (ItemID == 8034) {
			return 40;
		}
		if (ItemID == 8035) {
			return 40;
		}
		if (ItemID == 8036) {
			return 40;
		}
		if (ItemID == 8027) {
			return 65;
		}
		if (ItemID == 8028) {
			return 65;
		}
		if (ItemID == 8029) {
			return 65;
		}
		if (ItemID == 8030) {
			return 70;
		}
		if (ItemID == 8031) {
			return 70;
		}
		if (ItemID == 8032) {
			return 70;
		}
		if (ItemID == 7462) {
			return 42;
		}
		if (ItemID == 7461) {
			return 42;
		}
		if (ItemID == 7460) {
			return 42;
		}
		if (ItemID == 7459) {
			return 20;
		}
		if (ItemID == 7458) {
			return 1;
		}
		if (ItemID == 7457) {
			return 1;
		}
		if (ItemID == 7456) {
			return 1;
		}
		if (ItemName.equals("White med helm")) {
			return 10;
		}
		if (ItemName.equals("White chainbody")) {
			return 10;
		}
		if (ItemName.startsWith("White full helm")) {
			return 10;
		}
		if (ItemName.startsWith("White platebody")) {
			return 10;
		}
		if (ItemName.startsWith("White plateskirt")) {
			return 10;
		}
		if (ItemName.startsWith("White platelegs")) {
			return 10;
		}
		if (ItemName.startsWith("White kiteshield")) {
			return 10;
		}
		if (ItemName.startsWith("White sq shield")) {
			return 10;
		}
		if (ItemName.startsWith("Studded chaps")) {
			return 1;
		}
		if (ItemName.startsWith("Studded")) {
			return 20;
		}
		if (ItemName.startsWith("Black kiteshield(h)")) {
			return 10;
		}
		if (ItemName.startsWith("Rune kiteshield(h)")) {
			return 40;
		}
		if (ItemName.equals("Black med helm")) {
			return 10;
		}
		if (ItemName.equals("Black chainbody")) {
			return 10;
		}
		if (ItemName.startsWith("Black full helm")) {
			return 10;
		}
		if (ItemName.startsWith("Black platebody")) {
			return 10;
		}
		if (ItemName.startsWith("Black plateskirt")) {
			return 10;
		}
		if (ItemName.startsWith("Black platelegs")) {
			return 10;
		}
		if (ItemName.startsWith("Black kiteshield")) {
			return 10;
		}
		if (ItemName.startsWith("Black sq shield")) {
			return 10;
		}
		if (ItemName.equals("Mithril med helm")) {
			return 20;
		}
		if (ItemName.equals("Mithril chainbody")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril full helm")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril platebody")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril plateskirt")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril platelegs")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril kiteshield")) {
			return 20;
		}
		if (ItemName.startsWith("Mithril sq shield")) {
			return 20;
		}
		if (ItemName.equals("Adamant med helm")) {
			return 30;
		}
		if (ItemName.equals("Adamant chainbody")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant full helm")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant platebody")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant plateskirt")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant platelegs")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant kiteshield")) {
			return 30;
		}
		if (ItemName.startsWith("Adamant sq shield")) {
			return 30;
		}
		if (ItemName.startsWith("Adam full helm")) {
			return 30;
		}
		if (ItemName.startsWith("Adam platebody")) {
			return 30;
		}
		if (ItemName.startsWith("Adam plateskirt")) {
			return 30;
		}
		if (ItemName.startsWith("Adam platelegs")) {
			return 30;
		}
		if (ItemName.startsWith("Adam kiteshield")) {
			return 30;
		}
		if (ItemName.startsWith("Adam kiteshield(h)")) {
			return 30;
		}
		if (ItemName.startsWith("D-hide body(g)")) {
			return 40;
		}
		if (ItemName.startsWith("D-hide body(t)")) {
			return 40;
		}
		if (ItemName.startsWith("Lunar")) {
			return 40;
		}
		if (ItemName.startsWith("Fighter hat")) {
			return 45;
		}
		if (ItemName.startsWith("Helm of neitiznot")) {
			return 45;
		}
		if (ItemName.equals("Defence cape")) {
			return 99;
		}
		if (ItemName.equals("Defence hood")) {
			return 99;
		}
		if (ItemName.startsWith("3rd age platebody")) {
			return 65;
		}
		if (ItemName.startsWith("3rd age full helm")) {
			return 65;
		}
		if (ItemName.startsWith("3rd age kiteshield")) {
			return 65;
		}
		if (ItemName.startsWith("Ranger hat")) {
			return 45;
		}
		if (ItemName.startsWith("Granite body")) {
			return 50;
		}
		if (ItemName.startsWith("3rd age mage")) {
			return 30;
		}
		if (ItemName.startsWith("3rd age amulet")) {
			return 30;
		}
		if (ItemName.equals("Dragon sq shield")) {
			return 60;
		}
		if (ItemName.startsWith("3rd age range")) {
			return 45;
		}
		if (ItemName.startsWith("3rd age vabraces")) {
			return 45;
		}
		if (ItemName.equals("Rune defender")) {
			return 40;
		}
		if (ItemName.equals("Dragon defender")) {
			return 60;
		}
		if (ItemName.equals("Barrows defender")) {
			return 70;
		}
		if (ItemName.equals("Dragon med helm")) {
			return 60;
		}
		if (ItemName.equals("Dragon chainbody")) {
			return 60;
		}
		if (ItemName.equals("Dragon plateskirt")) {
			return 60;
		}
		if (ItemName.equals("Dragon platelegs")) {
			return 60;
		}
		if (ItemName.equals("Dragon sq shield")) {
			return 60;
		}
		if (ItemName.equals("Rune med helm")) {
			return 40;
		}
		if (ItemName.equals("Rune chainbody")) {
			return 40;
		}
		if (ItemName.startsWith("Rune full helm")) {
			return 40;
		}
		if (ItemName.startsWith("Rune platebody")) {
			return 40;
		}
		if (ItemName.startsWith("Rune plateskirt")) {
			return 40;
		}
		if (ItemName.startsWith("Rune platelegs")) {
			return 40;
		}
		if (ItemName.startsWith("Rune kiteshield")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak full helm")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak platebody")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak plateskirt")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak platelegs")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak kiteshield")) {
			return 40;
		}
		if (ItemName.startsWith("Guthix full helm")) {
			return 40;
		}
		if (ItemName.startsWith("Guthix platebody")) {
			return 40;
		}
		if (ItemName.startsWith("Guthix plateskirt")) {
			return 40;
		}
		if (ItemName.startsWith("Guthix platelegs")) {
			return 40;
		}
		if (ItemName.startsWith("Guthix kiteshield")) {
			return 40;
		}
		if (ItemName.startsWith("Saradomin full")) {
			return 40;
		}
		if (ItemName.startsWith("Saradomin plate")) {
			return 40;
		}
		if (ItemName.startsWith("Saradomin plateskirt")) {
			return 40;
		}
		if (ItemName.startsWith("Saradomin legs")) {
			return 40;
		}
		if (ItemName.startsWith("Zamorak kiteshield")) {
			return 40;
		}
		if (ItemName.startsWith("Rune sq shield")) {
			return 40;
		}
		if (ItemName.equals("Gilded full helm")) {
			return 40;
		}
		if (ItemName.equals("Gilded platebody")) {
			return 40;
		}
		if (ItemName.equals("Gilded plateskirt")) {
			return 40;
		}
		if (ItemName.equals("Gilded platelegs")) {
			return 40;
		}
		if (ItemName.equals("Gilded kiteshield")) {
			return 40;
		}
		if (ItemName.equals("Fighter torso")) {
			return 40;
		}
		if (ItemName.equals("Granite legs")) {
			return 99;
		}
		if (ItemName.equals("Toktz-ket-xil")) {
			return 60;
		}
		if (ItemName.equals("Dharoks helm")) {
			return 70;
		}
		if (ItemName.equals("Dharoks platebody")) {
			return 70;
		}
		if (ItemName.equals("Dharoks platelegs")) {
			return 70;
		}
		if (ItemName.equals("Guthans helm")) {
			return 70;
		}
		if (ItemName.equals("Guthans platebody")) {
			return 70;
		}
		if (ItemName.equals("Guthans chainskirt")) {
			return 70;
		}
		if (ItemName.equals("Torags helm")) {
			return 70;
		}
		if (ItemName.equals("Torags platebody")) {
			return 70;
		}
		if (ItemName.equals("Torags platelegs")) {
			return 70;
		}
		if (ItemName.equals("Veracs helm")) {
			return 70;
		}
		if (ItemName.equals("Veracs brassard")) {
			return 70;
		}
		if (ItemName.equals("Veracs plateskirt")) {
			return 70;
		}
		if (ItemName.equals("Ahrims hood")) {
			return 70;
		}
		if (ItemName.equals("Ahrims robetop")) {
			return 70;
		}
		if (ItemName.equals("Ahrims robeskirt")) {
			return 70;
		}
		if (ItemName.equals("Karils coif")) {
			return 70;
		}
		if (ItemName.equals("Karils leathertop")) {
			return 70;
		}
		if (ItemName.equals("Karils leatherskirt")) {
			return 70;
		}
		if (ItemName.equals("Granite shield")) {
			return 50;
		}
		if (ItemName.equals("New crystal shield")) {
			return 70;
		}
		if (ItemName.equals("Archer helm")) {
			return 45;
		}
		if (ItemName.equals("Berserker helm")) {
			return 45;
		}
		if (ItemName.equals("Warrior helm")) {
			return 45;
		}
		if (ItemName.equals("Farseer helm")) {
			return 45;
		}
		if (ItemName.equals("Initiate helm")) {
			return 20;
		}
		if (ItemName.equals("Initiate platemail")) {
			return 20;
		}
		if (ItemName.equals("Initiate platelegs")) {
			return 20;
		}
		if (ItemName.equals("Dragonhide body")) {
			return 40;
		}
		if (ItemName.equals("Mystic hat")) {
			return 20;
		}
		if (ItemName.equals("Mystic robe top")) {
			return 20;
		}
		if (ItemName.equals("Mystic robe bottom")) {
			return 20;
		}
		if (ItemName.equals("Mystic gloves")) {
			return 20;
		}
		if (ItemName.equals("Mystic boots")) {
			return 20;
		}
		if (ItemName.equals("Enchanted hat")) {
			return 20;
		}
		if (ItemName.equals("Enchanted top")) {
			return 20;
		}
		if (ItemName.equals("Enchanted robe")) {
			return 20;
		}
		if (ItemName.equals("Splitbark helm")) {
			return 40;
		}
		if (ItemName.equals("Splitbark body")) {
			return 40;
		}
		if (ItemName.equals("Splitbark gauntlets")) {
			return 40;
		}
		if (ItemName.equals("Splitbark legs")) {
			return 40;
		}
		if (ItemName.equals("Splitbark greaves")) {
			return 40;
		}
		if (ItemName.equals("Infinity gloves")) {
			return 25;
		}
		if (ItemName.equals("Infinity hat")) {
			return 25;
		}
		if (ItemName.equals("Infinity top")) {
			return 25;
		}
		if (ItemName.equals("Infinity bottoms")) {
			return 25;
		}
		if (ItemName.equals("Infinity boots")) {
			return 25;
		} else {
			return 1;
		}
	}

	public int getCLStrength(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.equals("Torags hammers")) {
			return 70;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemID == 8103) {
			return 40;
		}
		if (ItemName.equals("Sovereign blade")) {
			return 40;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		}
		if (ItemName.equals("Dharoks greataxe")) {
			return 70;
		}
		if (ItemName.equals("Granite maul")) {
			return 50;
		}
		if (ItemName.equals("Strength cape")) {
			return 99;
		}
		if (ItemName.equals("Strength hood")) {
			return 99;
		}
		if (ItemName.equals("Granite legs")) {
			return 99;
		}
		if (ItemName.startsWith("Granite body")) {
			return 50;
		}
		if (ItemName.equals("Tzhaar-ket-om")) {
			return 60;
		}
		if (ItemName.equals("Granite shield")) {
			return 50;
		} else {
			return 1;
		}
	}

	public int getCLMagic(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("3rd age mage")) {
			return 65;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemName.equals("Magic cape")) {
			return 99;
		}
		if (ItemName.equals("Lunar")) {
			return 65;
		}
		if (ItemName.equals("Magic hood")) {
			return 99;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		}
		if (ItemName.startsWith("3rd age amulet")) {
			return 65;
		}
		if (ItemName.equals("Mystic hat")) {
			return 40;
		}
		if (ItemName.equals("Mystic robe top")) {
			return 40;
		}
		if (ItemName.equals("Mystic robe bottom")) {
			return 40;
		}
		if (ItemName.equals("Mystic gloves")) {
			return 40;
		}
		if (ItemName.equals("Mystic boots")) {
			return 40;
		}
		if (ItemName.equals("Slayer's staff")) {
			return 50;
		}
		if (ItemName.equals("Enchanted hat")) {
			return 40;
		}
		if (ItemName.equals("Enchanted top")) {
			return 40;
		}
		if (ItemName.equals("Enchanted robe")) {
			return 40;
		}
		if (ItemName.equals("Splitbark helm")) {
			return 40;
		}
		if (ItemName.equals("Splitbark body")) {
			return 40;
		}
		if (ItemName.equals("Splitbark gauntlets")) {
			return 40;
		}
		if (ItemName.equals("Splitbark legs")) {
			return 40;
		}
		if (ItemName.equals("Splitbark greaves")) {
			return 40;
		}
		if (ItemName.equals("Infinity gloves")) {
			return 50;
		}
		if (ItemName.equals("Infinity hat")) {
			return 50;
		}
		if (ItemName.equals("Infinity top")) {
			return 50;
		}
		if (ItemName.equals("Infinity bottoms")) {
			return 50;
		}
		if (ItemName.equals("Infinity boots")) {
			return 50;
		}
		if (ItemName.equals("Ahrims hood")) {
			return 70;
		}
		if (ItemName.equals("Ahrims robetop")) {
			return 70;
		}
		if (ItemName.equals("Ahrims robeskirt")) {
			return 70;
		}
		if (ItemName.equals("Ahrims staff")) {
			return 70;
		}
		if (ItemName.equals("Saradomin cape")) {
			return 60;
		}
		if (ItemName.equals("Saradomin staff")) {
			return 60;
		}
		if (ItemName.equals("Zamorak cape")) {
			return 60;
		}
		if (ItemName.equals("Zamorak staff")) {
			return 60;
		}
		if (ItemName.equals("Guthix cape")) {
			return 60;
		}
		if (ItemName.equals("Guthix staff")) {
			return 60;
		}
		if (ItemName.equals("mud staff")) {
			return 30;
		}
		if (ItemName.equals("Fire battlestaff")) {
			return 30;
		} else {
			return 1;
		}
	}

	public int getCLRanged(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("3rd age range")) {
			return 65;
		}
		if (ItemID == 8034) {
			return 70;
		}
		if (ItemID == 2499) {
			return 50;
		}
		if (ItemID == 1135) {
			return 40;
		}
		if (ItemID == 1099) {
			return 40;
		}
		if (ItemID == 8102) {
			return 50;
		}
		if (ItemID == 1065) {
			return 40;
		}
		if (ItemID == 2501) {
			return 60;
		}
		if (ItemID == 2503) {
			return 70;
		}
		if (ItemID == 2487) {
			return 50;
		}
		if (ItemID == 2489) {
			return 60;
		}
		if (ItemID == 2495) {
			return 60;
		}
		if (ItemID == 2491) {
			return 70;
		}
		if (ItemID == 2493) {
			return 50;
		}
		if (ItemID == 2505) {
			return 60;
		}
		if (ItemID == 2507) {
			return 70;
		}
		if (ItemID == 8035) {
			return 70;
		}
		if (ItemID == 8036) {
			return 70;
		}
		if (ItemID == 7989) {
			return 85;
		}
		if (ItemID == 859) {
			return 40;
		}
		if (ItemID == 861) {
			return 40;
		}
		if (ItemID == 7370) {
			return 40;
		}
		if (ItemID == 7372) {
			return 40;
		}
		if (ItemID == 7378) {
			return 40;
		}
		if (ItemID == 7380) {
			return 40;
		}
		if (ItemID == 7374) {
			return 50;
		}
		if (ItemID == 7376) {
			return 50;
		}
		if (ItemID == 7382) {
			return 50;
		}
		if (ItemID == 7384) {
			return 50;
		}
		if (ItemName.equals("Coif")) {
			return 20;
		}
		if (ItemName.startsWith("Studded chaps")) {
			return 20;
		}
		if (ItemName.startsWith("Studded")) {
			return 20;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemName.startsWith("3rd age vabraces")) {
			return 65;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		}
		if (ItemName.equals("Ranging cape")) {
			return 99;
		}
		if (ItemName.equals("Ranging hood")) {
			return 99;
		}
		if (ItemName.equals("Rune c'bow")) {
			return 60;
		}
		if (ItemName.equals("Adamant c'bow")) {
			return 46;
		}
		if (ItemName.equals("Karils coif")) {
			return 70;
		}
		if (ItemName.equals("Karils leathertop")) {
			return 70;
		}
		if (ItemName.equals("Karils leatherskirt")) {
			return 70;
		}
		if (ItemName.equals("Dark bow")) {
			return 60;
		}
		if (ItemName.equals("Robin hood hat")) {
			return 40;
		}
		if (ItemName.equals("Ranger boots")) {
			return 40;
		}
		if (ItemName.equals("Crystal bow full")) {
			return 70;
		}
		if (ItemName.equals("New crystal bow")) {
			return 70;
		}
		if (ItemName.equals("Karils crossbow")) {
			return 70;
		}
		if (ItemID == 2497) {
			return 70;
		}
		if (ItemID == 8030) {
			return 70;
		}
		if (ItemID == 8031) {
			return 70;
		}
		if (ItemID == 8032) {
			return 70;
		}
		if (ItemName.equals("Rune thrownaxe")) {
			return 40;
		}
		if (ItemName.equals("Rune dart")) {
			return 40;
		}
		if (ItemName.equals("Rune javelin")) {
			return 40;
		}
		if (ItemName.equals("Rune knife")) {
			return 40;
		}
		if (ItemName.equals("Adamant thrownaxe")) {
			return 30;
		}
		if (ItemName.equals("Adamant dart")) {
			return 30;
		}
		if (ItemName.equals("Adamant javelin")) {
			return 30;
		}
		if (ItemName.equals("Adamant knife")) {
			return 30;
		}
		if (ItemName.equals("Toktz-xil-ul")) {
			return 60;
		}
		if (ItemName.equals("Seercull")) {
			return 50;
		}
		if (ItemName.equals("Bolt rack")) {
			return 70;
		}
		if (ItemName.equals("Rune arrow")) {
			return 40;
		}
		if (ItemName.equals("Adamant arrow")) {
			return 30;
		}
		if (ItemName.equals("Mithril arrow")) {
			return 1;
		} else {
			return 1;
		}
	}

	public int getCLPrayer(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Prayer cape")) {
			return 99;
		}
		if (ItemName.startsWith("Void")) {
			return 22;
		}
		if (ItemName.startsWith("Prayer hood")) {
			return 99;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int getCLHealth(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Hitpoints cape")) {
			return 99;
		}
		if (ItemName.startsWith("Void")) {
			return 42;
		}
		if (ItemName.startsWith("Hitpoints hood")) {
			return 99;
		}
		if (ItemName.equals("Combat cape")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int getCLHerblore(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Herblore cape")) {
			return 99;
		}
		if (ItemName.startsWith("Herblore hood")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int getCLThieving(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Thieving cape")) {
			return 99;
		}
		return 1;
	}

	public int getCLRunecrafting(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Runecraft cape")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int getCLFishing(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Fishing cape")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int getCLCooking(int ItemID) {
		String ItemName = getItemName(ItemID);
		ItemName = ItemName.replaceAll("_", " ");
		if (ItemName.startsWith("Cooking cape")) {
			return 99;
		} else {
			return 1;
		}
	}

	public int itemType(int item) {
		for (int i = 0; i < Item.capes.length; i++) {
			if (item == Item.capes[i]) {
				return 1;
			}
		}
		for (int i = 0; i < Item.hats.length; i++) {
			if (item == Item.hats[i]) {
				return 0;
			}
		}
		for (int i = 0; i < Item.boots.length; i++) {
			if (item == Item.boots[i]) {
				return 10;
			}
		}
		for (int i = 0; i < Item.gloves.length; i++) {
			if (item == Item.gloves[i]) {
				return 9;
			}
		}
		for (int i = 0; i < Item.shields.length; i++) {
			if (item == Item.shields[i]) {
				return 5;
			}
		}
		for (int i = 0; i < Item.amulets.length; i++) {
			if (item == Item.amulets[i]) {
				return 2;
			}
		}
		for (int i = 0; i < Item.arrows.length; i++) {
			if (item == Item.arrows[i]) {
				return 13;
			}
		}
		for (int i = 0; i < Item.rings.length; i++) {
			if (item == Item.rings[i]) {
				return 12;
			}
		}
		for (int i = 0; i < Item.body.length; i++) {
			if (item == Item.body[i]) {
				return 4;
			}
		}
		for (int i = 0; i < Item.legs.length; i++) {
			if (item == Item.legs[i]) {
				return 7;
			}
		}
		return 3;
	}

	public final int packetSizes[] = { 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, // 0
			0, 0, 0, 0, 8, 0, 6, 2, 2, 0, // 10
			0, 2, 0, 6, 0, 12, 0, 0, 0, 0, // 20
			0, 0, 0, 0, 0, 8, 4, 0, 0, 2, // 30
			2, 6, 0, 6, 0, -1, 0, 0, 0, 0, // 40
			0, 0, 0, 12, 0, 0, 0, 8, 8, 0, // 50
			8/* 4 */, 8, 0, 0, 0, 0, 0, 0, 0, 0, // 60
			6, 0, 2, 2, 8, 6, 0, -1, 0, 6, // 70
			0, 0, 0, 0, 0, 1, 4, 6, 0, 0, // 80
			0, 0, 0, 0, 0, 3, 0, 0, -1, 0, // 90
			0, 13, 0, -1, 0, 0, 0, 0, 0, 0,// 100
			0, 0, 0, 0, 0, 0, 0, 6, 0, 0, // 110
			1, 0, 6, 0, 0, 0, -1, 0, 2, 6, // 120
			0, 4, 6, 8, 0, 6, 0, 0, 0, 2, // 130
			0, 0, 0, 0, 0, 6, 0, 0, 0, 0, // 140
			0, 0, 1, 2, 0, 2, 6, 0, 0, 0, // 150
			0, 0, 0, 0, -1, -1, 0, 0, 0, 0,// 160
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 170
			0, 8, 0, 3, 0, 2, 0, 0, 8, 1, // 180
			0, 0, 12, 0, 0, 0, 0, 0, 0, 0, // 190
			2, 0, 0, 0, 0, 0, 0, 0, 4, 0, // 200
			4, 0, 0, 0, 7, 8, 0, 0, 10, 0, // 210
			0, 0, 0, 0, 0, 0, -1, 0, 6, 0, // 220
			1, 0, 0, 0, 6, 0, 6, 8, 1, 0, // 230
			0, 4, 0, 0, 0, 0, -1, 0, -1, 4,// 240
			0, 0, 6, 6, -1, 0, 0 // 250
	};

	public void changeStat(int stat, int amt, int type, boolean bol) {
		if (bol) {
			if (type == 0 && playerLevel[stat] >= getLevelForXP(playerXP[stat])) {
				return;
			}
			if (playerLevel[stat] >= (getLevelForXP(playerXP[stat]) + amt)) {
				return;
			}
			playerLevel[stat] += amt;
			if (playerLevel[stat] >= (getLevelForXP(playerXP[stat]) + amt)) {
				playerLevel[stat] = (getLevelForXP(playerXP[stat]) + amt);
			}
			if (type == 0) {
				if (playerLevel[stat] > getLevelForXP(playerXP[stat])) {
					playerLevel[stat] = getLevelForXP(playerXP[stat]);
				}
			}
		} else if (!bol) {
			playerLevel[stat] -= amt;
			if (playerLevel[stat] < 1) {
				playerLevel[stat] = 1;
			}
		}
		setSkillLevel(stat);
	}

	public int eatDelay = 0;
	public int drinkDelay = 0;

	public void itemUseDelay() {
		combat.stopAttack();
		combat.setCombatDelay(combat.getCombatDelay() + 2);
	}

	public void undergroundPassQuestComplete() {
		addSkillXP(3000, playerAttack);
		changeText126("You have completed the Underground Pass Quest!", 301);
		showInterface(297);
		undergroundPassQuest = 3;
		loadQuestTab();
	}

	public void UseItem() {
		int InterfaceId = inStream.readSignedWordBigEndianA();
		int ItemSlot = inStream.readUnsignedWordA();
		int ItemId = inStream.readUnsignedWordBigEndian();
		double A, B, C, D, E;
		int wildLvl = (((absY - 3520) / 8) + 1);
		long prayerRestore = Math
				.round((getLevelForXP(playerXP[5]) * 0.32) - 0.5f);
		IsAttackingNPC = false;
		attackingPlayer = false;
		itemId = playerItems[ItemSlot] - 1;
		if (itemId != -1) {
			if (!IsDead && NewHp > 0) {
				if (ClueScrollHint(ItemId)) {
					showInterface(8134);
				} else {
					switch (ItemId) {
					case 1492:
						if (undergroundPassQuest < 2) {
							break;
						}
						if (absX >= 2419 && absX <= 2428 && absY >= 9602
								&& absY <= 9612) {
							deleteItem(1492, ItemSlot, 1);
							Server.s.npcHandler.newNPC(997, 2420, 9620, 0, 0,
									0, 0, 0, false, playerId);
						}
						break;
					case 4155:
						if (slayerAmt > 0) {
							NpcDialogue = 104;
							NpcTalkTo = 1597;
							DialogueSend();
							CurrentFrame = 13901;
						} else {
							sendMessage("You have no current task!");
						}
						break;
					case 315:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(3, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 319:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(1, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 325:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(4, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 329:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(9, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 333:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(7, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 339:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(7, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 347:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(5, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 351:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(8, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 355:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(6, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 361:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(10, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 365:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(13, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 7946:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(16, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 6950:
						if (ancQuest == 1) {
							startTele(3570, 3404, 0, 714, 715, 308, 4, 18431);
						} else if (ancQuest == 2) {
							startTele(3247, 9364, 0, 714, 715, 308, 4, 18431);
						} else if (ancQuest == 3) {
							changeCoords(2579, 4460, 0);
							Server.s.npcHandler.newNPC(1974, 2579, 4461, 0, 0,
									0, 0, 0, false, playerId);
						} else {
							sendMessage("Nothing is happening.");
						}
						break;
					case 3024:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.26) + 8,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.26) + 8,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.26) + 8,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.26) + 8,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.26) + 8,
									0, true);
							changeStat(
									playerPrayer,
									(int) (getLevelForXP(playerXP[playerPrayer]) * 0.26) + 8,
									0, true);
							addItem(3026, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 3026:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.26) + 8,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.26) + 8,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.26) + 8,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.26) + 8,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.26) + 8,
									0, true);
							changeStat(
									playerPrayer,
									(int) (getLevelForXP(playerXP[playerPrayer]) * 0.26) + 8,
									0, true);
							addItem(3028, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 3028:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.26) + 8,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.26) + 8,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.26) + 8,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.26) + 8,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.26) + 8,
									0, true);
							changeStat(
									playerPrayer,
									(int) (getLevelForXP(playerXP[playerPrayer]) * 0.26) + 8,
									0, true);
							addItem(3030, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 3030:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.26) + 8,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.26) + 8,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.26) + 8,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.26) + 8,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.26) + 8,
									0, true);
							changeStat(
									playerPrayer,
									(int) (getLevelForXP(playerXP[playerPrayer]) * 0.26) + 8,
									0, true);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2430:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.3) + 10,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.3) + 10,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.3) + 10,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.3) + 10,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.3) + 10,
									0, true);
							addItem(127, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 127:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.3) + 10,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.3) + 10,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.3) + 10,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.3) + 10,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.3) + 10,
									0, true);
							addItem(129, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 129:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.3) + 10,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.3) + 10,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.3) + 10,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.3) + 10,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.3) + 10,
									0, true);
							addItem(131, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 131:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[playerAttack]) * 0.3) + 10,
									0, true);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.3) + 10,
									0, true);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.3) + 10,
									0, true);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.3) + 10,
									0, true);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.3) + 10,
									0, true);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 6685:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(
									(int) (getLevelForXP(playerXP[3]) * 0.15) + 2,
									true);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 2,
									0, false);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.1) + 2,
									0, false);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.1) + 2,
									0, false);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.1) + 2,
									0, false);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.2) + 2,
									1, true);
							addItem(6687, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 6687:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(
									(int) (getLevelForXP(playerXP[3]) * 0.15) + 2,
									true);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 2,
									0, false);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.1) + 2,
									0, false);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.1) + 2,
									0, false);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.1) + 2,
									0, false);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.2) + 2,
									1, true);
							addItem(6689, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 6689:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(
									(int) (getLevelForXP(playerXP[3]) * 0.15) + 2,
									true);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 2,
									0, false);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.1) + 2,
									0, false);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.1) + 2,
									0, false);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.1) + 2,
									0, false);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.2) + 2,
									1, true);
							addItem(6691, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 6691:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							deleteItem(ItemId, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(
									(int) (getLevelForXP(playerXP[3]) * 0.15) + 2,
									true);
							changeStat(
									playerAttack,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 2,
									0, false);
							changeStat(
									playerStrength,
									(int) (getLevelForXP(playerXP[playerStrength]) * 0.1) + 2,
									0, false);
							changeStat(
									playerMagic,
									(int) (getLevelForXP(playerXP[playerMagic]) * 0.1) + 2,
									0, false);
							changeStat(
									playerRanged,
									(int) (getLevelForXP(playerXP[playerRanged]) * 0.1) + 2,
									0, false);
							changeStat(
									playerDefence,
									(int) (getLevelForXP(playerXP[playerDefence]) * 0.2) + 2,
									1, true);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 7981:
						if (teleBlockDelay > 0) {
							sendMessage("A magical force does not allow you to teleport.");
							break;
						}
						wildLvl = (((absY - 3520) / 8) + 1);
						if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
								&& WildArea() || meleeFightStatus == 1) {
							sendMessage("You cannot teleport from here.");
							break;
						}
						if (!IsInFightCave() && duelStatus == -1) {
							pcStatus = 0;
							deleteItem(ItemId, ItemSlot, 1);
							if (Misc.random(1) == 1) {
								startTele(2827 + randomz.nextInt(2),
										3344 + randomz.nextInt(2), 0, 714, 715,
										308, 4, 18431);
							} else {
								startTele(2860 + randomz.nextInt(2),
										3373 + randomz.nextInt(2), 0, 714, 715,
										308, 4, 18431);
							}
						} else {
							sendMessage("You can't use this here!");
						}
						break;
					case 8070:
						if (teleBlockDelay > 0) {
							sendMessage("A magical force does not allow you to teleport.");
							break;
						}
						wildLvl = (((absY - 3520) / 8) + 1);
						if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
								&& WildArea() || meleeFightStatus == 1) {
							sendMessage("You cannot teleport from here.");
							break;
						}
						if (!IsInFightCave() && duelStatus == -1) {
							pcStatus = 0;
							deleteItem(ItemId, ItemSlot, 1);
							startTele(3213, 3423, 0, 714, 715, 308, 4, 18431);
						} else {
							sendMessage("You can't use this here!");
						}
						break;
					case 8071:
						if (teleBlockDelay > 0) {
							sendMessage("A magical force does not allow you to teleport.");
							break;
						}
						wildLvl = (((absY - 3520) / 8) + 1);
						if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
								&& WildArea() || meleeFightStatus == 1) {
							sendMessage("You cannot teleport from here.");
							break;
						}
						pcStatus = 0;
						deleteItem(ItemId, ItemSlot, 1);
						startTele(3226, 3219, 0, 714, 715, 308, 4, 18431);
						break;
					case 8072:
						if (teleBlockDelay > 0) {
							sendMessage("A magical force does not allow you to teleport.");
							break;
						}
						wildLvl = (((absY - 3520) / 8) + 1);
						if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
								&& WildArea() || meleeFightStatus == 1) {
							sendMessage("You cannot teleport from here.");
							break;
						}
						pcStatus = 0;
						deleteItem(ItemId, ItemSlot, 1);
						startTele(2965, 3378, 0, 714, 715, 308, 4, 18431);
						break;
					case 8073:
						if (teleBlockDelay > 0) {
							sendMessage("A magical force does not allow you to teleport.");
							break;
						}
						wildLvl = (((absY - 3520) / 8) + 1);
						if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
								&& WildArea() || meleeFightStatus == 1) {
							sendMessage("You cannot teleport from here.");
							break;
						}
						pcStatus = 0;
						deleteItem(ItemId, ItemSlot, 1);
						startTele(3081, 3415, 0, 714, 715, 308, 4, 18431);
						break;
					case 175:
						if (drinkDelay > 0) {
							break;
						}
						drinkDelay = 3;
						itemUseDelay();
						startAnimation(829, 0);
						deleteItem(175, ItemSlot, 1);
						addItem(177, 1);
						poisonDelay = -1;
						break;
					case 177:
						if (drinkDelay > 0) {
							break;
						}
						drinkDelay = 3;
						itemUseDelay();
						startAnimation(829, 0);
						deleteItem(177, ItemSlot, 1);
						addItem(179, 1);
						poisonDelay = -1;
						break;
					case 179:
						if (drinkDelay > 0) {
							break;
						}
						drinkDelay = 3;
						itemUseDelay();
						startAnimation(829, 0);
						deleteItem(179, ItemSlot, 1);
						addItem(229, 1);
						poisonDelay = -1;
						break;
					case 526:
						startAnimation(827, 0);
						addSkillXP(5 * prayerXpInc, 5);
						deleteItem(526, ItemSlot, 1);
						break;
					case 532:
						startAnimation(827, 0);
						addSkillXP(15 * prayerXpInc, 5);
						deleteItem(532, ItemSlot, 1);
						break;
					case 6729:
						startAnimation(827, 0);
						addSkillXP(125 * prayerXpInc, 5);
						deleteItem(6729, ItemSlot, 1);
						break;
					case 534:
						startAnimation(827, 0);
						addSkillXP(30 * prayerXpInc, 5);
						deleteItem(534, ItemSlot, 1);
						break;
					case 530:
						startAnimation(827, 0);
						addSkillXP(6 * prayerXpInc, 5);
						deleteItem(530, ItemSlot, 1);
						break;
					case 536:
						startAnimation(827, 0);
						addSkillXP(72 * prayerXpInc, 5);
						deleteItem(536, ItemSlot, 1);
						break;
					case 379:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(379, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(12, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 373:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(373, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(16, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 385:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(385, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(20, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 397:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(397, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(20, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 4837:
						if (isMember == 0) {
							showDialogue("Pets are only for premium members!");
							return;
						}
						petSpell = true;
						changeText126("Summon Pet", 2493);
						changeText126("Indian Chief (Lvl 5)", 2494);
						changeText126("Pet Dragon (Lvl 80)", 2495);
						changeText126("Personal Banker (Lvl 62)", 2496);
						changeText126("Skeleton Mage (Lvl 99)", 2497);
						changeText126("", 2498);
						sendFrame164(2492);
						/*
						 * if(pet == null) { NPC newPet =
						 * Server.s.npcHandler.npcs
						 * [Server.s.npcHandler.newNPC(500, absX, absY,
						 * heightLevel, 0, 0, 0, 0, true, -1)];
						 * spawnPet(newPet); } else { spawnPet(); }
						 */
						break;
					case 391:
						if (!duelRule[7]) {
							if (eatDelay > 0) {
								break;
							}
							eatDelay = 3;
							itemUseDelay();
							deleteItem(391, ItemSlot, 1);
							startAnimation(829, 0);
							updateHp(22, true);
						} else {
							sendMessage("Eating has been disabled in this duel!");
						}
						break;
					case 2434:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							deleteItem(2434, GetItemSlot(2434), 1);
							addItem(139, 1);
							changeStat(playerPrayer, (int) (prayerRestore), 0,
									true);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 139:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							deleteItem(139, GetItemSlot(139), 1);
							addItem(141, 1);
							changeStat(playerPrayer, (int) (prayerRestore), 0,
									true);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 141:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							deleteItem(141, GetItemSlot(141), 1);
							addItem(143, 1);
							changeStat(playerPrayer, (int) (prayerRestore), 0,
									true);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 143:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							deleteItem(143, GetItemSlot(143), 1);
							addItem(229, 1);
							changeStat(playerPrayer, (int) (prayerRestore), 0,
									true);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 113:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.1) + 3,
									1, true);
							deleteItem(113, GetItemSlot(113), 1);
							addItem(115, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 115:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.1) + 3,
									1, true);
							deleteItem(115, GetItemSlot(115), 1);
							addItem(117, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 117:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.1) + 3,
									1, true);
							deleteItem(117, GetItemSlot(117), 1);
							addItem(119, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 119:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.1) + 3,
									1, true);
							deleteItem(119, GetItemSlot(119), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2432:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.1) + 3,
									1, true);
							deleteItem(2432, GetItemSlot(2432), 1);
							addItem(133, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 133:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.1) + 3,
									1, true);
							deleteItem(133, GetItemSlot(133), 1);
							addItem(135, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 135:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.1) + 3,
									1, true);
							deleteItem(135, GetItemSlot(135), 1);
							addItem(137, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 137:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.1) + 3,
									1, true);
							deleteItem(137, GetItemSlot(137), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2444:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									4,
									(int) (getLevelForXP(playerXP[4]) * 0.1) + 4,
									1, true);
							deleteItem(2444, GetItemSlot(2444), 1);
							addItem(169, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 169:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									4,
									(int) (getLevelForXP(playerXP[4]) * 0.1) + 4,
									1, true);
							deleteItem(169, GetItemSlot(169), 1);
							addItem(171, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 171:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									4,
									(int) (getLevelForXP(playerXP[4]) * 0.1) + 4,
									1, true);
							deleteItem(171, GetItemSlot(171), 1);
							addItem(173, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 173:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									4,
									(int) (getLevelForXP(playerXP[4]) * 0.1) + 4,
									1, true);
							deleteItem(173, GetItemSlot(173), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2428:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 3,
									1, true);
							deleteItem(2428, GetItemSlot(2428), 1);
							addItem(121, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 121:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 3,
									1, true);
							deleteItem(121, GetItemSlot(121), 1);
							addItem(123, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 123:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 3,
									1, true);
							deleteItem(123, GetItemSlot(123), 1);
							addItem(125, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 125:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.1) + 3,
									1, true);
							deleteItem(125, GetItemSlot(125), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2440:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.15) + 5,
									1, true);
							deleteItem(2440, GetItemSlot(2440), 1);
							addItem(157, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 157:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.15) + 5,
									1, true);
							deleteItem(157, GetItemSlot(157), 1);
							addItem(159, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 159:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.15) + 5,
									1, true);
							deleteItem(159, GetItemSlot(159), 1);
							addItem(161, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 161:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									2,
									(int) (getLevelForXP(playerXP[2]) * 0.15) + 5,
									1, true);
							deleteItem(161, GetItemSlot(161), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2442:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.15) + 5,
									1, true);
							deleteItem(2442, GetItemSlot(2442), 1);
							addItem(163, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 163:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.15) + 5,
									1, true);
							deleteItem(163, GetItemSlot(163), 1);
							addItem(165, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 165:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.15) + 5,
									1, true);
							deleteItem(165, GetItemSlot(165), 1);
							addItem(167, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 167:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									1,
									(int) (getLevelForXP(playerXP[1]) * 0.15) + 5,
									1, true);
							deleteItem(167, GetItemSlot(167), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 2436:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.15) + 5,
									1, true);
							deleteItem(2436, GetItemSlot(2436), 1);
							addItem(145, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 145:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.15) + 5,
									1, true);
							deleteItem(145, GetItemSlot(145), 1);
							addItem(147, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 147:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.15) + 5,
									1, true);
							deleteItem(147, GetItemSlot(147), 1);
							addItem(149, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 149:
						if (!duelRule[6]) {
							if (drinkDelay > 0) {
								break;
							}
							drinkDelay = 3;
							itemUseDelay();
							startAnimation(829, 0);
							changeStat(
									0,
									(int) (getLevelForXP(playerXP[0]) * 0.15) + 5,
									1, true);
							deleteItem(149, GetItemSlot(149), 1);
							addItem(229, 1);
						} else {
							sendMessage("Drinking has been disabled in this duel!");
						}
						break;
					case 952:
						sendMessage("You dig into the ground...");
						startAnimation(2843, 0);
						if (dharoksMound()) {
							changeCoords(3556, 9718, -1);
						} else if (guthansMound()) {
							changeCoords(3534, 9704, -1);
						} else if (ahrimsMound()) {
							changeCoords(3557, 9703, -1);
						} else if (veracsMound()) {
							changeCoords(3578, 9706, -1);
						} else if (toragsMound()) {
							changeCoords(3568, 9683, -1);
						} else if (karilsMound()) {
							changeCoords(3546, 9684, -1);
						} else if (ClueScrollLocation(clueId())) {
							int clueId = clueId();
							int clueLevel = clueLevel(clueId);
							clueRewardDelay -= 1;
							deleteItem(clueId, GetItemSlot(clueId), 1);
							if (clueRewardDelay != 0) {
								sendMessage("And find another clue!");
								int clue = -1, clueSlot = 0;
								if (clueLevel == 1) {
									clueSlot = Misc.random3(newClue1.length);
									clue = newClue1[clueSlot];
								} else if (clueLevel == 2) {
									clueSlot = Misc.random3(newClue2.length);
									clue = newClue2[clueSlot];
								} else if (clueLevel == 3) {
									clueSlot = Misc.random3(newClue3.length);
									clue = newClue3[clueSlot];
								}
								addItem(clue, 1);
							} else {
								sendMessage("And find a reward!");
								clueRewardDelay = Misc.random5(3);
								if (clueLevel == 1) {
									addToClue(
											clueReward1[Misc
													.random3(clueReward1.length)],
											1);
								} else if (clueLevel == 2) {
									addToClue(
											clueReward2[Misc
													.random3(clueReward2.length)],
											1);
								} else if (clueLevel == 3) {
									addToClue(
											clueReward3[Misc
													.random3(clueReward3.length)],
											1);
								}
								addToClue(
										clueRewardExtra[Misc
												.random3(clueRewardExtra.length)],
										100);
								if (Misc.random(10) >= 5) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								if (Misc.random(10) >= 6) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								if (Misc.random(10) >= 7) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								if (Misc.random(10) >= 8) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								if (Misc.random(10) >= 9) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								if (Misc.random(10) >= 10) {
									addToClue(
											clueRewardExtra[Misc
													.random3(clueRewardExtra.length)],
											100);
								}
								giveClueRewards();
								sendClueReward();
								showInterface(6960);
							}
						} else if (absX == 2393 && absY == 9651) {
							startTele(2392, 9646, 0, 2843, -1, -1, 5, 8677);
						} else {
							sendMessage("But find nothing.");
						}
						break;
					default:
						if (playerName.equalsIgnoreCase("Mrquarter")) {
							System.out
									.println("[CLIENT]: UseItem(): " + ItemId);
						}
						// Server.s.serverConsole.addMessToServer("UseItem() method is missing "+ItemId);
						break;
					}
				}
			}
		}
	}

	public int clueId() {
		for (int i = 0; i < newClue1.length; i++) {
			if (newClue1[i] != -1) {
				if (InvItemAmt(newClue1[i]) > 0) {
					return newClue1[i];
				}
			}
		}
		for (int i = 0; i < newClue2.length; i++) {
			if (newClue2[i] != -1) {
				if (InvItemAmt(newClue2[i]) > 0) {
					return newClue2[i];
				}
			}
		}
		for (int i = 0; i < newClue3.length; i++) {
			if (newClue3[i] != -1) {
				if (InvItemAmt(newClue3[i]) > 0) {
					return newClue3[i];
				}
			}
		}
		return -1;
	}

	public boolean hasClue() {
		for (int i = 0; i < newClue1.length; i++) {
			if (newClue1[i] != -1) {
				if (BankAndInvItemAmt(newClue1[i]) > 0) {
					return true;
				}
			}
		}
		for (int i = 0; i < newClue2.length; i++) {
			if (newClue2[i] != -1) {
				if (BankAndInvItemAmt(newClue2[i]) > 0) {
					return true;
				}
			}
		}
		for (int i = 0; i < newClue3.length; i++) {
			if (newClue3[i] != -1) {
				if (BankAndInvItemAmt(newClue3[i]) > 0) {
					return true;
				}
			}
		}
		return false;
	}

	public void NewTrade() {
		TradeStatus = 0;
		changeText126("", 3535);
		changeText126("", 3431);
		changeText126("", 3417);
		for (int i = 0; i < playerTItems.length; i++) {
			playerTItems[i] = 0;
			playerTItemsN[i] = 0;
			playerOTItems[i] = 0;
			playerOTItemsN[i] = 0;
		}
		sendFrame248(3323, 3321);
		resetItems(3322);
		resetTItems(3415);
		resetOTItems(3416);
		if (Server.s.playerHandler.players[TradingWith] != null) {
			Client trade = (Client) Server.s.playerHandler.players[TradingWith];
			changeText126("Trading With: "
					+ trade.playerName+". They have "+trade.freeSlots()+" slots left.", 3417);
		} else {
			changeText126("Trading With: Offline Player", 3417);
			sendMessage("Error trading player.");
			declineTrade();
		}
	}

	public void TradeItem(int itemId, int itemSlot, int itemAmount) {
		try {
			if (Server.s.playerHandler.players[playerId] == null
					|| disconnected || in == null || out == null) {
				return;
			}
			if (itemSlot < 0 || itemSlot >= playerItems.length
					|| itemAmount <= 0 || playerItems[itemSlot] - 1 == -1) {
				return;
			}
			if (itemAmount <= 0 || playerItems[itemSlot] != itemId + 1) {
				itemAmount = 1;
			}
			if (Server.s.playerHandler.players[TradingWith] == null) {
				sendMessage("Other player is not online.");
			}
			boolean inTrade = false;
			if (itemId + 1 == playerItems[itemSlot]) {
				if (itemAmount > InvItemAmt(itemId)) {
					itemAmount = InvItemAmt(itemId);
				}
				if (Item.itemStackable[itemId] || Item.itemIsNote[itemId]) {
					for (int i = 0; i < playerTItems.length; i++) {
						if (playerTItems[i] == playerItems[itemSlot]) {
							playerTItemsN[i] += itemAmount;
							if (Server.s.playerHandler.players[TradingWith] != null) {
								Server.s.playerHandler.players[TradingWith].playerOTItemsN[i] += itemAmount;
							}
							inTrade = true;
							break;
						}
					}
				}
				if (!inTrade) {
					int itmAmt = itemAmount;
					if (Item.itemStackable[itemId] || Item.itemIsNote[itemId]) {
						for (int i = 0; i < playerTItems.length; i++) {
							if (playerTItems[i] == 0) {
								playerTItems[i] = itemId + 1;
								playerTItemsN[i] = itemAmount;
								if (Server.s.playerHandler.players[TradingWith] != null) {
									Server.s.playerHandler.players[TradingWith].playerOTItems[i] = itemId + 1;
									Server.s.playerHandler.players[TradingWith].playerOTItemsN[i] = itemAmount;
								}
								break;
							}
						}
					} else {
						for (int i = 0; i < playerTItems.length; i++) {
							if (playerTItems[i] == 0 && itmAmt > 0) {
								if (InvItemAmt(itemId) > 0) {
									itmAmt--;
									playerTItems[i] = itemId + 1;
									playerTItemsN[i] = 1;
									if (Server.s.playerHandler.players[TradingWith] != null) {
										Server.s.playerHandler.players[TradingWith].playerOTItems[i] = itemId + 1;
										Server.s.playerHandler.players[TradingWith].playerOTItemsN[i] = 1;
									}
								} else {
									break;
								}
							}
						}
					}
				}
				deleteItem(playerItems[itemSlot] - 1, itemSlot, itemAmount);
				TradeStatus = 0;
				resetItems(3322);
				resetTItems(3415);
				resetOTItems(3416);
				changeText126("", 3431);
				if (Server.s.playerHandler.players[TradingWith] != null) {
					Client P = (Client) Server.s.playerHandler.players[TradingWith];
					P.TradeStatus = 0;
					P.resetItems(3322);
					P.resetTItems(3415);
					P.resetOTItems(3416);
					P.changeText126("", 3431);
				}
			}
		} catch (Exception e) {
		}
	}

	public void FromTrade(int itemId, int itemSlot, int itemAmount) {
		try {
			if (itemAmount <= 0) {
				itemAmount = 1;
			}

			if (Server.s.playerHandler.players[playerId] == null
					|| disconnected || in == null || out == null) {
				if (combatDelay <= 0 && deathDelay < 0) {
					disconnected = true;
				}
				return;
			}

			if (Server.s.playerHandler.players[TradingWith] == null) {
				sendMessage("Other player is not online.");
				sendMessage("Please decline the trade.");
			}

			if (itemId == -1 || itemSlot == -1 || itemAmount == -1
					|| playerItems[itemSlot] - 1 == -1) {
				return;
			}

			if (itemId + 1 == playerTItems[itemSlot]) {
				if (itemAmount > tradeItemAmt(itemId)) {
					itemAmount = tradeItemAmt(itemId);
				}

				addItem(itemId, itemAmount);

				if (Item.itemStackable[itemId] || Item.itemIsNote[itemId]) {
					if (itemAmount == playerTItemsN[itemSlot]) {
						playerTItems[itemSlot] = 0;
						if (Server.s.playerHandler.players[TradingWith] != null) {
							Server.s.playerHandler.players[TradingWith].playerOTItems[itemSlot] = 0;
						}
					} else {
						playerTItemsN[itemSlot] -= itemAmount;
						if (Server.s.playerHandler.players[TradingWith] != null) {
							Server.s.playerHandler.players[TradingWith].playerOTItemsN[itemSlot] -= itemAmount;
						}
					}
				} else if (!Item.itemStackable[itemId]
						&& !Item.itemIsNote[itemId]) {
					int itmAmt = itemAmount;
					for (int i = 0; i < playerTItems.length; i++) {
						if ((playerTItems[i] - 1) == itemId && itmAmt > 0) {
							itmAmt--;
							playerTItems[i] = 0;
							playerTItemsN[i] = 0;
							if (Server.s.playerHandler.players[TradingWith] != null) {
								Server.s.playerHandler.players[TradingWith].playerOTItems[i] = 0;
								Server.s.playerHandler.players[TradingWith].playerOTItemsN[i] = 0;
							}
						}
					}
				}

				TradeStatus = 0;
				resetItems(3322);
				resetTItems(3415);
				resetOTItems(3416);
				changeText126("", 3431);
				sendFrame248(3323, 3321);

				if (Server.s.playerHandler.players[TradingWith] != null) {
					Client P = (Client) Server.s.playerHandler.players[TradingWith];
					P.TradeStatus = 0;
					P.resetItems(3322);
					P.resetTItems(3415);
					P.resetOTItems(3416);
					P.changeText126("", 3431);
					P.sendFrame248(3323, 3321);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void ItemOnPlayer() {
		int Interface = inStream.readSignedWordA();
		int PlayerSlot = inStream.readSignedWord();
		int ItemId = inStream.readSignedWord();
		int ItemSlot = inStream.readSignedWordBigEndian();
		Client Player = (Client) Server.s.playerHandler.players[PlayerSlot];
		TurnPlayerTo(32768 + PlayerSlot);
		if (InvItemAmt(ItemId) > 0) {
			switch (ItemId) {
			case 962:
				deleteItem(962, GetItemSlot(962), 1);
				int random = Misc.random(1);
				if (random != 1) {
					forceChat("Yes! I just got an amazing random rare!");
					Player.forceChat("Dang! I got nothing!");
					addItem(BossManager.randomRare(), 1);
				} else {
					forceChat("Dang! I got nothing!");
					Player.forceChat("Yes! I just got an amazing random rare!");
					Player.addItem(BossManager.randomRare(), 1);
				}
				break;
			case 2518:
				deleteItem(2518, GetItemSlot(2518), 1);
				startAnimation(0x326, 0);
				playGraphic(30, 0, 100);
				int offsetX = (absX - Player.absX) * -1;
				int offsetY = (absY - Player.absY) * -1;
				Player.playGraphic(31, 95, 100);
				createProjectile(absY, absX, offsetY, offsetX, 29, 43, 31, 95,
						-PlayerSlot - 1);
				stopMovement();
				break;
			case 3408:
				startAnimation(1818, 0);
				playGraphic(343, 0, 0);
				Player.playGraphic(342, 0, 0);
				Player.updateHp(1, true);
				Player.sendMessage("You are healed by 1 hp!");
				deleteItem(ItemId, ItemSlot, 1);
				addItem(3410, 1);
				break;
			case 3410:
				startAnimation(1818, 0);
				playGraphic(343, 0, 0);
				Player.playGraphic(342, 0, 0);
				Player.updateHp(1, true);
				Player.sendMessage("You are healed by 1 hp!");
				deleteItem(ItemId, ItemSlot, 1);
				addItem(3412, 1);
				break;
			case 3412:
				startAnimation(1818, 0);
				playGraphic(343, 0, 0);
				Player.playGraphic(342, 0, 0);
				Player.updateHp(1, true);
				Player.sendMessage("You are healed by 1 hp!");
				deleteItem(ItemId, ItemSlot, 1);
				addItem(3414, 1);
				break;
			case 3414:
				startAnimation(1818, 0);
				playGraphic(343, 0, 0);
				Player.playGraphic(342, 0, 0);
				Player.updateHp(1, true);
				Player.sendMessage("You are healed by 1 hp!");
				deleteItem(ItemId, ItemSlot, 1);
				addItem(229, 1);
				break;
			}
		}
	}

	public void itemOnItem() {
		int usedOnSlot = inStream.readUnsignedWord();
		int itemUsedSlot = inStream.readUnsignedWordA();
		int interface1284 = inStream.readUnsignedWord();
		int interfacek = inStream.readUnsignedWord();
		if (usedOnSlot < 0 || usedOnSlot > 27 || itemUsedSlot < 0
				|| itemUsedSlot > 27) {
			return;
		}
		int itemUsedOn = playerItems[usedOnSlot] - 1;
		int itemUsed = playerItems[itemUsedSlot] - 1;
		if (itemUsedOn == 596 && itemUsed == 590 || itemUsedOn == 590
				&& itemUsed == 596) {
			deleteItem(596, getItemSlot(596), 1);
			addItem(594, 1);
			sendMessage("You light the torch!");
		}
		if (itemUsedOn == 314 && itemUsed == 819 || itemUsedOn == 819
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 1) {
				if (InvItemAmt(819) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(819, GetItemSlot(819), 15);
					addItem(806, 15);
					addSkillXP(18 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 1 to make this.");
			}
		} else if (itemUsedOn == 1511 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 1) {
				if (firemakingWait == 0) {
					addSkillXP(1 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 5;
					firemakingWait += 5;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 1 firemaking to light this log.");
			}
		} else if (itemUsedOn == 1513 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 70) {
				if (firemakingWait == 0) {
					addSkillXP(10 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 12;
					firemakingWait += 12;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 70 firemaking to light this log.");
			}
		} else if (itemUsedOn == 1515 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 60) {
				if (firemakingWait == 0) {
					addSkillXP(8 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 10;
					firemakingWait += 10;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 60 firemaking to light this log.");
			}
		} else if (itemUsedOn == 1517 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 45) {
				if (firemakingWait == 0) {
					addSkillXP(6 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 9;
					firemakingWait += 9;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 45 firemaking to light this log.");
			}
		} else if (itemUsedOn == 1519 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 30) {
				if (firemakingWait == 0) {
					addSkillXP(4 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 8;
					firemakingWait += 8;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 30 firemaking to light this log.");
			}
		} else if (itemUsedOn == 1521 && itemUsed == 590) {
			if (playerLevel[playerFiremaking] >= 15) {
				if (firemakingWait == 0) {
					addSkillXP(3 * firemakingXpInc, 11);
					startAnimation(733, 0);
					deleteItem(itemUsedOn, GetItemSlot(itemUsedOn), 1);
					firemakingTimer += 7;
					firemakingWait += 7;
					sendMessage("You attempt to light a fire.");
				}
			} else {
				showDialogue("You need 15 firemaking to light this log.");
			}
		} else if (itemUsedOn == 2347 && itemUsed == 6573 || itemUsedOn == 6573
				&& itemUsed == 2347) {
			if (playerLevel[12] >= 90) {
				deleteItem(6573, GetItemSlot(6573), 1);
				addItem(6585, 1);
				addSkillXP(165 * craftXpInc, 12);
			} else {
				sendMessage("You need atleast 90 Crafting to make this!");
			}
		} else if (itemUsed == 1485 && itemUsedOn >= 882 && itemUsedOn <= 893) {
			ReplaceItems(2534, itemUsedOn, 1, 1);
		} else if (itemUsedOn == 314 && itemUsed == 820 || itemUsedOn == 820
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 22) {
				if (InvItemAmt(820) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(820, GetItemSlot(820), 15);
					addItem(807, 15);
					addSkillXP(32 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 22 to make this.");
			}
		} else if (itemUsedOn == 314 && itemUsed == 821 || itemUsedOn == 821
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 37) {
				if (InvItemAmt(821) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(821, GetItemSlot(821), 15);
					addItem(808, 15);
					addSkillXP(75 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 37 to make this.");
			}
		} else if (itemUsedOn == 314 && itemUsed == 822 || itemUsedOn == 822
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 52) {
				if (InvItemAmt(822) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(822, GetItemSlot(822), 15);
					addItem(809, 15);
					addSkillXP(112 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 52 to make this.");
			}
		} else if (itemUsedOn == 314 && itemUsed == 823 || itemUsedOn == 823
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 67) {
				if (InvItemAmt(823) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(823, GetItemSlot(823), 15);
					addItem(810, 15);
					addSkillXP(150 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 67 to make this.");
			}
		} else if (itemUsedOn == 314 && itemUsed == 824 || itemUsedOn == 824
				&& itemUsed == 314) {
			if (playerLevel[playerFletching] >= 81) {
				if (InvItemAmt(824) >= 15 && InvItemAmt(314) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(824, GetItemSlot(824), 15);
					addItem(811, 15);
					addSkillXP(188 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 tips and 15 feathers to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 81 to make this.");
			}
		} else if (itemUsedOn == 1675 && itemUsed == 1759 || itemUsedOn == 1759
				&& itemUsed == 1675) {
			deleteItem(1675, GetItemSlot(1675), 1);
			deleteItem(1759, GetItemSlot(1759), 1);
			addItem(1694, 1);
		} else if (itemUsedOn == 1677 && itemUsed == 1759 || itemUsedOn == 1759
				&& itemUsed == 1677) {
			deleteItem(1677, GetItemSlot(1677), 1);
			deleteItem(1759, GetItemSlot(1759), 1);
			addItem(1696, 1);
		} else if (itemUsedOn == 1679 && itemUsed == 1759 || itemUsedOn == 1759
				&& itemUsed == 1679) {
			deleteItem(1679, GetItemSlot(1679), 1);
			deleteItem(1759, GetItemSlot(1759), 1);
			addItem(1698, 1);
		} else if (itemUsedOn == 1681 && itemUsed == 1759 || itemUsedOn == 1759
				&& itemUsed == 1681) {
			deleteItem(1681, GetItemSlot(1681), 1);
			deleteItem(1759, GetItemSlot(1759), 1);
			addItem(1700, 1);
		} else if (itemUsedOn == 8092 && itemUsed == 8090 || itemUsedOn == 8090
				&& itemUsed == 8092) {
			if (InvItemAmt(8090) > 0 && InvItemAmt(8092) > 0) {
				deleteItem(8090, GetItemSlot(8090), 1);
				deleteItem(8092, GetItemSlot(8092), 1);
				addItem(8086, 1);
			} else {
				sendMessage("You do not have enough items to make this.");
			}
		} else if (itemUsedOn == 8094 && itemUsed == 8090 || itemUsedOn == 8090
				&& itemUsed == 8094) {
			if (InvItemAmt(8090) > 0 && InvItemAmt(8094) > 0) {
				deleteItem(8090, GetItemSlot(8090), 1);
				deleteItem(8094, GetItemSlot(8094), 1);
				addItem(8040, 1);
			} else {
				sendMessage("You do not have enough items to make this.");
			}
		} else if (itemUsedOn == 8095 && itemUsed == 8090 || itemUsedOn == 8090
				&& itemUsed == 8095) {
			if (InvItemAmt(8090) > 0 && InvItemAmt(8095) > 0) {
				deleteItem(8090, GetItemSlot(8090), 1);
				deleteItem(8095, GetItemSlot(8095), 1);
				addItem(8087, 1);
			} else {
				sendMessage("You do not have enough items to make this.");
			}
		} else if (itemUsedOn == 8093 && itemUsed == 8090 || itemUsedOn == 8090
				&& itemUsed == 8093) {
			if (InvItemAmt(8090) > 0 && InvItemAmt(8093) > 0) {
				deleteItem(8090, GetItemSlot(8090), 1);
				deleteItem(8093, GetItemSlot(8093), 1);
				addItem(7993, 1);
			} else {
				sendMessage("You do not have enough items to make this.");
			}
		} else if (itemUsedOn == 3839 || itemUsed == 3839) {
			if (InvItemAmt(3827) >= 1 && InvItemAmt(3828) >= 1
					&& InvItemAmt(3829) >= 1) {
				deleteItem(3827, GetItemSlot(3827), 1);
				deleteItem(3828, GetItemSlot(3828), 1);
				deleteItem(3829, GetItemSlot(3829), 1);
				deleteItem(3839, GetItemSlot(3839), 1);
				addItem(3840, 1);
			} else {
				sendMessage("You need all three pages!");
			}
		} else if (itemUsedOn == 3841 || itemUsed == 3841) {
			if (InvItemAmt(3831) >= 1 && InvItemAmt(3832) >= 1
					&& InvItemAmt(3833) >= 1) {
				deleteItem(3831, GetItemSlot(3831), 1);
				deleteItem(3832, GetItemSlot(3832), 1);
				deleteItem(3833, GetItemSlot(3833), 1);
				deleteItem(3841, GetItemSlot(3841), 1);
				addItem(3842, 1);
			} else {
				sendMessage("You need all three pages!");
			}
		} else if (itemUsedOn == 3843 || itemUsed == 3843) {
			if (InvItemAmt(3835) >= 1 && InvItemAmt(3836) >= 1
					&& InvItemAmt(3837) >= 1) {
				deleteItem(3835, GetItemSlot(3835), 1);
				deleteItem(3836, GetItemSlot(3836), 1);
				deleteItem(3837, GetItemSlot(3837), 1);
				deleteItem(3843, GetItemSlot(3843), 1);
				addItem(3844, 1);
			} else {
				sendMessage("You need all three pages!");
			}
		} else if (itemUsedOn == 2349 && itemUsed == 2347) {
			if (playerLevel[9] >= 9) {
				if (InvItemAmt(314) >= 15 && InvItemAmt(946) >= 1) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(2347, GetItemSlot(2347), 1);
					addItem(7906, 15);
					addSkillXP(15 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 feathers and a knife to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 9 to make this.");
			}
		} else if (itemUsedOn == 2363 && itemUsed == 2347) {
			if (playerLevel[9] >= 69) {
				if (InvItemAmt(314) >= 15 && InvItemAmt(946) >= 1) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(2363, GetItemSlot(2363), 1);
					addItem(7988, 15);
					addSkillXP(150 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need 15 feathers and a knife to fletch this.");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 69 to make this.");
			}
		} else if (itemUsedOn == 314 && itemUsed == 52 || itemUsedOn == 52
				&& itemUsed == 314) {
			if (playerLevel[9] >= 1) {
				if (InvItemAmt(314) >= 15 && InvItemAmt(52) >= 15) {
					deleteItem(314, GetItemSlot(314), 15);
					deleteItem(52, GetItemSlot(52), 15);
					addItem(53, 15);
					addSkillXP(15 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 1 to make this.");
			}
		} else if (itemUsedOn == 39 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 39) {
			if (playerLevel[9] >= 1) {
				if (InvItemAmt(39) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(39, GetItemSlot(39), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(882, 15);
					addSkillXP(39 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 1 to make this.");
			}
		} else if (itemUsedOn == 40 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 40) {
			if (playerLevel[9] >= 15) {
				if (InvItemAmt(40) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(40, GetItemSlot(40), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(884, 15);
					addSkillXP(58 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 15 to make this.");
			}
		} else if (itemUsedOn == 41 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 41) {
			if (playerLevel[9] >= 30) {
				if (InvItemAmt(41) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(41, GetItemSlot(41), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(886, 15);
					addSkillXP(95 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 30 to make this.");
			}
		} else if (itemUsedOn == 42 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 42) {
			if (playerLevel[9] >= 45) {
				if (InvItemAmt(42) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(42, GetItemSlot(42), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(888, 15);
					addSkillXP(132 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 45 to make this.");
			}
		} else if (itemUsedOn == 43 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 43) {
			if (playerLevel[9] >= 60) {
				if (InvItemAmt(43) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(43, GetItemSlot(43), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(890, 15);
					addSkillXP(170 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 60 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 15 to make this.");
			}
		} else if (itemUsedOn == 44 && itemUsed == 53 || itemUsedOn == 53
				&& itemUsed == 44) {
			if (playerLevel[9] >= 75) {
				if (InvItemAmt(44) >= 15 && InvItemAmt(53) >= 15) {
					deleteItem(44, GetItemSlot(44), 15);
					deleteItem(53, GetItemSlot(53), 15);
					addItem(892, 15);
					addSkillXP(208 * fletchXpInc, 9);
					startAnimation(1248, 0);
				} else {
					sendMessage("You need atleast 15 of each to Fletch this!");
				}
			} else {
				showDialogue("You need a Fletching level of atleast 75 to make this.");
			}
		} else if (itemUsedOn == 1623 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 1623) {
			if (playerLevel[12] >= 20) {
				deleteItem(1623, GetItemSlot(1623), 1);
				addItem(1607, 1);
				addSkillXP(50 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 20 to make this.");
			}
		} else if (itemUsedOn == 1621 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 1621) {
			if (playerLevel[12] >= 27) {
				deleteItem(1621, GetItemSlot(1621), 1);
				addItem(1605, 1);
				addSkillXP(68 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 27 to make this.");
			}
		} else if (itemUsedOn == 1619 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 1619) {
			if (playerLevel[12] >= 34) {
				deleteItem(1619, GetItemSlot(1619), 1);
				addItem(1603, 1);
				addSkillXP(85 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 34 to make this.");
			}
		} else if (itemUsedOn == 1617 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 1617) {
			if (playerLevel[12] >= 43) {
				deleteItem(1617, GetItemSlot(1617), 1);
				addItem(1601, 1);
				addSkillXP(108 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 43 to make this.");
			}
		} else if (itemUsedOn == 1613 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 1613) {
			if (playerLevel[12] >= 55) {
				deleteItem(1613, GetItemSlot(1613), 1);
				addItem(1615, 1);
				addSkillXP(137 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 55 to make this.");
			}
		} else if (itemUsedOn == 6571 && itemUsed == 1755 || itemUsedOn == 1755
				&& itemUsed == 6571) {
			if (playerLevel[12] >= 67) {
				deleteItem(6571, GetItemSlot(6571), 1);
				addItem(6573, 1);
				addSkillXP(168 * craftXpInc, 12);
				startAnimation(886, 0);
			} else {
				showDialogue("You need a Crafting level of atleast 67 to make this.");
			}
		} else if (itemUsedOn == 2366 && itemUsed == 2368 || itemUsedOn == 2368
				&& itemUsed == 2366) {
			deleteItem(2366, GetItemSlot(2366), 1);
			deleteItem(2368, GetItemSlot(2368), 1);
			addItem(1187, 1);
			startAnimation(713, 0);
			showDialogue("You combine the two shield halves together!");
		} else if (itemUsedOn == 946 || itemUsed == 946) {
			if (itemUsed == 771 || itemUsedOn == 771) {
				if (playerLevel[playerFletching] >= 40) {
					deleteItem(771, GetItemSlot(771), 1);
					startAnimation(1248, 0);
					addItem(772, 1);
					addSkillXP(15 * fletchXpInc, 9);
				} else {
					sendMessage("You need 40 fletching to cut this.");
				}
			} else {
				fletchMenu(itemUsed, itemUsedOn);
			}
		} else if (itemUsedOn == 1733 || itemUsed == 1733) {
			if (itemUsedOn == 8080 || itemUsed == 8080) {
				NpcDialogue = 139;
				DialogueSend();
				CurrentFrame = 13901;
			} else {
				craftMenu(itemUsed, itemUsedOn);
			}
		} else if (itemUsedOn == 1777 || itemUsed == 1777) {
			stringItem(itemUsed, itemUsedOn);
		} else if (itemUsedOn == 249 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 249) {
			deleteItem(249, GetItemSlot(249), 1);
			deleteItem(227, GetItemSlot(227), 1);
			addItem(91, 1);
			addSkillXP(12 * herbXpInc, playerHerblore);
			startAnimation(1652, 0);
		} else if (itemUsedOn == 91 && itemUsed == 221 || itemUsedOn == 221
				&& itemUsed == 91) {
			if (playerLevel[playerHerblore] >= 3) {
				deleteItem(91, GetItemSlot(91), 1);
				deleteItem(221, GetItemSlot(221), 1);
				addItem(2428, 1);
				addSkillXP(12 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 3 to make this.");
			}
		} else if (itemUsedOn == 251 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 251) {
			if (playerLevel[playerHerblore] >= 5) {
				deleteItem(251, GetItemSlot(251), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(93, 1);
				addSkillXP(19 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 5 to make this.");
			}
		} else if (itemUsedOn == 235 && itemUsed == 93 || itemUsedOn == 93
				&& itemUsed == 235) {
			if (playerLevel[playerHerblore] >= 5) {
				deleteItem(235, GetItemSlot(235), 1);
				deleteItem(93, GetItemSlot(93), 1);
				addItem(2446, 1);
				addSkillXP(19 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 5 to make this.");
			}
		} else if (itemUsedOn == 253 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 253) {
			if (playerLevel[playerHerblore] >= 12) {
				deleteItem(253, GetItemSlot(253), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(95, 1);
				addSkillXP(25 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 12 to make this.");
			}
		} else if (itemUsedOn == 225 && itemUsed == 95 || itemUsedOn == 95
				&& itemUsed == 225) {
			if (playerLevel[playerHerblore] >= 12) {
				deleteItem(225, GetItemSlot(225), 1);
				deleteItem(95, GetItemSlot(95), 1);
				addItem(113, 1);
				addSkillXP(25 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 12 to make this.");
			}
		} else if (itemUsedOn == 592 && itemUsed == 95 || itemUsedOn == 95
				&& itemUsed == 592) {
			if (playerLevel[playerHerblore] >= 15) {
				deleteItem(592, GetItemSlot(592), 1);
				deleteItem(95, GetItemSlot(95), 1);
				addItem(3408, 1);
				addSkillXP(25 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 15 to make this.");
			}
		} else if (itemUsedOn == 255 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 255) {
			if (playerLevel[playerHerblore] >= 22) {
				deleteItem(255, GetItemSlot(255), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(97, 1);
				addSkillXP(31 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 22 to make this.");
			}
		} else if (itemUsedOn == 97 && itemUsed == 223 || itemUsedOn == 223
				&& itemUsed == 97) {
			if (playerLevel[playerHerblore] >= 22) {
				deleteItem(97, GetItemSlot(97), 1);
				deleteItem(223, GetItemSlot(223), 1);
				addItem(127, 1);
				addSkillXP(31 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 22 to make this.");
			}
		} else if (itemUsedOn == 257 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 257) {
			if (playerLevel[playerHerblore] >= 30) {
				deleteItem(257, GetItemSlot(257), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(99, 1);
				addSkillXP(37 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 30 to make this.");
			}
		} else if (itemUsedOn == 239 && itemUsed == 99 || itemUsedOn == 99
				&& itemUsed == 239) {
			if (playerLevel[playerHerblore] >= 30) {
				deleteItem(239, GetItemSlot(239), 1);
				deleteItem(99, GetItemSlot(99), 1);
				addItem(2432, 1);
				addSkillXP(37 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 30 to make this.");
			}
		} else if (itemUsedOn == 231 && itemUsed == 99 || itemUsedOn == 99
				&& itemUsed == 231) {
			if (playerLevel[playerHerblore] >= 38) {
				deleteItem(231, GetItemSlot(231), 1);
				deleteItem(99, GetItemSlot(99), 1);
				addItem(2434, 1);
				addSkillXP(51 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 38 to make this.");
			}
		} else if (itemUsedOn == 259 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 259) {
			if (playerLevel[playerHerblore] >= 45) {
				deleteItem(259, GetItemSlot(259), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(101, 1);
				addSkillXP(50 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 45 to make this.");
			}
		} else if (itemUsedOn == 221 && itemUsed == 101 || itemUsedOn == 101
				&& itemUsed == 221) {
			if (playerLevel[playerHerblore] >= 45) {
				deleteItem(221, GetItemSlot(221), 1);
				deleteItem(101, GetItemSlot(101), 1);
				addItem(2436, 1);
				addSkillXP(50 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 45 to make this.");
			}
		} else if (itemUsedOn == 263 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 263) {
			if (playerLevel[playerHerblore] >= 55) {
				deleteItem(263, GetItemSlot(263), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(105, 1);
				addSkillXP(62 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 55 to make this.");
			}
		} else if (itemUsedOn == 225 && itemUsed == 105 || itemUsedOn == 105
				&& itemUsed == 225) {
			if (playerLevel[playerHerblore] >= 55) {
				deleteItem(225, GetItemSlot(225), 1);
				deleteItem(105, GetItemSlot(105), 1);
				addItem(2440, 1);
				addSkillXP(62 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 55 to make this.");
			}
		} else if (itemUsedOn == 3000 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 3000) {
			if (playerLevel[playerHerblore] >= 63) {
				deleteItem(3000, GetItemSlot(3000), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(3004, 1);
				addSkillXP(71 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 63 to make this.");
			}
		} else if (itemUsedOn == 223 && itemUsed == 3004 || itemUsedOn == 3004
				&& itemUsed == 223) {
			if (playerLevel[playerHerblore] >= 63) {
				deleteItem(223, GetItemSlot(223), 1);
				deleteItem(3004, GetItemSlot(3004), 1);
				addItem(3024, 1);
				addSkillXP(71 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 63 to make this.");
			}
		} else if (itemUsedOn == 265 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 265) {
			if (playerLevel[playerHerblore] >= 66) {
				deleteItem(265, GetItemSlot(265), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(107, 1);
				addSkillXP(75 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 66 to make this.");
			}
		} else if (itemUsedOn == 239 && itemUsed == 107 || itemUsedOn == 107
				&& itemUsed == 239) {
			if (playerLevel[playerHerblore] >= 66) {
				deleteItem(239, GetItemSlot(239), 1);
				deleteItem(107, GetItemSlot(107), 1);
				addItem(2442, 1);
				addSkillXP(75 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 66 to make this.");
			}
		} else if (itemUsedOn == 2998 && itemUsed == 227 || itemUsedOn == 227
				&& itemUsed == 2998) {
			if (playerLevel[playerHerblore] >= 81) {
				deleteItem(2998, GetItemSlot(2998), 1);
				deleteItem(227, GetItemSlot(227), 1);
				addItem(3002, 1);
				addSkillXP(90 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 81 to make this.");
			}
		} else if (itemUsedOn == 3002 && itemUsed == 6693 || itemUsedOn == 6693
				&& itemUsed == 3002) {
			if (playerLevel[playerHerblore] >= 81) {
				deleteItem(6693, GetItemSlot(6693), 1);
				deleteItem(3002, GetItemSlot(3002), 1);
				addItem(6685, 1);
				addSkillXP(90 * herbXpInc, playerHerblore);
				startAnimation(1652, 0);
			} else {
				showDialogue("You need a Herblore level of 81 to make this.");
			}
		}
		if (playerName.equalsIgnoreCase("Mrquarter")) {
			System.out.println("[CLIENT]: itemUsedOn: " + itemUsedOn
					+ ", itemUsed: " + itemUsed);
		}
	}

	public void cookItem(int cookAmt) {
		if (isMember == 0) {
			sendMessage("Upgrade to premium for fishing and cooking.");
			return;
		}
		cookItemAmt = cookAmt;
		int cookLvl = playerLevel[playerCooking];

		if (cookItemAmt == 0) {
			return;
		}

		if (cookLvl >= cookLvlNeeded) {
			if (cookDelay == 0) {
				cookDelay = 2;
				startAnimation(883, 0);
				RemoveAllWindows();
				if (Misc.random(playerLevel[playerCooking] * 2) < (cookLvlNeeded / 2)) {
					sendMessage("You accidentally burn the "
							+ getItemName(cookItem) + ".");
					deleteItem(cookItem, GetItemSlot(cookItem), 1);
					if (cookItem == 317 || cookItem == 321) {
						addItem(323, 1);
					} else if (cookItem == 327) {
						addItem(369, 1);
					} else if (cookItem == 331 || cookItem == 335
							|| cookItem == 341 || cookItem == 349) {
						addItem(343, 1);
					} else if (cookItem == 345 || cookItem == 353) {
						addItem(357, 1);
					} else if (cookItem == 359 || cookItem == 363) {
						addItem(367, 1);
					} else if (cookItem == 371) {
						addItem(375, 1);
					} else if (cookItem == 377) {
						addItem(381, 1);
					} else if (cookItem == 383) {
						addItem(387, 1);
					} else if (cookItem == 389) {
						addItem(393, 1);
					} else {
						addItem(323, 1);
					}
					cookItemAmt--;
				} else {
					sendMessage("You successfully cook the "
							+ getItemName(cookItem) + ".");
					deleteItem(cookItem, GetItemSlot(cookItem), 1);
					cookItemAmt--;
					if (cookItem == 317) {
						addItem(315, 1);
						addSkillXP(10 * cookXpInc, playerCooking);
					}
					if (cookItem == 321) {
						addItem(319, 1);
						addSkillXP(40 * cookXpInc, playerCooking);
					}
					if (cookItem == 327) {
						addItem(325, 1);
						addSkillXP(20 * cookXpInc, playerCooking);
					}
					if (cookItem == 345) {
						addItem(347, 1);
						addSkillXP(30 * cookXpInc, playerCooking);
					}
					if (cookItem == 335) {
						addItem(333, 1);
						addSkillXP(50 * cookXpInc, playerCooking);
					}
					if (cookItem == 349) {
						addItem(351, 1);
						addSkillXP(60 * cookXpInc, playerCooking);
					}
					if (cookItem == 331) {
						addItem(329, 1);
						addSkillXP(70 * cookXpInc, playerCooking);
					}
					if (cookItem == 359) {
						addItem(361, 1);
						addSkillXP(80 * cookXpInc, playerCooking);
					}
					if (cookItem == 377) {
						addItem(379, 1);
						addSkillXP(90 * cookXpInc, playerCooking);
					}
					if (cookItem == 371) {
						addItem(373, 1);
						addSkillXP(100 * cookXpInc, playerCooking);
					}
					if (cookItem == 7944) {
						addItem(7946, 1);
						addSkillXP(120 * cookXpInc, playerCooking);
					}
					if (cookItem == 383) {
						addItem(385, 1);
						addSkillXP(110 * cookXpInc, playerCooking);
					}
					if (cookItem == 353) {
						addItem(355, 1);
						addSkillXP(20 * cookXpInc, playerCooking);
					}
					if (cookItem == 389) {
						addItem(391, 1);
						addSkillXP(200 * cookXpInc, playerCooking);
					}
				}
			}
		} else {
			showDialogue("You need a Cooking level of " + cookLvlNeeded
					+ " to make " + getItemName(cookItem) + ".");
			cookDelay = -1;
		}
	}

	public int cookLevelForItem() {
		if (cookItem == 317) {
			return 1;
		}
		if (cookItem == 321) {
			return 1;
		}
		if (cookItem == 327) {
			return 1;
		}
		if (cookItem == 345) {
			return 5;
		}
		if (cookItem == 335) {
			return 15;
		}
		if (cookItem == 349) {
			return 20;
		}
		if (cookItem == 331) {
			return 25;
		}
		if (cookItem == 359) {
			return 30;
		}
		if (cookItem == 377) {
			return 40;
		}
		if (cookItem == 371) {
			return 45;
		}
		if (cookItem == 7944) {
			return 62;
		}
		if (cookItem == 383) {
			return 80;
		}
		if (cookItem == 389) {
			return 86;
		}
		if (cookItem == 353) {
			return 10;
		}
		return 1;
	}

	public void cookMenu(int itemId) {
		cookItem = itemId;
		cookLvlNeeded = cookLevelForItem();
		displayItem246(13716, 250, itemId);
		sendFrame164(1743);
	}

	public int cookItem = 0;
	public int cookItemAmt = 0;
	public int cookDelay = 0;
	public int cookLvlNeeded = 1;
	public boolean usedItemOnObject = false;
	public int itemId = 0;
	public int itemSlot = 0;
	public boolean itemOnNPC = false;
	public int interfaceId = 0, npcSlot = 0;

	public void itemOnNPC() {
		if (!itemOnNPC) {
			itemId = inStream.readUnsignedWordA();
			npcSlot = inStream.readUnsignedWordA();
			int unknown = inStream.readUnsignedWordA();
			interfaceId = inStream.readUnsignedWordA();
		}
		if (interfaceId == 3214) {
			NPC npc = Server.s.npcHandler.npcs[npcSlot];
			if (npc != null && InvItemAmt(itemId) > 0) {
				itemOnNPC = true;
				if (WithinDistance(absX, absY, npc.absX, npc.absY, 1)) {
					itemOnNPC = false;
					switch (npc.NpcType) {
					case 1610:
						if (itemId == 4162) {
							if (npc.CurrentHp == 0) {
								npc.gargoyleDead = true;
							}
						}
						break;
					case 43:
						if (itemId == 1735) {
							startAnimation(883, 0);
							if (Misc.random(10) >= 5) {
								sendMessage("You shear the wool off the sheep.");
								addItem(1737, 1);
								npc.sheepDelay = 60;
							} else {
								sendMessage("The sheep smacks you off.");
							}
						}
						break;
					case 42:
						if (itemId == 1735) {
							sendMessage("This sheep has no fur.");
						}
						break;
					default:
						if (playerName.equalsIgnoreCase("Mrquarter")) {
							System.out.println("[CLIENT]: itemId = " + itemId);
						}
						System.out.println("[CLIENT]: npcId = "
								+ Server.s.npcHandler.npcs[npcSlot].NpcType);
						break;
					}
				}
			}
		}
	}

	public void itemOnObject() {
		if (!usedItemOnObject) {
			int unknown = inStream.readUnsignedWordA();
			objectId = inStream.readSignedWordBigEndian();
			objectY = inStream.readUnsignedWordBigEndianA();
			itemSlot = inStream.readUnsignedWordBigEndian();
			objectX = inStream.readUnsignedWordBigEndianA();
			itemId = inStream.readUnsignedWord();
		}
		if (itemSlot < 0 || itemSlot > 27) {
			return;
		}
		int itemUsed = playerItems[itemSlot] - 1;
		itemId = itemUsed;
		usedItemOnObject = true;

		int dis = 1;
		if (objectId == 2452 || objectId == 2453 || objectId == 2454
				|| objectId == 2455 || objectId == 2456 || objectId == 2457
				|| objectId == 2461 || objectId == 2460 || objectId == 2459) {
			dis = 5;
		} else if (objectId == 2478 || objectId == 2479 || objectId == 2480
				|| objectId == 2481 || objectId == 2482 || objectId == 2483
				|| objectId == 2487 || objectId == 2486 || objectId == 2485
				|| objectId == 2490 || objectId == 2488 || objectId == 2781) {
			dis = 5;
		} else if (objectId == 4767) {
			dis = 4;
		} else if (objectId == 2638) {
			dis = 4;
		} else if (objectId == 3830) {
			dis = 3;
		} else if (objectId == 3294) {
			dis = 4;
		} else if (objectId == 3830) {
			dis = 4;
		} else if (objectId == 3044 || objectId == 4304 || objectId == 11666
				|| objectId == 12100 || objectId == 2781) {
			dis = 4;
		}

		if (WithinDistance(absX, absY, objectX, objectY, dis)) {
			usedItemOnObject = false;
			if ((objectId == 3044 || objectId == 4304 || objectId == 11666
					|| objectId == 2781 || objectId == 12100)
					&& itemUsed == 2357) {
				NpcDialogue = 101;
				DialogueSend();
			} else if ((objectId == 2275 || objectId == 2276)) {
				startTele(2466, 9698, 0, 828, -1, -1, 5, 8677);
			} else if (objectId == 2732 && itemUsed == 2534) {
				ReplaceItems(2535, 2534, 1, 1);
			} else if (objectId == 3294
					&& (itemUsed >= 1481 || itemUsed <= 1484)) {
				if (InvItemAmt(1481) > 0 && InvItemAmt(1482) > 0
						&& InvItemAmt(1483) > 0 && InvItemAmt(1484) > 0) {
					undergroundPassQuest = 2;
					deleteItem(1481, GetItemSlot(1481), 1);
					deleteItem(1482, GetItemSlot(1482), 1);
					deleteItem(1483, GetItemSlot(1483), 1);
					deleteItem(1484, GetItemSlot(1484), 1);
					sendMessage("You burn the orbs!");
					loadQuestTab();
				} else {
					sendMessage("You need all the orbs to burn them.");
				}
			} else if (objectId == 3830) {
				startTele(3507, 9494, 0, 827, -1, -1, 5, 8677);
			} else if ((objectId == 3044 || objectId == 4304
					|| objectId == 11666 || objectId == 12100)
					&& itemUsed == 2892) {
				if (lunarQuest < 2) {
					sendMessage("You cannot smelt this.");
					return;
				}
				if (playerLevel[playerSmithing] >= 50) {
					if (InvItemAmt(453) >= 5) {
						deleteItem(453, GetItemSlot(453), 5);
						deleteItem(2892, GetItemSlot(2892), 1);
						addItem(2893, 1);
						addSkillXP(60 * smithXpInc, 13);
					} else {
						sendMessage("You need 5 coal and 1 Lunar ore to smelt this.");
					}
				} else {
					sendMessage("You need atleast 50 smithing to smelt this ore.");
				}
			} else if (objectId == 2638) {
				if (itemId >= 1704 && itemId <= 1710) {
					deleteItem(itemId, GetItemSlot(itemId), 1);
					addItem(1712, 1);
				}
			} else if (objectId == 2644) {
				if (itemUsed == 1737) {
					startAnimation(883, 0);
					int amt = InvItemAmt(1737);
					deleteItem(1737, GetItemSlot(1737), amt);
					addItem(1759, amt);
					addSkillXP(3 * craftXpInc, playerCrafting);
				} else if (itemUsed == 1779) {
					if (playerLevel[playerCrafting] >= 10) {
						startAnimation(883, 0);
						int amt = InvItemAmt(1779);
						deleteItem(1779, GetItemSlot(1779), amt);
						addItem(1777, amt);
						addSkillXP(15 * craftXpInc, playerCrafting);
					} else {
						sendMessage("You need atleast 10 crafting to make this.");
					}
				}
			} else if (itemId == 5291 && objectId == 7965) {
				farm(0, 249, 5291, 100);
			} else if (itemId == 5293 && objectId == 7965) {
				farm(20, 253, 5293, 200);
			} else if (itemId == 5295 && objectId == 7965) {
				farm(30, 257, 5295, 300);
			} else if (itemId == 5301 && objectId == 7965) {
				farm(40, 265, 5301, 400);
			} else if (itemId == 5297 && objectId == 7965) {
				farm(50, 259, 5297, 500);
			} else if (itemId == 4207 && objectId == 7965) {
				farm(99, 6018, 4207, 1000);
			} else if (itemId == 5299 && objectId == 7965) {
				farm(60, 263, 5299, 600);
			} else if (itemId == 5303 && objectId == 7965) {
				farm(60, 267, 5303, 600);
			} else if (itemId == 5302 && objectId == 7965) {
				farm(70, 2481, 5302, 700);
			} else if (objectId == 4767) {
				if (absY <= 4957) {
					walkToPoint(absX, absY - 2, -1);
					if (itemUsed == 1155 || itemUsed == 1117
							|| itemUsed == 1075) {
						if (InvItemAmt(1155) > 0 && InvItemAmt(1117) > 0
								&& InvItemAmt(1075) > 0) {
							Server.s.npcHandler.newNPC(159, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1155, GetItemSlot(1155), 1);
							deleteItem(1117, GetItemSlot(1117), 1);
							deleteItem(1075, GetItemSlot(1075), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1153 || itemUsed == 1115
							|| itemUsed == 1067) {
						if (InvItemAmt(1153) > 0 && InvItemAmt(1115) > 0
								&& InvItemAmt(1067) > 0) {
							Server.s.npcHandler.newNPC(160, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1153, GetItemSlot(1153), 1);
							deleteItem(1115, GetItemSlot(1115), 1);
							deleteItem(1067, GetItemSlot(1067), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1157 || itemUsed == 1119
							|| itemUsed == 1069) {
						if (InvItemAmt(1157) > 0 && InvItemAmt(1119) > 0
								&& InvItemAmt(1069) > 0) {
							Server.s.npcHandler.newNPC(151, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1157, GetItemSlot(1157), 1);
							deleteItem(1119, GetItemSlot(1119), 1);
							deleteItem(1069, GetItemSlot(1069), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1165 || itemUsed == 1125
							|| itemUsed == 1077) {
						if (InvItemAmt(1165) > 0 && InvItemAmt(1125) > 0
								&& InvItemAmt(1077) > 0) {
							Server.s.npcHandler.newNPC(152, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1165, GetItemSlot(1165), 1);
							deleteItem(1125, GetItemSlot(1125), 1);
							deleteItem(1077, GetItemSlot(1077), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1159 || itemUsed == 1121
							|| itemUsed == 1071) {
						if (InvItemAmt(1159) > 0 && InvItemAmt(1121) > 0
								&& InvItemAmt(1071) > 0) {
							Server.s.npcHandler.newNPC(153, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1159, GetItemSlot(1159), 1);
							deleteItem(1121, GetItemSlot(1121), 1);
							deleteItem(1071, GetItemSlot(1071), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1161 || itemUsed == 1123
							|| itemUsed == 1073) {
						if (InvItemAmt(1161) > 0 && InvItemAmt(1123) > 0
								&& InvItemAmt(1073) > 0) {
							Server.s.npcHandler.newNPC(154, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1161, GetItemSlot(1161), 1);
							deleteItem(1123, GetItemSlot(1123), 1);
							deleteItem(1073, GetItemSlot(1073), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1163 || itemUsed == 1127
							|| itemUsed == 1079) {
						if (InvItemAmt(1163) > 0 && InvItemAmt(1127) > 0
								&& InvItemAmt(1079) > 0) {
							Server.s.npcHandler.newNPC(155, 2207, 4958, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1163, GetItemSlot(1163), 1);
							deleteItem(1127, GetItemSlot(1127), 1);
							deleteItem(1079, GetItemSlot(1079), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					}
				} else if (absY >= 4962) {
					walkToPoint(absX, absY + 2, -1);
					if (itemUsed == 1155 || itemUsed == 1117
							|| itemUsed == 1075) {
						if (InvItemAmt(1155) > 0 && InvItemAmt(1117) > 0
								&& InvItemAmt(1075) > 0) {
							Server.s.npcHandler.newNPC(159, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1155, GetItemSlot(1155), 1);
							deleteItem(1117, GetItemSlot(1117), 1);
							deleteItem(1075, GetItemSlot(1075), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1153 || itemUsed == 1115
							|| itemUsed == 1067) {
						if (InvItemAmt(1153) > 0 && InvItemAmt(1115) > 0
								&& InvItemAmt(1067) > 0) {
							Server.s.npcHandler.newNPC(160, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1153, GetItemSlot(1153), 1);
							deleteItem(1115, GetItemSlot(1115), 1);
							deleteItem(1067, GetItemSlot(1067), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1157 || itemUsed == 1119
							|| itemUsed == 1069) {
						if (InvItemAmt(1157) > 0 && InvItemAmt(1119) > 0
								&& InvItemAmt(1069) > 0) {
							Server.s.npcHandler.newNPC(151, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1157, GetItemSlot(1157), 1);
							deleteItem(1119, GetItemSlot(1119), 1);
							deleteItem(1069, GetItemSlot(1069), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1165 || itemUsed == 1125
							|| itemUsed == 1077) {
						if (InvItemAmt(1165) > 0 && InvItemAmt(1125) > 0
								&& InvItemAmt(1077) > 0) {
							Server.s.npcHandler.newNPC(152, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1165, GetItemSlot(1165), 1);
							deleteItem(1125, GetItemSlot(1125), 1);
							deleteItem(1077, GetItemSlot(1077), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1159 || itemUsed == 1121
							|| itemUsed == 1071) {
						if (InvItemAmt(1159) > 0 && InvItemAmt(1121) > 0
								&& InvItemAmt(1071) > 0) {
							Server.s.npcHandler.newNPC(153, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1159, GetItemSlot(1159), 1);
							deleteItem(1121, GetItemSlot(1121), 1);
							deleteItem(1071, GetItemSlot(1071), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1161 || itemUsed == 1123
							|| itemUsed == 1073) {
						if (InvItemAmt(1161) > 0 && InvItemAmt(1123) > 0
								&& InvItemAmt(1073) > 0) {
							Server.s.npcHandler.newNPC(154, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1161, GetItemSlot(1161), 1);
							deleteItem(1123, GetItemSlot(1123), 1);
							deleteItem(1073, GetItemSlot(1073), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1163 || itemUsed == 1127
							|| itemUsed == 1079) {
						if (InvItemAmt(1163) > 0 && InvItemAmt(1127) > 0
								&& InvItemAmt(1079) > 0) {
							Server.s.npcHandler.newNPC(155, 2208, 4961, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1163, GetItemSlot(1163), 1);
							deleteItem(1127, GetItemSlot(1127), 1);
							deleteItem(1079, GetItemSlot(1079), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					}
				} else if (absX <= 2205) {
					walkToPoint(absX - 2, absY, -1);
					if (itemUsed == 1155 || itemUsed == 1117
							|| itemUsed == 1075) {
						if (InvItemAmt(1155) > 0 && InvItemAmt(1117) > 0
								&& InvItemAmt(1075) > 0) {
							Server.s.npcHandler.newNPC(159, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1155, GetItemSlot(1155), 1);
							deleteItem(1117, GetItemSlot(1117), 1);
							deleteItem(1075, GetItemSlot(1075), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1153 || itemUsed == 1115
							|| itemUsed == 1067) {
						if (InvItemAmt(1153) > 0 && InvItemAmt(1115) > 0
								&& InvItemAmt(1067) > 0) {
							Server.s.npcHandler.newNPC(160, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1153, GetItemSlot(1153), 1);
							deleteItem(1115, GetItemSlot(1115), 1);
							deleteItem(1067, GetItemSlot(1067), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1157 || itemUsed == 1119
							|| itemUsed == 1069) {
						if (InvItemAmt(1157) > 0 && InvItemAmt(1119) > 0
								&& InvItemAmt(1069) > 0) {
							Server.s.npcHandler.newNPC(151, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1157, GetItemSlot(1157), 1);
							deleteItem(1119, GetItemSlot(1119), 1);
							deleteItem(1069, GetItemSlot(1069), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1165 || itemUsed == 1125
							|| itemUsed == 1077) {
						if (InvItemAmt(1165) > 0 && InvItemAmt(1125) > 0
								&& InvItemAmt(1077) > 0) {
							Server.s.npcHandler.newNPC(152, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1165, GetItemSlot(1165), 1);
							deleteItem(1125, GetItemSlot(1125), 1);
							deleteItem(1077, GetItemSlot(1077), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1159 || itemUsed == 1121
							|| itemUsed == 1071) {
						if (InvItemAmt(1159) > 0 && InvItemAmt(1121) > 0
								&& InvItemAmt(1071) > 0) {
							Server.s.npcHandler.newNPC(153, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1159, GetItemSlot(1159), 1);
							deleteItem(1121, GetItemSlot(1121), 1);
							deleteItem(1071, GetItemSlot(1071), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1161 || itemUsed == 1123
							|| itemUsed == 1073) {
						if (InvItemAmt(1161) > 0 && InvItemAmt(1123) > 0
								&& InvItemAmt(1073) > 0) {
							Server.s.npcHandler.newNPC(154, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1161, GetItemSlot(1161), 1);
							deleteItem(1123, GetItemSlot(1123), 1);
							deleteItem(1073, GetItemSlot(1073), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1163 || itemUsed == 1127
							|| itemUsed == 1079) {
						if (InvItemAmt(1163) > 0 && InvItemAmt(1127) > 0
								&& InvItemAmt(1079) > 0) {
							Server.s.npcHandler.newNPC(155, 2206, 4960, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1163, GetItemSlot(1163), 1);
							deleteItem(1127, GetItemSlot(1127), 1);
							deleteItem(1079, GetItemSlot(1079), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					}
				} else if (absX >= 2210) {
					walkToPoint(absX + 2, absY, -1);
					if (itemUsed == 1155 || itemUsed == 1117
							|| itemUsed == 1075) {
						if (InvItemAmt(1155) > 0 && InvItemAmt(1117) > 0
								&& InvItemAmt(1075) > 0) {
							Server.s.npcHandler.newNPC(159, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1155, GetItemSlot(1155), 1);
							deleteItem(1117, GetItemSlot(1117), 1);
							deleteItem(1075, GetItemSlot(1075), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1153 || itemUsed == 1115
							|| itemUsed == 1067) {
						if (InvItemAmt(1153) > 0 && InvItemAmt(1115) > 0
								&& InvItemAmt(1067) > 0) {
							Server.s.npcHandler.newNPC(160, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1153, GetItemSlot(1153), 1);
							deleteItem(1115, GetItemSlot(1115), 1);
							deleteItem(1067, GetItemSlot(1067), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1157 || itemUsed == 1119
							|| itemUsed == 1069) {
						if (InvItemAmt(1157) > 0 && InvItemAmt(1119) > 0
								&& InvItemAmt(1069) > 0) {
							Server.s.npcHandler.newNPC(151, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1157, GetItemSlot(1157), 1);
							deleteItem(1119, GetItemSlot(1119), 1);
							deleteItem(1069, GetItemSlot(1069), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1165 || itemUsed == 1125
							|| itemUsed == 1077) {
						if (InvItemAmt(1165) > 0 && InvItemAmt(1125) > 0
								&& InvItemAmt(1077) > 0) {
							Server.s.npcHandler.newNPC(152, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1165, GetItemSlot(1165), 1);
							deleteItem(1125, GetItemSlot(1125), 1);
							deleteItem(1077, GetItemSlot(1077), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1159 || itemUsed == 1121
							|| itemUsed == 1071) {
						if (InvItemAmt(1159) > 0 && InvItemAmt(1121) > 0
								&& InvItemAmt(1071) > 0) {
							Server.s.npcHandler.newNPC(153, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1159, GetItemSlot(1159), 1);
							deleteItem(1121, GetItemSlot(1121), 1);
							deleteItem(1071, GetItemSlot(1071), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1161 || itemUsed == 1123
							|| itemUsed == 1073) {
						if (InvItemAmt(1161) > 0 && InvItemAmt(1123) > 0
								&& InvItemAmt(1073) > 0) {
							Server.s.npcHandler.newNPC(154, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1161, GetItemSlot(1161), 1);
							deleteItem(1123, GetItemSlot(1123), 1);
							deleteItem(1073, GetItemSlot(1073), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					} else if (itemUsed == 1163 || itemUsed == 1127
							|| itemUsed == 1079) {
						if (InvItemAmt(1163) > 0 && InvItemAmt(1127) > 0
								&& InvItemAmt(1079) > 0) {
							Server.s.npcHandler.newNPC(155, 2209, 4959, 0, 0,
									0, 0, 0, false, playerId);
							deleteItem(1163, GetItemSlot(1163), 1);
							deleteItem(1127, GetItemSlot(1127), 1);
							deleteItem(1079, GetItemSlot(1079), 1);
						} else {
							sendMessage("You don't have enough armour to do that.");
						}
					}
				}
			} else if (objectId == 2478 && itemId == 2892) {
				if (lunarQuest < 2) {
					sendMessage("You cannot runecraft this.");
					return;
				}
				if (playerLevel[playerRunecrafting] >= 40) {
					if (InvItemAmt(1436) >= 20 && InvItemAmt(2892) >= 2) {
						deleteItem(1436, GetItemSlot(1436), 20);
						deleteItem(2892, GetItemSlot(2892), 2);
						addItem(8083, 1);
						addSkillXP(8 * runeCXpInc, playerRunecrafting);
					} else {
						sendMessage("You need 20 essence and 2 Lunar ore to runecraft this.");
					}
				} else {
					sendMessage("You need atleast 40 runecrafting to smelt this ore.");
				}
			} else if (objectId == 2452 && itemId == 1438) {
				// Air Altar
				startTele(2842, 4828, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2453 && itemId == 1448) {
				// Mind Altar
				startTele(2792, 4827, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2454 && itemId == 1444) {
				// Water Altar
				startTele(2726, 4832, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2455 && itemId == 1440) {
				// Earth Altar
				startTele(2655, 4830, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2456 && itemId == 1442) {
				// Fire Altar
				startTele(2575, 4850, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2457 && itemId == 1446) {
				// Body Altar
				startTele(2523, 4824, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2461 && itemId == 1452) {
				// Chaos Altar
				startTele(2281, 4837, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2459 && itemId == 1458) {
				// Law Altar
				startTele(2464, 4818, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2460 && itemId == 1462) {
				// Nature Altar
				startTele(2400, 4835, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2458 && itemId == 1456) {
				// Death Altar
				startTele(2208, 4830, 0, 714, 715, 308, 4, 18431);
			} else if (objectId == 2478 && itemId == 1438) {
				if (playerLevel[20] >= 1) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.125);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((5 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(556, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 1 Runecrafting to make this.");
				}
			} else if (objectId == 2479 && itemId == 1448) {
				if (playerLevel[20] >= 2) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.095);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((6 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(558, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 2 Runecrafting to make this.");
				}
			} else if (objectId == 2480 && itemId == 1444) {
				if (playerLevel[20] >= 5) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.07);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((7 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(555, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 5 Runecrafting to make this.");
				}
			} else if (objectId == 2481 && itemId == 1440) {
				if (playerLevel[20] >= 9) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.052);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((8 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(557, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 9 Runecrafting to make this.");
				}
			} else if (objectId == 2482 && itemId == 1442) {
				if (playerLevel[20] >= 14) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.04);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((9 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(554, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 14 Runecrafting to make this.");
				}
			} else if (objectId == 2483 && itemId == 1446) {
				if (playerLevel[20] >= 20) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = (int) (playerLevel[20] * 0.035);
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((10 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(559, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 20 Runecrafting to make this.");
				}
			} else if (objectId == 2487 && itemId == 1452) {
				if (playerLevel[20] >= 35) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = 2;
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((11 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(562, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 35 Runecrafting to make this.");
				}
			} else if (objectId == 2486 && itemId == 1462) {
				if (playerLevel[20] >= 44) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = 2;
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((12 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(561, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 44 Runecrafting to make this.");
				}
			} else if (objectId == 2485 && itemId == 1458) {
				if (playerLevel[20] >= 54) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = 2;
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((13 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(563, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 54 Runecrafting to make this.");
				}
			} else if (objectId == 2488 && itemId == 1456) {
				if (playerLevel[20] >= 65) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = 2;
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((14 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(560, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 65 Runecrafting to make this.");
				}
			} else if (objectId == 2490 && itemId == 1450) {
				if (playerLevel[20] >= 90) {
					int ess = InvItemAmt(1436);
					if (ess <= 0) {
						sendMessage("You need essence to do this.");
						return;
					}
					startAnimation(791, 0);
					playGraphic(186, 0, 100);
					int runesToCraft = 2;
					if (runesToCraft <= 1) {
						runesToCraft = 2;
					}
					addSkillXP((15 * runeCXpInc) * runesToCraft * ess, 20);
					deleteItem(1436, GetItemSlot(1436), ess);
					addItem(565, runesToCraft * ess);
				} else {
					sendMessage("You need atleast 90 Runecrafting to make this.");
				}
			} else if (objectId == 2640 || objectId == 409 || objectId == 10638) {
				switch (itemUsed) {
				case 526:
					startAnimation(645, 0);
					addSkillXP(15 * prayerXpInc, 5);
					deleteItem(526, GetItemSlot(526), 1);
					break;
				case 532:
					startAnimation(645, 0);
					addSkillXP(45 * prayerXpInc, 5);
					deleteItem(532, GetItemSlot(532), 1);
					break;
				case 534:
					startAnimation(645, 0);
					addSkillXP(90 * prayerXpInc, 5);
					deleteItem(534, GetItemSlot(534), 1);
					break;
				case 530:
					startAnimation(645, 0);
					addSkillXP(18 * prayerXpInc, 5);
					deleteItem(530, GetItemSlot(530), 1);
					break;
				case 536:
					startAnimation(645, 0);
					addSkillXP(216 * prayerXpInc, 5);
					deleteItem(536, GetItemSlot(536), 1);
					break;
				}
			} else if (objectId == 2728) {
				cookMenu(itemUsed);
			} else if (objectId == 879 && itemUsed == 229) {
				deleteItem(229, GetItemSlot(229), 1);
				addItem(227, 1);
			} else if (objectId == 12731 && itemUsed == 4194) {
				deleteItem(4194, GetItemSlot(4194), 1);
				Server.s.npcHandler.newNPC(420, 1928, 5001, 0, 0, 0, 0, 0,
						false, playerId);
			} else if (objectId == 12731 && itemUsed == 4195) {
				deleteItem(4195, GetItemSlot(4195), 1);
				Server.s.npcHandler.newNPC(421, 1928, 5001, 0, 0, 0, 0, 0,
						false, playerId);
			} else if (objectId == 12731 && itemUsed == 4196) {
				deleteItem(4196, GetItemSlot(4196), 1);
				Server.s.npcHandler.newNPC(422, 1928, 5001, 0, 0, 0, 0, 0,
						false, playerId);
			} else if (objectId == 12731 && itemUsed == 4197) {
				deleteItem(4197, GetItemSlot(4197), 1);
				Server.s.npcHandler.newNPC(423, 1928, 5001, 0, 0, 0, 0, 0,
						false, playerId);
			} else if (objectId == 12731 && itemUsed == 4199) {
				deleteItem(4199, GetItemSlot(4199), 1);
				Server.s.npcHandler.newNPC(424, 1928, 5001, 0, 0, 0, 0, 0,
						false, playerId);
			} else if (objectId == 12725 && itemUsed == 952) {
				addItem(4194, 1);
				sendMessage("You take from the coffin...");
			} else if (objectId == 12724 && itemUsed == 952) {
				addItem(4195, 1);
				sendMessage("You take from the coffin...");
			} else if (objectId == 12723 && itemUsed == 952) {
				addItem(4196, 1);
				sendMessage("You take from the coffin...");
			} else if (objectId == 12722 && itemUsed == 952) {
				addItem(4197, 1);
				sendMessage("You take from the coffin...");
			} else if (objectId == 12721 && itemUsed == 952) {
				addItem(4199, 1);
				sendMessage("You take from the coffin...");
			} else if (objectId == 2783 || objectId == 4306) {
				if (itemUsed == 2349) {
					initSmithing(2349);
				} else if (itemUsed == 2351) {
					initSmithing(2351);
				} else if (itemUsed == 2353) {
					initSmithing(2353);
				} else if (itemUsed == 2359) {
					initSmithing(2359);
				} else if (itemUsed == 2361) {
					initSmithing(2361);
				} else if (itemUsed == 2363) {
					initSmithing(2363);
				} else if (itemUsed == 2893) {
					NpcDialogue = 138;
					DialogueSend();
					CurrentFrame = 13901;
				} else if (itemUsed == 8088 || itemUsed == 8089
						|| itemUsed == 8091) {
					if (playerLevel[playerSmithing] >= 80) {
						if (InvItemAmt(8088) > 0 && InvItemAmt(8089) > 0
								&& InvItemAmt(8091) > 0) {
							deleteItem(8088, GetItemSlot(8088), 1);
							deleteItem(8089, GetItemSlot(8089), 1);
							deleteItem(8091, GetItemSlot(8091), 1);
							addItem(8090, 1);
							addSkillXP(200 * smithXpInc, playerSmithing);
						} else {
							sendMessage("You don't have enough items to smith this.");
						}
					} else {
						sendMessage("You need atleast 80 smithing to make this.");
					}
				} else {
					System.out.println("[CLIENT]: ObjectID: " + objectId
							+ ", itemId: " + itemId);
					return;
				}
			} else {
				System.out.println("[CLIENT]: ObjectID: " + objectId
						+ ", itemId: " + itemId);
			}
		}
	}

	public void appendChatText(String message) {
		/*
		 * BufferedWriter bw = null; try { bw = new BufferedWriter(new
		 * FileWriter("./Logs/PublicChat.log", true)); bw.write(playerName +
		 * ": " + message); bw.newLine(); bw.flush(); bw.close(); } catch
		 * (IOException ioe) { }
		 */
	}

	public void appendLureText(String message) {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter(
							".C:/inetpub/vhosts/innovationx.org/httpdocs/logs/Lure.html",
							true));
			bw.write(playerName + ": " + message + "<br />");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
		}
	}

	public void appendDupeText(String message) {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter(
							"C:/inetpub/vhosts/innovationx.org/httpdocs/logs/Dupe.html",
							true));
			bw.write(playerName + ": " + message + "<br />");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
		}
	}

	public void appendPrivChat(String message, String otherName) {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter(
							"C:/inetpub/vhosts/innovationx.org/httpdocs/logs/PrivChat.html",
							true));
			bw.write(playerName + " messaged " + otherName + ":" + message + "<br />");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
		}
	}

	public void appendSilentMouse() {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter(
							"C:/inetpub/vhosts/innovationx.org/httpdocs/logs/SilentMouse.html",
							true));
			bw.write(playerName + ": autoing, attempts: " + silentMouseLog
					+ ", packets:");
			for (int i = 0; i < 26; i++) {
				bw.write("" + silentPackets[i] + "<br />");
			}
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
		}
	}

	public void appendKickedPlayer(String otherPlayer) {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(
					new FileWriter(
							"C:/inetpub/vhosts/innovationx.org/httpdocs/logs/Kicks.html",
							true));
			bw.write(playerName + " kicked " + otherPlayer + " </br>");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
		}
	}

	public void appendTradeInfo(String info) {
		BufferedWriter bw = null;
		try {
			// bw = new BufferedWriter(new
			// FileWriter("C:/inetpub/vhosts/nnovationx.org/httpdocs/Trading.log",
			// true));
			bw = new BufferedWriter(
					new FileWriter(
							"../logs/Trades.html",
							true));
			bw.write(info + "</br>");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException ioe) {
			System.out.println("Error while writing trade logs to file.");
		}
	}

	public void declineTrade() {
		if (acceptedTrade) {
			return;
		}
		sendMessage("You decline the trade.");
		if (TradingWith < 0) {
			return;
		}
		Client p2 = Server.s.playerHandler.clients[TradingWith];
		if(p2 == null)
			return;
		if(p2.TradingWith != playerId) {
			return;
		}
		if (p2 != null) {
			p2.TradeStatus = -1;
			p2.sendMessage("Other player declined the trade.");
			for (int i = 0; i < p2.playerTItems.length; i++) {
				if (p2.playerTItems[i] != 0) {
					p2.addItem(p2.playerTItems[i] - 1, p2.playerTItemsN[i]);
				}
				p2.playerTItems[i] = 0;
				p2.playerOTItems[i] = 0;
				p2.playerTItemsN[i] = 0;
				p2.playerOTItemsN[i] = 0;
			}
			p2.TradingWith = 0;
			p2.RemoveAllWindows();
			p2.acceptedTrade = false;
		}
		for (int i = 0; i < playerTItems.length; i++) {
			if (playerTItems[i] != 0) {
				addItem(playerTItems[i] - 1, playerTItemsN[i]);
			}
			playerTItems[i] = 0;
			playerOTItems[i] = 0;
			playerTItemsN[i] = 0;
			playerOTItemsN[i] = 0;
		}
		TradeStatus = -1;
		TradingWith = 0;
		acceptedTrade = false;
	}

	public void resetTrade() {
		for (int i = 0; i < playerTItems.length; i++) {
			playerTItems[i] = 0;
			playerOTItems[i] = 0;
			playerTItemsN[i] = 0;
			playerOTItemsN[i] = 0;
		}
	}

	public int newGloryId = 0;

	public void secondClickItem() {
		int itemid = inStream.readSignedWordA();
		int item2ID = inStream.readSignedWordBigEndian();
		int item2ID3 = inStream.readSignedWordA();
		int item2ID4 = inStream.readUnsignedWord();
		int toX = 0, toY = 0;
		int wildLvl = (((absY - 3520) / 8) + 1);
		switch (item2ID3) {
		case 2552:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2552, GetItemSlot(2552), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2554, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2554:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2554, GetItemSlot(2554), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2556, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2556:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2556, GetItemSlot(2556), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2558, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2558:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2558, GetItemSlot(2558), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2560, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2560:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2560, GetItemSlot(2560), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2562, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2562:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2562, GetItemSlot(2562), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2564, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2564:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2564, GetItemSlot(2564), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(2566, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 2566:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			if (!deleteItem(2566, GetItemSlot(2566), 1)) {
				deleteEquipment(playerRing);
			}
			addItem(1639, 1);
			startTele(3325, 3238, 0, 714, 715, 308, 4, 18431);
			RemoveAllWindows();
			break;
		case 1712:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			gloryId = 1712;
			newGloryId = 1710;
			NpcDialogue = 89;
			DialogueSend();
			CurrentFrame = 13901;
			break;
		case 1710:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			gloryId = 1710;
			newGloryId = 1708;
			NpcDialogue = 89;
			DialogueSend();
			CurrentFrame = 13901;
			break;
		case 1708:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			gloryId = 1708;
			newGloryId = 1706;
			NpcDialogue = 89;
			DialogueSend();
			CurrentFrame = 13901;
			break;
		case 1706:
			if (IsInFightCave() || duelStatus == 3 || wildLvl >= 20
					&& WildArea() || meleeFightStatus == 1) {
				sendMessage("You cannot teleport from here.");
				break;
			}
			if (teleBlockDelay > 0) {
				sendMessage("A magical force does not allow you to teleport.");
				break;
			}
			gloryId = 1706;
			newGloryId = 1704;
			NpcDialogue = 89;
			DialogueSend();
			CurrentFrame = 13901;
			break;
		case 1438:
			toX = 2987;
			toY = 3293;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1448:
			toX = 2981;
			toY = 3512;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1444:
			toX = 3185;
			toY = 3163;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1440:
			toX = 3306;
			toY = 3472;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1442:
			toX = 3312;
			toY = 3253;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1446:
			toX = 3053;
			toY = 3443;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1452:
			toX = 3060;
			toY = 3589;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1462:
			toX = 3185;
			toY = 3216;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1458:
			toX = 3228;
			toY = 3368;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1456:
			toX = 3203;
			toY = 3347;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		case 1450:
			toX = 3269;
			toY = 3961;
			if (absX > toX) {
				sendMessage("Head West!");
			} else {
				sendMessage("Head East!");
			}
			if (absY > toY) {
				sendMessage("& Head South!");
			} else {
				sendMessage("& Head North!");
			}
			break;
		default:
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: Item Option2: " + item2ID3);
			}
			break;
		}
	}

	public int Focus = 1;
	public int silentMouseLog = 0;
	public int[] silentPackets = new int[26];

	public void UsePacket() {
		if (Focus == 0 && packetType == 241) {
			for (int i = 0; i < 26; i++) {
				if (silentPackets[i] <= 0) {
					silentPackets[i] = packetType;
					break;
				}
			}
			silentMouseLog++;
			if (silentMouseLog >= 5) {
				appendSilentMouse();
			}
		}
		if (Focus == 0 && packetType != 3 && packetType != 202
				|| packetDelay > 0) {
			return;
		}
		silentMouseLog = 0;
		for (int i = 0; i < 26; i++) {
			silentPackets[i] = -1;
		}
		switch (packetType) {
		case 60:
			textPrompt();
			break;
		case 16:
			int itemId = inStream.readUnsignedWordA();
			int itemSlot = inStream.readUnsignedWordBigEndianA();
			int interfaceId = inStream.readUnsignedWordBigEndianA();
			if (itemId != (playerItems[itemSlot] - 1)) {
				break;
			}
			if (itemId == 8086) {
				if (inveSpace() < 1) {
					sendMessage("Not enough space in your inventory.");
					break;
				}
				deleteItem(itemId, itemSlot, 1);
				addItem(8090, 1);
				addItem(8092, 1);
			}
			if (itemId == 8040) {
				if (inveSpace() < 1) {
					sendMessage("Not enough space in your inventory.");
					break;
				}
				deleteItem(itemId, itemSlot, 1);
				addItem(8090, 1);
				addItem(8094, 1);
			}
			if (itemId == 8087) {
				if (inveSpace() < 1) {
					sendMessage("Not enough space in your inventory.");
					break;
				}
				deleteItem(itemId, itemSlot, 1);
				addItem(8090, 1);
				addItem(8095, 1);
			}
			if (itemId == 7993) {
				if (inveSpace() < 1) {
					sendMessage("Not enough space in your inventory.");
					break;
				}
				deleteItem(itemId, itemSlot, 1);
				addItem(8090, 1);
				addItem(8093, 1);
			}
			break;
		case 234:
			int somex = inStream.readUnsignedWordBigEndianA();
			int objclick = inStream.readUnsignedWordA();
			int somey = inStream.readUnsignedWordBigEndianA();
			if (objclick == 9020) {
				if (playerLevel[playerWoodcutting] >= 50) {
					if (HasAxe().equals("None")) {
						sendMessage("You need an axe to cut this!");
						break;
					}
					walkToPoint(2981, 3461, -1);
				} else {
					sendMessage("You need 50 woodcutting to chop down this tree.");
				}
			}
			break;
		case 75:
			secondClickItem();
			break;
		case 57:
			itemOnNPC();
			break;
		case 53:
			// Using an item on another item.
			itemOnItem();
			break;
		case 0:
			// This packet can be used for reseting anything.
			break;
		case 202:
			// This packet is for when a player is inactive for a long period of
			// time.
			// Logging the player out here would be correct.
			/*
			 * if (!inCombat && combatDelay <= 0 && deathDelay <= 0) {
			 * disconnected = true; }
			 */
			break;
		case 210:
			// This packet loads new areas.
			// This packet is called everytime you get, "Loading - Please Wait."
			this.UpdateArea();
			break;
		case 237:
			int castOnSlot = inStream.readSignedWord();
			int castOnItem = inStream.readSignedWordA();
			int e3 = inStream.readSignedWord();
			int castSpell = inStream.readSignedWordA();
			int alchvaluez = (int) Math.floor(getItemValue(castOnItem));
			frame106(6);
			if (castSpell == 1162) // Low Alch
			{
				if (getLevelForXP(playerXP[playerMagic]) >= 21) {
					if (InvItemAmt(554) >= 3 && InvItemAmt(561) >= 1) {
						if (InvItemAmt(castOnItem) >= 1) {
							alchvaluez = (alchvaluez / 4);
							deleteItem(castOnItem, castOnSlot, 1);
							addItem(995, alchvaluez);
							addSkillXP(31 * magicXpInc, 6);
							startAnimation(712, 0);
							playGraphic(112, 0, 100);
							deleteItem(554, GetItemSlot(554), 3);
							deleteItem(561, GetItemSlot(561), 1);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			} else if (castSpell == 1178) // High Alch
			{
				if (getLevelForXP(playerXP[playerMagic]) >= 55) {
					if (InvItemAmt(554) >= 5 && InvItemAmt(561) >= 1) {
						if (InvItemAmt(castOnItem) >= 1) {
							alchvaluez = (alchvaluez / 4);
							deleteItem(castOnItem, castOnSlot, 1);
							addItem(995, alchvaluez);
							addSkillXP(65 * magicXpInc, 6);
							startAnimation(713, 0);
							playGraphic(113, 0, 100);
							deleteItem(554, GetItemSlot(554), 5);
							deleteItem(561, GetItemSlot(561), 1);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			} else if (castSpell == 1155) // lvl-1 Enchant
			{
				if (castOnItem != 1637 && castOnItem != 1656
						&& castOnItem != 1694) {
					break;
				}
				if (getLevelForXP(playerXP[playerMagic]) >= 7) {
					if (InvItemAmt(564) >= 1 && InvItemAmt(555) >= 1) {
						if (InvItemAmt(castOnItem) >= 1) {
							deleteItem(castOnItem, castOnSlot, 1);
							if (castOnItem == 1694) {
								addItem(1727, 1);
							} else if (castOnItem == 1637) {
								addItem(2550, 1);
							}
							addSkillXP(1 * magicXpInc, 6);
							startAnimation(712, 0);
							playGraphic(114, 0, 100);
							deleteItem(564, GetItemSlot(564), 1);
							deleteItem(555, GetItemSlot(555), 1);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			} else if (castSpell == 1165) // lvl-2 Enchant
			{
				if (castOnItem != 1639 && castOnItem != 1658
						&& castOnItem != 1696) {
					break;
				}
				if (getLevelForXP(playerXP[playerMagic]) >= 27) {
					if (InvItemAmt(564) >= 1 && InvItemAmt(556) >= 3) {
						if (InvItemAmt(castOnItem) >= 1) {
							deleteItem(castOnItem, castOnSlot, 1);
							if (castOnItem == 1639) {
								addItem(2552, 1);
							} else if (castOnItem == 1696) {
								addItem(1729, 1);
							}
							addSkillXP(1 * magicXpInc, 6);
							startAnimation(712, 0);
							playGraphic(115, 0, 100);
							deleteItem(564, GetItemSlot(564), 1);
							deleteItem(556, GetItemSlot(556), 3);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			} else if (castSpell == 1176) // lvl-3 Enchant
			{
				if (castOnItem != 1641 && castOnItem != 1660
						&& castOnItem != 1698) {
					break;
				}
				if (getLevelForXP(playerXP[playerMagic]) >= 49) {
					if (InvItemAmt(564) >= 1 && InvItemAmt(554) >= 5) {
						if (InvItemAmt(castOnItem) >= 1) {
							deleteItem(castOnItem, castOnSlot, 1);
							if (castOnItem == 1641) {
								addItem(2568, 1);
							} else if (castOnItem == 1698) {
								addItem(1725, 1);
							}
							addSkillXP(1 * magicXpInc, 6);
							startAnimation(712, 0);
							playGraphic(116, 0, 100);
							deleteItem(564, GetItemSlot(564), 1);
							deleteItem(554, GetItemSlot(554), 5);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			} else if (castSpell == 1180) // lvl-4 Enchant
			{
				if (castOnItem != 1643 && castOnItem != 1662
						&& castOnItem != 1700) {
					break;
				}
				if (getLevelForXP(playerXP[playerMagic]) >= 57) {
					if (InvItemAmt(564) >= 1 && InvItemAmt(557) >= 10) {
						if (InvItemAmt(castOnItem) >= 1) {
							deleteItem(castOnItem, castOnSlot, 1);
							if (castOnItem == 1643) {
								addItem(2570, 1);
							} else if (castOnItem == 1700) {
								addItem(1731, 1);
							}
							addSkillXP(1 * magicXpInc, 6);
							startAnimation(712, 0);
							playGraphic(116, 0, 100);
							deleteItem(564, GetItemSlot(564), 1);
							deleteItem(557, GetItemSlot(557), 10);
						}
					} else {
						sendMessage("You don't have enough runes to cast this spell.");
					}
				} else {
					sendMessage("You need a higher magic level to cast this spell.");
				}
			}
			if (playerName.equalsIgnoreCase("Mrquarter")) {
				System.out.println("[CLIENT]: castSpell = " + castSpell);
			}
			break;
		case 130:
			if (TradingWith != 0) {
				declineTrade();
			}
			if (duelStatus > 0) {
				declineDuel();
			}
			minimap(0);
			RemoveAllWindows();
			break;
		case 128: // PlayerOption1
			int PlrSlot = inStream.readUnsignedWord();
			Client p = Server.s.playerHandler.clients[PlrSlot];
			String name = this.playerName.toLowerCase();
			String trading = p.playerName.toLowerCase();
			String myIp = PlayerIp;
			String traderIp = p.PlayerIp;
			boolean sameIP = myIp.equals(traderIp);
			boolean sameName = name.equalsIgnoreCase(trading);
			if (p == null) {
				break;
			}
			TurnPlayerTo(32768 + PlrSlot);
			if (WildArea() || duelStatus == 3 || meleeFightStatus == 1) {
				combat.setAttacking(true);
				combat.setEnemyIndex(PlrSlot);
			} else if (duelArea()) {
				if (p.duelStatus == 0 && p.TradeStatus == -1 && TradeStatus == -1) {
					resetDuel();
					p.resetDuel();
					duelStatus = 1;
					p.duelStatus = 1;
					duelWith = PlrSlot;
					p.duelWith = playerId;
					resetItems(3322);
					p.resetItems(3322);
					refreshDuelScreen();
					RefreshDuelRules();
					p.refreshDuelScreen();
					p.RefreshDuelRules();
					sendFrame248(6575, 3321);
					p.sendFrame248(6575, 3321);
				} else {
					sendMessage("You need to be at the duel arena to challenge someone.");
				}
			} else if (duelStatus == -1 && !meleeFightArea()) {
				if (duelArea()) {
					if (sameName || sameIP) {
						showDialogue("You cannot do this.");
					} else {
						if (p.duelStatus == -1 && p.TradeStatus == -1
								&& TradeStatus == -1) {
							sendMessage("Sending duel request...");
							p.sendMessage(playerName + ":duelreq:");
							duelStatus = 0;
							p.duelStatus = 0;
						}
					}
				}
			} else if (meleeFightArea()) {
				if (p.Tradecompete != 0) {
					sendMessage("Other player is not accepting challenges.");
				} else if (p.CurrentFrame > 0) {
					sendMessage("Other player is busy.");
				} else if (p.meleeFightStatus == -1 && p.TradeStatus == -1
						&& meleeFightStatus == -1 && TradeStatus == -1) {
					p.meleeFightStatus = 0;
					meleeFightStatus = 0;
					meleeFightWith = PlrSlot;
					p.meleeFightWith = playerId;
					showDialogue("Melee duel request sent, please wait...");
					p.NpcDialogue = 165;
					p.DialogueSend();
					p.CurrentFrame = 13901;
				}
			}
			break;
		case 153: // PlayerOption2
			int toFollow = inStream.readSignedWordBigEndian();
			if (Server.s.playerHandler.players[toFollow] == null) {
				break;
			}
			if (loginPackets[1] == 10) {
				TurnPlayerTo(32768 + toFollow);
				follow(toFollow, 1, 1);
			}
			// TradePlayer
			/*
			 * TradingWith = Misc.HexToInt(inStream.buffer, 0, packetSize) /
			 * 1000; p = Server.s.playerHandler.clients[TradingWith];
			 * TurnPlayerTo(32768 + TradingWith); if (p == null) { TradingWith =
			 * 0; break; } if (!WithinDistance(p.absX, p.absY, absX, absY, 20))
			 * { break; } if (p.duelStatus == -1 && p.TradeStatus == -1 &&
			 * duelStatus == -1 && TradeStatus == -1) {
			 * sendMessage("Sending trade request..."); p.sendMessage(playerName
			 * + ":tradereq:"); }
			 */
			break;
		case 139:
			int plrId = inStream.readSignedWordBigEndian();
			if (Server.s.playerHandler.players[plrId] == null) {
				break;
			}
			p = Server.s.playerHandler.clients[plrId];
			TurnPlayerTo(32768 + plrId);
			p.TurnPlayerTo(32768 + plrId);
			if (WithinDistance(p.absX, p.absY, absX, absY, 20)) {
				if (p.TradeStatus == -1 && p.duelStatus == -1
						&& TradeStatus == -1 && duelStatus == -1) {
					TradingWith = plrId;
					resetTrade();
					p.resetTrade();
					NewTrade();
					p.NewTrade();
					duelStatus = -1;
					p.duelStatus = -1;
				}
			} else {
				sendMessage("Player is not near by!");
			}
			break;
		case 131:
			// Magic on Npcs.
			spellOnNpc();
			break;
		case 249:
			spellOnPlayer();
			break;
		case 121:
			// This packet is strange. Its caled for every now and then, maybe
			// update related?
			Server.s.itemHandler.ReLoadGroundItems(playerId);
			Deleteobjects();
			CreateNewObjects();
			Server.s.worldO.loadObjects(playerId);
			break;
		case 192:
			// This is for using an item on an object.
			itemOnObject();
			break;
		case 87:
			// Dropping an item in your inventory.
			DropItem();
			break;
		case 155:
			// First click option for NPCs.
			FirstClickNpc();
			break;
		case 236:
			// Picking an item up off the ground.
			PickupItem();
			break;
		case 17:
			// Second click option for NPCs.
			if (loginPackets[0] == 10) {
				SecondClickNpc();
			}
			break;
		case 21:
			// Third click option for NPCs.
			if (loginPackets[2] == 10) {
				ThirdClickNpc();
			}
			break;
		case 122:
			// Item option.
			UseItem();
			break;
		case 41:
			wieldQueue
					.add(new EquipmentData(inStream.readUnsignedWord(),
							inStream.readUnsignedWordA(), inStream
									.readUnsignedWordA()));
			break;
		case 145:
			// Remove equiped item, bank items, or shop related.
			ItemOption1();
			break;
		case 117:
			// Remove equiped item, bank items, or shop related.
			ItemOption2();
			break;
		case 43:
			// Remove equiped item, bank items, or shop related.
			if (loginPackets[3] == 10) {
				ItemOption3();
			}
			break;
		case 129:
			// Remove equiped item, bank items, or shop related.
			ItemOption4();
			break;
		case 101:
			playerLook[0] = inStream.readSignedByte();
			pHead = inStream.readSignedByte();
			pBeard = inStream.readSignedByte();
			pTorso = inStream.readSignedByte();
			pArms = inStream.readSignedByte();
			pHands = inStream.readSignedByte();
			pLegs = inStream.readSignedByte();
			pFeet = inStream.readSignedByte();
			playerLook[1] = inStream.readSignedByte();
			playerLook[2] = inStream.readSignedByte();
			playerLook[3] = inStream.readSignedByte();
			playerLook[4] = inStream.readSignedByte();
			playerLook[5] = inStream.readSignedByte();
			if (pBeard != 10 && pBeard != 11 && pBeard != 12 && pBeard != 13
					&& pBeard != 14 && pBeard != 15 && pBeard != 16
					&& pBeard != 17) {
				pBeard = 14;
			}
			updateRequired = true;
			appearanceUpdateRequired = true;
			break;
		case 135:
			// Remove equiped item, bank items, or shop related.
			XItemSlot = inStream.readSignedWordBigEndian();
			XInterfaceId = inStream.readUnsignedWordA();
			XItemId = inStream.readSignedWordBigEndian();
			if (XInterfaceId == 3900) {
				buyItem(XItemId, XItemSlot, 100);
			} else {
				outStream.createFrame(27);
			}
			break;
		case 208:
			// Remove equiped item, bank items, or shop related.
			ItemOption5();
			break;
		case 73: // PlayerOption3
			/*
			 * int toFollow = inStream.readSignedWordBigEndian(); if
			 * (Server.s.playerHandler.players[toFollow] == null) { break; } if
			 * (loginPackets[1] == 10) { TurnPlayerTo(32768 + toFollow);
			 * follow(toFollow, 1, 1); }
			 */
			// TradePlayer
			TradingWith = Misc.HexToInt(inStream.buffer, 0, packetSize) / 1000;
			Client traderclient = Server.s.playerHandler.clients[TradingWith];
			String name25 = this.playerName.toLowerCase();
			String trading25 = traderclient.playerName.toLowerCase();
			String myIp25 = PlayerIp;
			String traderIp25 = traderclient.PlayerIp;
			boolean sameIP25 = myIp25.equals(traderIp25);
			boolean sameName25 = name25.equalsIgnoreCase(trading25);
			p = Server.s.playerHandler.clients[TradingWith];
			TurnPlayerTo(32768 + TradingWith);
			if (p == null) {
				TradingWith = 0;
				break;
			}
			if (!WithinDistance(p.absX, p.absY, absX, absY, 20)) {
				break;
			}
			if (sameIP25 || sameName25) {
				showDialogue("Fuck off nigger");
				return;
			}
			if (p.duelStatus == -1 && p.TradeStatus == -1 && duelStatus == -1
					&& TradeStatus == -1) {
				if ((PlayerIp == p.PlayerIp) || (playerName == p.playerName)) {
					showDialogue("Nice try.");
				} else {
					sendMessage("Sending trade request...");
					p.sendMessage(playerName + ":tradereq:");
				}
			}
			break;
		case 72:
			// Clicking "Attack" on NPCs.
			attacknpc = inStream.readUnsignedWordA();
			NPC n = Server.s.npcHandler.npcs[attacknpc];
			if (Server.s.npcHandler.npcs[attacknpc] == null) {
				break;
			}
			// say like command atk
			if (pet != null) {
				if (pet.commandedAttack) {
					if (!checkPetCombatStatus(n)) {
						return;
					}
					/*
					 * if(pet != Server.s.npcHandler.npcs[attacknpc]) { return;
					 * }
					 */
					if (!WithinDistance(pet.absX, pet.absY, n.absX, n.absY, 8)) {
						showDialogue("Your pet is too far from the target!");
						pet.commandedAttack = false;
						return;
					}
					if (n.SpawnedFor != -1) {
						if (n.SpawnedFor != playerId) {
							sendMessage("This is some else's npc!");
							break;
						}
					}
					pet.AtkType = 2;
					pet.NpcToKill = attacknpc;
					pet.FollowNpc();
					pet.AttackNpc();
					sendMessage("You command an attack!");
					pet.commandedAttack = false;
					return;
				}
			}
			TurnPlayerTo(attacknpc);
			if (Server.s.npcHandler.npcs[attacknpc].SpawnedFor != -1) {
				if (Server.s.npcHandler.npcs[attacknpc].SpawnedFor != playerId) {
					sendMessage("This is someone else's npc!");
					break;
				}
			}
			if (Server.s.npcHandler.npcs[attacknpc].CurrentHp == 0
					&& Server.s.npcHandler.npcs[attacknpc].IsDead == false) {
				sendMessage("You cannot attack non combat Npcs.");
				IsAttackingNPC = false;
				HasSecondHit = false;
			} else {
				IsAttackingNPC = true;
				HasSecondHit = false;
			}
			break;
		case 4:
			// This packet is player chat.
			chatTextEffects = inStream.readUnsignedByteS();
			chatTextColor = inStream.readUnsignedByteS();
			chatTextSize = (byte) (packetSize - 2);
			String term = Misc.textUnpack(chatText, packetSize - 2)
					.toLowerCase();
			String[] terms = { "nigga", "fag", "n i g g a", "n166a", "gay",
					"quire" };
			if (muted == 0) {
				inStream.readBytes_reverseA(chatText, chatTextSize, 0);
				appendChatText(Misc.textUnpack(chatText, packetSize - 2));
				for (int ddd = 0; ddd < terms.length; ddd++) {
					if (term.contains(terms[ddd])) {
						sendMessage("The message you have entered contains a racist phrase. Please restrain from using it.");
						return;
					}
				}
				if (Misc.textUnpack(chatText, packetSize - 2).contains("dupe"))
					appendDupeText(Misc.textUnpack(chatText, packetSize - 2));
				if (Misc.textUnpack(chatText, packetSize - 2).contains("lure"))
					appendLureText(Misc.textUnpack(chatText, packetSize - 2));
				if (chatTextEffects == 99) {
					clanMessage(Misc.textUnpack(chatText, packetSize - 2));
				} else {
					updateRequired = true;
					chatTextUpdateRequired = true;
				}
			} else {
				showDialogue("You are muted, no one can hear you.");
			}
			break;
		case 185:
			// Handles many in-game buttons.
			ActionButtons();
			break;
		case 181:
			magicOnGroundItem();
			break;
		case 103:
			// This packet loads commands.
			ReadCommandStrings();
			break;
		case 214:
			// Switching two item's slots requires server side changes.
			SwitchItems();
			break;
		case 248:
			packetSize -= 14;
			if (loginPackets[6] == 10) {
				WalkingPacket();
				if (EntangleDelay > 0 || duelRule[9] || IsDead) {
					stopMovement();
				}
			}
			break;
		case 164:
			// Regular walking.
			if (loginPackets[6] == 10) {
				WalkingPacket();
				if (EntangleDelay > 0 || duelRule[9] || IsDead) {
					stopMovement();
				}
			}
			break;
		case 98:
			// Begin/continue to walk.
			if (loginPackets[6] == 10) {
				MainPacket();
				if (EntangleDelay > 0 || duelRule[9] || IsDead) {
					stopMovement();
				}
			}
			break;
		case 14:
			ItemOnPlayer();
			break;
		case 241:
			// This handles mouse clicks.
			int mouseClick = inStream.readDWord();
			clickCount++;
			break;
		case 132:
			// Clicking objects.
			ObjectClick();
			break;
		case 252:
			ObjectClick2();
			break;
		case 86:
			int CameraY = inStream.readUnsignedWord();
			int CameraX = inStream.readUnsignedWordA();
			break;
		case 3:
			Focus = inStream.readUnsignedByte();
			break;
		case 95:
			Tradecompete = inStream.readUnsignedByte();
			Privatechat = inStream.readUnsignedByte();
			Publicchat = inStream.readUnsignedByte();
			for (int i1 = 1; i1 < handler.maxPlayers; i1++) {
				if (handler.players[i1] != null && handler.players[i1].isActive) {
					handler.players[i1].pmupdate(playerId, 1);
				}
			}
			break;
		case 188:
			long friendtoadd = inStream.readQWord();
			boolean CanAdd = true;
			for (int i1 = 0; i1 < friends.length; i1++) {
				if (friends[i1] != 0 && friends[i1] == friendtoadd) {
					CanAdd = false;
					sendMessage(friendtoadd + " is already in your friendlist.");
				}
			}
			if (CanAdd) {
				for (int i1 = 0; i1 < friends.length; i1++) {
					if (friends[i1] == 0) {
						friends[i1] = friendtoadd;
						for (int i2 = 1; i2 < handler.maxPlayers; i2++) {
							if (handler.players[i2] != null
									&& handler.players[i2].isActive
									&& Misc.playerNameToInt64(handler.players[i2].playerName) == friendtoadd) {
								if (playerRights >= 2
										&& playerRights != 4
										&& playerRights != 5
										|| handler.players[i2].Privatechat == 0
										|| (handler.players[i2].Privatechat == 1 && handler.players[i2]
												.isinpm(Misc
														.playerNameToInt64(playerName)))) {
									loadpm(friendtoadd, 1);
									break;
								}
							}
						}
						break;
					}
				}
			}
			break;
		case 215:
			long friendtorem = inStream.readQWord();
			for (int i1 = 0; i1 < friends.length; i1++) {
				if (friends[i1] == friendtorem) {
					friends[i1] = 0;
					break;
				}
			}
			break;
		case 133:
			long igtoadd = inStream.readQWord();
			for (int i10 = 0; i10 < ignores.length; i10++) {
				if (ignores[i10] == 0) {
					ignores[i10] = igtoadd;
					break;
				}
			}
			break;
		case 74:
			long igtorem = inStream.readQWord();
			for (int i11 = 0; i11 < ignores.length; i11++) {
				if (ignores[i11] == igtorem) {
					ignores[i11] = 0;
					break;
				}
			}
			break;
		case 126:
			long friendtosend = inStream.readQWord();
			byte pmchatText[] = new byte[100];
			int pmchatTextSize = (byte) (packetSize - 8);
			inStream.readBytes(pmchatText, pmchatTextSize, 0);
			for (int i1 = 0; i1 < friends.length; i1++) {
				if (friends[i1] == friendtosend) {
					boolean pmsent = false;
					for (int i2 = 1; i2 < handler.maxPlayers; i2++) {
						if (handler.players[i2] != null
								&& handler.players[i2].isActive
								&& Misc.playerNameToInt64(handler.players[i2].playerName) == friendtosend) {
							if (playerRights >= 2
									&& playerRights != 4
									&& playerRights != 5
									|| handler.players[i2].Privatechat == 0
									|| (handler.players[i2].Privatechat == 1 && handler.players[i2]
											.isinpm(Misc
													.playerNameToInt64(playerName)))) {
								handler.players[i2].sendpm(
										Misc.playerNameToInt64(playerName),
										playerRights, pmchatText,
										pmchatTextSize);
								appendPrivChat(Misc.textUnpack(pmchatText,
										packetSize - 2),
										handler.players[i2].playerName);
								pmsent = true;
							}
							break;
						}
					}
					if (!pmsent) {
						sendMessage("Player currently not available");
						break;
					}
				}
			}
			break;
		case 40: // Click here to continue on 1 lined text
			if (NpcDialogue == 2 || NpcDialogue == 5 || NpcDialogue == 8
					|| NpcDialogue == 11 || NpcDialogue == 14
					|| NpcDialogue == 17 || NpcDialogue == 20
					|| NpcDialogue == 23 || NpcDialogue == 26
					|| NpcDialogue == 29 || NpcDialogue == 32
					|| NpcDialogue == 35 || NpcDialogue == 38
					|| NpcDialogue == 41 || NpcDialogue == 48
					|| NpcDialogue == 51 || NpcDialogue == 54
					|| NpcDialogue == 57 || NpcDialogue == 60
					|| NpcDialogue == 63 || NpcDialogue == 66
					|| NpcDialogue == 69 || NpcDialogue == 72
					|| NpcDialogue == 75 || NpcDialogue == 79
					|| NpcDialogue == 81 || NpcDialogue == 90
					|| NpcDialogue == 92 || NpcDialogue == 93
					|| NpcDialogue == 95 || NpcDialogue == 97
					|| NpcDialogue == 98 || NpcDialogue == 99
					|| NpcDialogue == 84 || NpcDialogue == 85
					|| NpcDialogue == 86 || NpcDialogue == 102
					|| NpcDialogue == 104 || NpcDialogue == 107
					|| NpcDialogue == 108 || NpcDialogue == 110
					|| NpcDialogue == 112 || NpcDialogue == 115
					|| NpcDialogue == 116 || NpcDialogue == 118
					|| NpcDialogue == 122 || NpcDialogue == 87
					|| NpcDialogue == 127 || NpcDialogue == 128
					|| NpcDialogue == 129 || NpcDialogue == 130
					|| NpcDialogue == 132 || NpcDialogue == 135
					|| NpcDialogue == 136 || NpcDialogue == 145
					|| NpcDialogue == 146 || NpcDialogue == 147
					|| NpcDialogue == 150 || NpcDialogue == 151
					|| NpcDialogue == 152 || NpcDialogue == 153
					|| NpcDialogue == 154 || NpcDialogue == 155
					|| NpcDialogue == 157 || NpcDialogue == 158
					|| NpcDialogue == 159 || NpcDialogue == 160
					|| NpcDialogue == 161 || NpcDialogue == 162
					|| NpcDialogue == 163 || NpcDialogue == 166
					|| NpcDialogue == 167 || NpcDialogue == 168
					|| NpcDialogue == 169 || NpcDialogue == 170
					|| NpcDialogue == 171 || NpcDialogue == 172
					|| NpcDialogue == 173 || NpcDialogue == 174
					|| NpcDialogue == 175 || NpcDialogue == 176
					|| NpcDialogue == 178 || NpcDialogue == 179
					|| NpcDialogue == 180 || NpcDialogue == 181
					|| NpcDialogue == 182 || NpcDialogue == 183
					|| NpcDialogue == 184 || NpcDialogue == 185
					|| NpcDialogue == 187 || NpcDialogue == 188
					|| NpcDialogue == 189 || NpcDialogue == 190
					|| NpcDialogue == 191 || NpcDialogue == 192
					|| NpcDialogue == 193 || NpcDialogue == 194
					|| NpcDialogue == 196 || NpcDialogue == 197
					|| NpcDialogue == 198 || NpcDialogue == 199
					|| NpcDialogue == 200 || NpcDialogue == 201
					|| NpcDialogue == 203 || NpcDialogue == 204
					|| NpcDialogue == 205 || NpcDialogue == 206
					|| NpcDialogue == 207 || NpcDialogue == 208
					|| NpcDialogue == 209 || NpcDialogue == 211
					|| NpcDialogue == 212 || NpcDialogue == 213
					|| NpcDialogue == 214 || NpcDialogue == 215
					|| NpcDialogue == 215 || NpcDialogue == 217
					|| NpcDialogue == 219 || NpcDialogue == 220
					|| NpcDialogue == 221 || NpcDialogue == 222
					|| NpcDialogue == 223 || NpcDialogue == 224
					|| NpcDialogue == 225 || NpcDialogue == 231
					|| NpcDialogue == 233 || NpcDialogue == 235
					|| NpcDialogue == 237 || NpcDialogue == 239
					|| NpcDialogue == 240 || NpcDialogue == 241
					|| NpcDialogue == 242 || NpcDialogue == 243
					|| NpcDialogue == 244 || NpcDialogue == 245
					|| NpcDialogue == 246 || NpcDialogue == 247
					|| NpcDialogue == 249 || NpcDialogue == 250
					|| NpcDialogue == 251 || NpcDialogue == 252
					|| NpcDialogue == 253 || NpcDialogue == 254
					|| NpcDialogue == 255 || NpcDialogue == 257
					|| NpcDialogue == 258 || NpcDialogue == 259
					|| NpcDialogue == 260 || NpcDialogue == 262
					|| NpcDialogue == 263 || NpcDialogue == 264
					|| NpcDialogue == 265 || NpcDialogue == 267
					|| NpcDialogue == 268 || NpcDialogue == 269
					|| NpcDialogue == 270 || NpcDialogue == 271
					|| NpcDialogue == 272 || NpcDialogue == 274
					|| NpcDialogue == 275 || NpcDialogue == 277
					|| NpcDialogue == 278 || NpcDialogue == 279
					|| NpcDialogue == 280 || NpcDialogue == 281
					|| NpcDialogue == 283 || NpcDialogue == 284
					|| NpcDialogue == 285 || NpcDialogue == 286
					|| NpcDialogue == 288 || NpcDialogue == 289
					|| NpcDialogue == 290 || NpcDialogue == 291
					|| NpcDialogue == 292 || NpcDialogue == 293
					|| NpcDialogue == 294) {
				NpcDialogue++;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 4 || NpcDialogue == 7
					|| NpcDialogue == 10 || NpcDialogue == 13
					|| NpcDialogue == 16 || NpcDialogue == 19
					|| NpcDialogue == 18 || NpcDialogue == 22
					|| NpcDialogue == 25 || NpcDialogue == 28
					|| NpcDialogue == 31 || NpcDialogue == 33
					|| NpcDialogue == 37 || NpcDialogue == 40
					|| NpcDialogue == 43 || NpcDialogue == 44
					|| NpcDialogue == 45 || NpcDialogue == 46
					|| NpcDialogue == 47 || NpcDialogue == 50
					|| NpcDialogue == 53 || NpcDialogue == 56
					|| NpcDialogue == 58 || NpcDialogue == 62
					|| NpcDialogue == 65 || NpcDialogue == 68
					|| NpcDialogue == 71 || NpcDialogue == 74
					|| NpcDialogue == 77 || NpcDialogue == 80
					|| NpcDialogue == 83 || NpcDialogue == 131
					|| NpcDialogue == 134 || NpcDialogue == 137
					|| NpcDialogue == 140 || NpcDialogue == 141
					|| NpcDialogue == 142 || NpcDialogue == 143
					|| NpcDialogue == 144 || NpcDialogue == 148
					|| NpcDialogue == 156 || NpcDialogue == 164
					|| NpcDialogue == 177 || NpcDialogue == 186
					|| NpcDialogue == 195 || NpcDialogue == 202
					|| NpcDialogue == 210 || NpcDialogue == 218
					|| NpcDialogue == 226 || NpcDialogue == 227
					|| NpcDialogue == 232 || NpcDialogue == 234
					|| NpcDialogue == 236 || NpcDialogue == 238
					|| NpcDialogue == 248 || NpcDialogue == 256
					|| NpcDialogue == 261 || NpcDialogue == 266
					|| NpcDialogue == 273 || NpcDialogue == 276
					|| NpcDialogue == 282 || NpcDialogue == 287
					|| NpcDialogue == 295) {
				NpcDialogue = -1;
				RemoveAllWindows();
			} else if (NpcDialogue == 121) {
				NpcDialogue += 2;
				DialogueSend();
				CurrentFrame = 13901;
			} else if (NpcDialogue == 120) {
				if (mageArenaQuest > 0) {
					NpcDialogue = 122;
				} else {
					NpcDialogue = 121;
				}
				DialogueSend();
				CurrentFrame = 13901;
			} else {
				NpcDialogue = -1;
				RemoveAllWindows();
			}
			break;
		case 230:
			int integerCheck = inStream.readUnsignedByte();
			if (integerCheck != 245) {
				disconnected = true;
			} else {
				loginPackets[0] = 10;
			}
			break;
		case 189:
			integerCheck = inStream.readUnsignedByte();
			if (integerCheck != 199) {
				disconnected = true;
			} else {
				loginPackets[1] = 10;
			}
			break;
		case 152:
			integerCheck = inStream.readUnsignedByte();
			if (integerCheck != 90) {
				disconnected = true;
			} else {
				loginPackets[2] = 10;
			}
			break;
		case 200:
			integerCheck = inStream.readUnsignedWord();
			if (integerCheck != 25505) {
				disconnected = true;
			} else {
				loginPackets[3] = 10;
			}
			break;
		case 85:
			integerCheck = inStream.readUnsignedByte();
			if (integerCheck != 69) {
				disconnected = true;
			} else {
				loginPackets[4] = 10;
			}
			break;
		case 238:
			integerCheck = inStream.readUnsignedByte();
			if (integerCheck != 98) {
				disconnected = true;
			} else {
				loginPackets[5] = 10;
			}
			break;
		case 36:
			integerCheck = inStream.readDWord();
			if (integerCheck != 5) {
				disconnected = true;
			} else {
				loginPackets[6] = 10;
			}
			break;
		case 226:
		case 78:
		case 148:
		case 183:
		case 136:
		case 165:
		case 150:
		case 246:
		case 77:
			// Packets 226-77 help lower the amount of possible cheating.
			break;
		default:
			System.out.println("[CLIENT]: [" + playerName + "] PacketID: "
					+ packetType);
			// Server.s.serverConsole.addMessToServer("Packet id "+packetType+" has not been added.");
			break;
		}
	}

	public boolean bankItem(int itemId, int fromSlot, int amount) {
		if (amount <= 0 || fromSlot < 0 || playerItemsN[fromSlot] <= 0
				|| playerItems[fromSlot] <= 0
				|| playerItems[fromSlot] != itemId + 1) {
			return false;
		}
		if (Item.itemIsNote[itemId] || Item.itemStackable[itemId]) {
			int toBankSlot = -1;
			if (amount > playerItemsN[fromSlot]) {
				amount = playerItemsN[fromSlot];
			}
			if (!Item.itemIsNote[itemId]) {
				if (BankItemAmt(itemId) > 0) {
					toBankSlot = BankSlotItem(itemId);
				}
			} else {
				if (BankItemAmt(playerItems[fromSlot] - 2) > 0) {
					toBankSlot = BankSlotItem(playerItems[fromSlot] - 2);
				}
			}
			if (toBankSlot == -1 && freeBankSlots() > 0) {
				int bankSlot = GetBlankBankSlot();
				if (bankSlot != -1) {
					toBankSlot = bankSlot;
				} else {
					sendMessage("Not enough bank space!");
					return false;
				}
				if (!Item.itemIsNote[itemId]) {
					bankItems[toBankSlot] = itemId + 1;
				} else {
					bankItems[toBankSlot] = playerItems[fromSlot] - 1;
				}
				if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
						&& (bankItemsN[toBankSlot] + amount) > 0) {
					bankItemsN[toBankSlot] += amount;
				} else {
					sendMessage("Not enough bank space!");
					return false;
				}
				deleteItem(itemId, fromSlot, amount);
				resetItems(5064);
				resetBank();
				return true;
			} else if (toBankSlot != -1) {
				if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
						&& (bankItemsN[toBankSlot] + amount) > 0) {
					bankItemsN[toBankSlot] += amount;
				} else {
					sendMessage("Not enough bank space!");
					return false;
				}
				deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
				resetItems(5064);
				resetBank();
				return true;
			} else {
				sendMessage("Not enough bank space!");
				return false;
			}
		} else {
			int toBankSlot = -1;
			if (BankItemAmt(itemId) > 0) {
				toBankSlot = BankSlotItem(itemId);
			}
			if (toBankSlot == -1 && freeBankSlots() > 0) {
				int bankSlot = GetBlankBankSlot();
				if (bankSlot != -1) {
					toBankSlot = bankSlot;
				} else {
					sendMessage("Not enough bank space!");
					return false;
				}
				while (amount > 0) {
					if (InvItemAmt(itemId) > 0) {
						bankItems[toBankSlot] = playerItems[InvSlotItem(itemId)];
						bankItemsN[toBankSlot]++;
						;
						deleteItem((playerItems[InvSlotItem(itemId)] - 1),
								InvSlotItem(itemId), 1);
						amount--;
					} else {
						amount = 0;
					}
				}
				resetItems(5064);
				resetBank();
				return true;
			} else if (toBankSlot != -1) {
				while (amount > 0) {
					if (InvItemAmt(itemId) > 0) {
						bankItemsN[toBankSlot]++;
						deleteItem((playerItems[InvSlotItem(itemId)] - 1),
								InvSlotItem(itemId), 1);
						amount--;
					} else {
						amount = 0;
					}
				}
				resetItems(5064);
				resetBank();
				return true;
			} else {
				sendMessage("Not enough bank space!");
				return false;
			}
		}
	}

	public void fromBank(int itemId, int fromSlot, int amount) {
		if (fromSlot < 0 || fromSlot >= bankItems.length || amount <= 0
				|| bankItems[fromSlot] != itemId + 1) {
			return;
		}
		if (amount > 0) {
			if (itemId > 0) {
				if (!takeAsNote) {
					if (Item.itemStackable[itemId]) {
						if (bankItemsN[fromSlot] > amount) {
							if (addItem(itemId, amount)) {
								bankItemsN[fromSlot] -= amount;
								resetBank();
								resetItems(5064);
							}
						} else {
							if (addItem(itemId, bankItemsN[fromSlot])) {
								bankItems[fromSlot] = 0;
								bankItemsN[fromSlot] = 0;
								resetBank();
								resetItems(5064);
							}
						}
					} else {
						while (amount > 0) {
							if (bankItemsN[fromSlot] > 0) {
								if (addItem(itemId, 1)) {
									bankItemsN[fromSlot] += -1;
									amount--;
								} else {
									amount = 0;
								}
							} else {
								amount = 0;
							}
						}
						resetBank();
						resetItems(5064);
					}
				} else if (takeAsNote && Item.itemIsNote[bankItems[fromSlot]]) {
					if (bankItemsN[fromSlot] > amount) {
						if (addItem(bankItems[fromSlot], amount)) {
							bankItemsN[fromSlot] -= amount;
							resetBank();
							resetItems(5064);
						}
					} else {
						if (addItem(bankItems[fromSlot], bankItemsN[fromSlot])) {
							bankItems[fromSlot] = 0;
							bankItemsN[fromSlot] = 0;
							resetBank();
							resetItems(5064);
						}
					}
				} else {
					sendMessage("Item can't be drawn as note.");
				}
			}
		}
	}
}
